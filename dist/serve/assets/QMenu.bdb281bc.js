var Le=Object.defineProperty,Oe=Object.defineProperties;var Be=Object.getOwnPropertyDescriptors;var J=Object.getOwnPropertySymbols;var Re=Object.prototype.hasOwnProperty,Fe=Object.prototype.propertyIsEnumerable;var Z=(e,t,n)=>t in e?Le(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))Re.call(t,n)&&Z(e,n,t[n]);if(J)for(var n of J(t))Fe.call(t,n)&&Z(e,n,t[n]);return e},B=(e,t)=>Oe(e,Be(t));import{at as $e,x as k,W as ce,$ as ee,H as D,X as te,G as x,M as Ae,L as H,P as de,Y as De,a4 as F,au as ne,av as ze,N as $,aw as Ke,J as g,aj as z,ax as Ne,K as Qe,Z as je,ay as Ge,R as Ie,a1 as _e,az as Ve,a3 as Ue}from"./vendor.3fb54e24.js";import{u as Xe,a as Ye,b as Je}from"./use-model-toggle.a87aeb12.js";import{d as Ze,e as et}from"./QCard.ba24e7ad.js";import{n as R,r as oe,o as tt,g as nt}from"./use-key-composition.9a07a52d.js";function ot(){if(window.getSelection!==void 0){const e=window.getSelection();e.empty!==void 0?e.empty():e.removeAllRanges!==void 0&&(e.removeAllRanges(),$e.is.mobile!==!0&&e.addRange(document.createRange()))}else document.selection!==void 0&&document.selection.empty()}const it={target:{default:!0},noParentEvent:Boolean,contextMenu:Boolean};function lt({showing:e,avoidEmit:t,configureAnchorEl:n}){const{props:i,proxy:l,emit:s}=de(),o=k(null);let f;function d(a){return o.value===null?!1:a===void 0||a.touches===void 0||a.touches.length<=1}const r={};n===void 0&&(Object.assign(r,{hide(a){l.hide(a)},toggle(a){l.toggle(a),a.qAnchorHandled=!0},toggleKey(a){ce(a,13)===!0&&r.toggle(a)},contextClick(a){l.hide(a),ee(a),D(()=>{l.show(a),a.qAnchorHandled=!0})},prevent:ee,mobileTouch(a){if(r.mobileCleanup(a),d(a)!==!0)return;l.hide(a),o.value.classList.add("non-selectable");const h=a.target;te(r,"anchor",[[h,"touchmove","mobileCleanup","passive"],[h,"touchend","mobileCleanup","passive"],[h,"touchcancel","mobileCleanup","passive"],[o.value,"contextmenu","prevent","notPassive"]]),f=setTimeout(()=>{l.show(a),a.qAnchorHandled=!0},300)},mobileCleanup(a){o.value.classList.remove("non-selectable"),clearTimeout(f),e.value===!0&&a!==void 0&&ot()}}),n=function(a=i.contextMenu){if(i.noParentEvent===!0||o.value===null)return;let h;a===!0?l.$q.platform.is.mobile===!0?h=[[o.value,"touchstart","mobileTouch","passive"]]:h=[[o.value,"mousedown","hide","passive"],[o.value,"contextmenu","contextClick","notPassive"]]:h=[[o.value,"click","toggle","passive"],[o.value,"keyup","toggleKey","passive"]],te(r,"anchor",h)});function c(){De(r,"anchor")}function v(a){for(o.value=a;o.value.classList.contains("q-anchor--skip");)o.value=o.value.parentNode;n()}function m(){if(i.target===!1||i.target==="")o.value=null;else if(i.target===!0)v(l.$el.parentNode);else{let a=i.target;if(typeof i.target=="string")try{a=document.querySelector(i.target)}catch{a=void 0}a!=null?(o.value=a.$el||a,n()):(o.value=null,console.error(`Anchor: target "${i.target}" not found`))}}return x(()=>i.contextMenu,a=>{o.value!==null&&(c(),n(a))}),x(()=>i.target,()=>{o.value!==null&&c(),m()}),x(()=>i.noParentEvent,a=>{o.value!==null&&(a===!0?c():n())}),Ae(()=>{m(),t!==!0&&i.modelValue===!0&&o.value===null&&s("update:modelValue",!1)}),H(()=>{clearTimeout(f),c()}),{anchorEl:o,canShow:d,anchorEvents:r}}function at(e,t){const n=k(null);let i;function l(f,d){const r=`${d!==void 0?"add":"remove"}EventListener`,c=d!==void 0?d:i;f!==window&&f[r]("scroll",c,F.passive),window[r]("scroll",c,F.passive),i=d}function s(){n.value!==null&&(l(n.value),n.value=null)}const o=x(()=>e.noParentEvent,()=>{n.value!==null&&(s(),t())});return H(o),{localScrollTarget:n,unconfigureScrollTarget:s,changeScrollEvent:l}}let ut=document.body;function rt(e){const t=document.createElement("div");if(e!==void 0&&(t.id=e),ne.globalNodes!==void 0){const n=ne.globalNodes.class;n!==void 0&&(t.className=n)}return ut.appendChild(t),t}function st(e){e.remove()}const C=[];function ct(e,t){do{if(e.$options.name==="QMenu"){if(e.hide(t),e.$props.separateClosePopup===!0)return R(e)}else if(e.__qPortalInnerRef!==void 0){const n=R(e);return n!==void 0&&n.$options.name==="QPopupProxy"?(e.hide(t),n):e}e=R(e)}while(e!=null)}function dt(e){for(e=e.parent;e!=null;){if(e.type.name==="QGlobalDialog")return!0;if(e.type.name==="QDialog"||e.type.name==="QMenu")return!1;e=e.parent}return!1}function ft(e,t,n,i){const l=k(!1);let s=null;const o={},f=i===!0&&dt(e);function d(c){if(c===!0){oe(o);return}l.value===!1&&(f===!1&&s===null&&(s=rt()),l.value=!0,C.push(e.proxy),tt(o))}function r(){oe(o),l.value=!1;const c=C.indexOf(e.proxy);c>-1&&C.splice(c,1),s!==null&&(st(s),s=null)}return ze(r),Object.assign(e.proxy,{__qPortalInnerRef:t}),{showPortal:d,hidePortal:r,portalIsActive:l,renderPortal:()=>f===!0?n():l.value===!0?[$(Ke,{to:s},n())]:void 0}}const ht={transitionShow:{type:String,default:"fade"},transitionHide:{type:String,default:"fade"},transitionDuration:{type:[String,Number],default:300}};function mt(e,t){const n=k(t.value);return x(t,i=>{D(()=>{n.value=i})}),{transition:g(()=>"q-transition--"+(n.value===!0?e.transitionHide:e.transitionShow)),transitionStyle:g(()=>`--q-transition-duration: ${e.transitionDuration}ms`)}}function vt(){let e;return H(()=>{e=void 0}),{registerTick(t){e=t,D(()=>{e===t&&(e(),e=void 0)})},removeTick(){e=void 0}}}function gt(){let e;return H(()=>{clearTimeout(e)}),{registerTimeout(t,n){clearTimeout(e),e=setTimeout(t,n)},removeTimeout(){clearTimeout(e)}}}const y=[];let E;function pt(e){E=e.keyCode===27}function xt(){E===!0&&(E=!1)}function yt(e){E===!0&&(E=!1,ce(e,27)===!0&&y[y.length-1](e))}function fe(e){window[e]("keydown",pt),window[e]("blur",xt),window[e]("keyup",yt),E=!1}function bt(e){z.is.desktop===!0&&(y.push(e),y.length===1&&fe("addEventListener"))}function ie(e){const t=y.indexOf(e);t>-1&&(y.splice(t,1),y.length===0&&fe("removeEventListener"))}const b=[];function he(e){b[b.length-1](e)}function wt(e){z.is.desktop===!0&&(b.push(e),b.length===1&&document.body.addEventListener("focusin",he))}function Tt(e){const t=b.indexOf(e);t>-1&&(b.splice(t,1),b.length===0&&document.body.removeEventListener("focusin",he))}let me;const{notPassiveCapture:P}=F,w=[];function M(e){clearTimeout(me);const t=e.target;if(t===void 0||t.nodeType===8||t.classList.contains("no-pointer-events")===!0)return;let n=C.length-1;for(;n>=0;){const i=C[n].$;if(i.type.name!=="QDialog")break;if(i.props.seamless!==!0)return;n--}for(let i=w.length-1;i>=0;i--){const l=w[i];if((l.anchorEl.value===null||l.anchorEl.value.contains(t)===!1)&&(t===document.body||l.innerRef.value!==null&&l.innerRef.value.contains(t)===!1))e.qClickOutside=!0,l.onClickOutside(e);else return}}function kt(e){w.push(e),w.length===1&&(document.addEventListener("mousedown",M,P),document.addEventListener("touchstart",M,P))}function le(e){const t=w.findIndex(n=>n===e);t>-1&&(w.splice(t,1),w.length===0&&(clearTimeout(me),document.removeEventListener("mousedown",M,P),document.removeEventListener("touchstart",M,P)))}let ae,ue;function re(e){const t=e.split(" ");return t.length!==2?!1:["top","center","bottom"].includes(t[0])!==!0?(console.error("Anchor/Self position must start with one of top/center/bottom"),!1):["left","middle","right","start","end"].includes(t[1])!==!0?(console.error("Anchor/Self position must end with one of left/middle/right/start/end"),!1):!0}function Et(e){return e?!(e.length!==2||typeof e[0]!="number"||typeof e[1]!="number"):!0}const A={"start#ltr":"left","start#rtl":"right","end#ltr":"right","end#rtl":"left"};["left","middle","right"].forEach(e=>{A[`${e}#ltr`]=e,A[`${e}#rtl`]=e});function se(e,t){const n=e.split(" ");return{vertical:n[0],horizontal:A[`${n[1]}#${t===!0?"rtl":"ltr"}`]}}function St(e,t){let{top:n,left:i,right:l,bottom:s,width:o,height:f}=e.getBoundingClientRect();return t!==void 0&&(n-=t[1],i-=t[0],s+=t[1],l+=t[0],o+=t[0],f+=t[1]),{top:n,left:i,right:l,bottom:s,width:o,height:f,middle:i+(l-i)/2,center:n+(s-n)/2}}function Ct(e){return{top:0,center:e.offsetHeight/2,bottom:e.offsetHeight,left:0,middle:e.offsetWidth/2,right:e.offsetWidth}}function Ht(e){if(z.is.ios===!0&&window.visualViewport!==void 0){const f=document.body.style,{offsetLeft:d,offsetTop:r}=window.visualViewport;d!==ae&&(f.setProperty("--q-pe-left",d+"px"),ae=d),r!==ue&&(f.setProperty("--q-pe-top",r+"px"),ue=r)}let t;const{scrollLeft:n,scrollTop:i}=e.el;if(e.absoluteOffset===void 0)t=St(e.anchorEl,e.cover===!0?[0,0]:e.offset);else{const{top:f,left:d}=e.anchorEl.getBoundingClientRect(),r=f+e.absoluteOffset.top,c=d+e.absoluteOffset.left;t={top:r,left:c,width:1,height:1,right:c+1,center:r,middle:c,bottom:r+1}}let l={maxHeight:e.maxHeight,maxWidth:e.maxWidth,visibility:"visible"};(e.fit===!0||e.cover===!0)&&(l.minWidth=t.width+"px",e.cover===!0&&(l.minHeight=t.height+"px")),Object.assign(e.el.style,l);const s=Ct(e.el),o={top:t[e.anchorOrigin.vertical]-s[e.selfOrigin.vertical],left:t[e.anchorOrigin.horizontal]-s[e.selfOrigin.horizontal]};Pt(o,t,s,e.anchorOrigin,e.selfOrigin),l={top:o.top+"px",left:o.left+"px"},o.maxHeight!==void 0&&(l.maxHeight=o.maxHeight+"px",t.height>o.maxHeight&&(l.minHeight=l.maxHeight)),o.maxWidth!==void 0&&(l.maxWidth=o.maxWidth+"px",t.width>o.maxWidth&&(l.minWidth=l.maxWidth)),Object.assign(e.el.style,l),e.el.scrollTop!==i&&(e.el.scrollTop=i),e.el.scrollLeft!==n&&(e.el.scrollLeft=n)}function Pt(e,t,n,i,l){const s=n.bottom,o=n.right,f=Ne(),d=window.innerHeight-f,r=document.body.clientWidth;if(e.top<0||e.top+s>d)if(l.vertical==="center")e.top=t[i.vertical]>d/2?Math.max(0,d-s):0,e.maxHeight=Math.min(s,d);else if(t[i.vertical]>d/2){const c=Math.min(d,i.vertical==="center"?t.center:i.vertical===l.vertical?t.bottom:t.top);e.maxHeight=Math.min(s,c),e.top=Math.max(0,c-s)}else e.top=Math.max(0,i.vertical==="center"?t.center:i.vertical===l.vertical?t.top:t.bottom),e.maxHeight=Math.min(s,d-e.top);if(e.left<0||e.left+o>r)if(e.maxWidth=Math.min(o,r),l.horizontal==="middle")e.left=t[i.horizontal]>r/2?Math.max(0,r-o):0;else if(t[i.horizontal]>r/2){const c=Math.min(r,i.horizontal==="middle"?t.middle:i.horizontal===l.horizontal?t.right:t.left);e.maxWidth=Math.min(o,c),e.left=Math.max(0,c-e.maxWidth)}else e.left=Math.max(0,i.horizontal==="middle"?t.middle:i.horizontal===l.horizontal?t.left:t.right),e.maxWidth=Math.min(o,r-e.left)}var Bt=Qe({name:"QMenu",inheritAttrs:!1,props:B(p(p(p(p({},it),Xe),Ze),ht),{persistent:Boolean,autoClose:Boolean,separateClosePopup:Boolean,noRouteDismiss:Boolean,noRefocus:Boolean,noFocus:Boolean,fit:Boolean,cover:Boolean,square:Boolean,anchor:{type:String,validator:re},self:{type:String,validator:re},offset:{type:Array,validator:Et},scrollTarget:{default:void 0},touchPosition:Boolean,maxHeight:{type:String,default:null},maxWidth:{type:String,default:null}}),emits:[...Ye,"click","escape-key"],setup(e,{slots:t,emit:n,attrs:i}){let l=null,s,o,f;const d=de(),{proxy:r}=d,{$q:c}=r,v=k(null),m=k(!1),a=g(()=>e.persistent!==!0&&e.noRouteDismiss!==!0),h=et(e,c),{registerTick:ve,removeTick:K}=vt(),{registerTimeout:N,removeTimeout:Q}=gt(),{transition:ge,transitionStyle:pe}=mt(e,m),{localScrollTarget:j,changeScrollEvent:xe,unconfigureScrollTarget:ye}=at(e,X),{anchorEl:T,canShow:be}=lt({showing:m}),{hide:G}=Je({showing:m,canShow:be,handleShow:Ce,handleHide:He,hideOnRouteChange:a,processOnMount:!0}),{showPortal:I,hidePortal:we,renderPortal:Te}=ft(d,v,Me),W={anchorEl:T,innerRef:v,onClickOutside(u){if(e.persistent!==!0&&m.value===!0)return G(u),(u.type==="touchstart"||u.target.classList.contains("q-dialog__backdrop"))&&Ue(u),!0}},_=g(()=>se(e.anchor||(e.cover===!0?"center middle":"bottom start"),c.lang.rtl)),ke=g(()=>e.cover===!0?_.value:se(e.self||"top start",c.lang.rtl)),Ee=g(()=>(e.square===!0?" q-menu--square":"")+(h.value===!0?" q-menu--dark q-dark":"")),Se=g(()=>e.autoClose===!0?{onClick:Pe}:{}),V=g(()=>m.value===!0&&e.persistent!==!0);x(V,u=>{u===!0?(bt(L),kt(W)):(ie(L),le(W))});function q(){nt(()=>{let u=v.value;u&&u.contains(document.activeElement)!==!0&&(u=u.querySelector("[autofocus], [data-autofocus]")||u,u.focus({preventScroll:!0}))})}function Ce(u){if(K(),Q(),l=e.noRefocus===!1?document.activeElement:null,wt(Y),I(),X(),s=void 0,u!==void 0&&(e.touchPosition||e.contextMenu)){const O=je(u);if(O.left!==void 0){const{top:We,left:qe}=T.value.getBoundingClientRect();s={left:O.left-qe,top:O.top-We}}}o===void 0&&(o=x(()=>c.screen.width+"|"+c.screen.height+"|"+e.self+"|"+e.anchor+"|"+c.lang.rtl,S)),e.noFocus!==!0&&document.activeElement.blur(),ve(()=>{S(),e.noFocus!==!0&&q()}),N(()=>{c.platform.is.ios===!0&&(f=e.autoClose,v.value.click()),S(),I(!0),n("show",u)},e.transitionDuration)}function He(u){K(),Q(),U(!0),l!==null&&(u===void 0||u.qClickOutside!==!0)&&(l.focus(),l=null),N(()=>{we(),n("hide",u)},e.transitionDuration)}function U(u){s=void 0,o!==void 0&&(o(),o=void 0),(u===!0||m.value===!0)&&(Tt(Y),ye(),le(W),ie(L)),u!==!0&&(l=null)}function X(){(T.value!==null||e.scrollTarget!==void 0)&&(j.value=Ge(T.value,e.scrollTarget),xe(j.value,S))}function Pe(u){f!==!0?(ct(r,u),n("click",u)):f=!1}function Y(u){V.value===!0&&e.noFocus!==!0&&Ve(v.value,u.target)!==!0&&q()}function L(u){n("escape-key"),G(u)}function S(){const u=v.value;u===null||T.value===null||Ht({el:u,offset:e.offset,anchorEl:T.value,anchorOrigin:_.value,selfOrigin:ke.value,absoluteOffset:s,fit:e.fit,cover:e.cover,maxHeight:e.maxHeight,maxWidth:e.maxWidth})}function Me(){return $(_e,{name:ge.value,appear:!0},()=>m.value===!0?$("div",p(B(p({},i),{ref:v,tabindex:-1,class:["q-menu q-position-engine scroll"+Ee.value,i.class],style:[i.style,pe.value]}),Se.value),Ie(t.default)):null)}return H(U),Object.assign(r,{focus:q,updatePosition:S}),Te}});export{Bt as Q,ht as a,vt as b,ot as c,ft as d,ie as e,wt as f,bt as g,Tt as r,gt as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
