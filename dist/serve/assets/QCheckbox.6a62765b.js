var N=Object.defineProperty,Q=Object.defineProperties;var R=Object.getOwnPropertyDescriptors;var _=Object.getOwnPropertySymbols;var D=Object.prototype.hasOwnProperty,K=Object.prototype.propertyIsEnumerable;var q=(t,l,e)=>l in t?N(t,l,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[l]=e,v=(t,l)=>{for(var e in l||(l={}))D.call(l,e)&&q(t,e,l[e]);if(_)for(var e of _(l))K.call(l,e)&&q(t,e,l[e]);return t},k=(t,l)=>Q(t,R(l));import{e as M,b as H,d as L,a as J,c as G}from"./QCard.ba24e7ad.js";import{x as C,J as n,N as o,a0 as U,R as W,P as X,a3 as I,K as Y}from"./vendor.3fb54e24.js";import{a as Z,q as ee}from"./use-key-composition.9a07a52d.js";function te(t,l){const e=C(null),c=n(()=>t.disable!==!0?null:o("span",{ref:e,class:"no-outline",tabindex:-1}));function i(s){const r=l.value;s!==void 0&&s.type.indexOf("key")===0?r!==null&&document.activeElement!==r&&r.contains(document.activeElement)===!0&&r.focus():e.value!==null&&(s===void 0||r!==null&&r.contains(s.target)===!0)&&e.value.focus()}return{refocusTargetEl:c,refocusTarget:i}}var ae={xs:30,sm:35,md:40,lg:50,xl:60};const le=k(v(v(v({},L),J),Z),{modelValue:{required:!0,default:null},val:{},trueValue:{default:!0},falseValue:{default:!1},indeterminateValue:{default:null},checkedIcon:String,uncheckedIcon:String,indeterminateIcon:String,toggleOrder:{type:String,validator:t=>t==="tf"||t==="ft"},toggleIndeterminate:Boolean,label:String,leftLabel:Boolean,color:String,keepColor:Boolean,dense:Boolean,disable:Boolean,tabindex:[String,Number]}),ne=["update:modelValue"];function oe(t,l){const{props:e,slots:c,emit:i,proxy:s}=X(),{$q:r}=s,y=M(e,r),h=C(null),{refocusTargetEl:x,refocusTarget:S}=te(e,h),$=H(e,ae),d=n(()=>e.val!==void 0&&Array.isArray(e.modelValue)),m=n(()=>d.value===!0?e.modelValue.indexOf(e.val):-1),u=n(()=>d.value===!0?m.value>-1:e.modelValue===e.trueValue),b=n(()=>d.value===!0?m.value===-1:e.modelValue===e.falseValue),p=n(()=>u.value===!1&&b.value===!1),O=n(()=>e.disable===!0?-1:e.tabindex||0),B=n(()=>`q-${t} cursor-pointer no-outline row inline no-wrap items-center`+(e.disable===!0?" disabled":"")+(y.value===!0?` q-${t}--dark`:"")+(e.dense===!0?` q-${t}--dense`:"")+(e.leftLabel===!0?" reverse":"")),P=n(()=>{const a=u.value===!0?"truthy":b.value===!0?"falsy":"indet",f=e.color!==void 0&&(e.keepColor===!0||(t==="toggle"?u.value===!0:b.value!==!0))?` text-${e.color}`:"";return`q-${t}__inner relative-position non-selectable q-${t}__inner--${a}${f}`}),T=n(()=>{const a={type:"checkbox"};return e.name!==void 0&&Object.assign(a,{"^checked":u.value===!0?"checked":void 0,name:e.name,value:d.value===!0?e.val:e.trueValue}),a}),w=ee(T),A=n(()=>{const a={tabindex:O.value,role:"checkbox","aria-label":e.label,"aria-checked":p.value===!0?"mixed":u.value===!0?"true":"false"};return e.disable===!0&&(a["aria-disabled"]="true"),a});function g(a){a!==void 0&&(I(a),S(a)),e.disable!==!0&&i("update:modelValue",E(),a)}function E(){if(d.value===!0){if(u.value===!0){const a=e.modelValue.slice();return a.splice(m.value,1),a}return e.modelValue.concat([e.val])}if(u.value===!0){if(e.toggleOrder!=="ft"||e.toggleIndeterminate===!1)return e.falseValue}else if(b.value===!0){if(e.toggleOrder==="ft"||e.toggleIndeterminate===!1)return e.trueValue}else return e.toggleOrder!=="ft"?e.trueValue:e.falseValue;return e.indeterminateValue}function j(a){(a.keyCode===13||a.keyCode===32)&&I(a)}function z(a){(a.keyCode===13||a.keyCode===32)&&g(a)}const F=l(u,p);return Object.assign(s,{toggle:g}),()=>{const a=F();e.disable!==!0&&w(a,"unshift",` q-${t}__native absolute q-ma-none q-pa-none`);const f=[o("div",{class:P.value,style:$.value},a)];x.value!==null&&f.push(x.value);const V=e.label!==void 0?U(c.default,[e.label]):W(c.default);return V!==void 0&&f.push(o("div",{class:`q-${t}__label q-anchor--skip`},V)),o("div",k(v({ref:h,class:B.value},A.value),{onClick:g,onKeydown:j,onKeyup:z}),f)}}const re=o("div",{key:"svg",class:"q-checkbox__bg absolute"},[o("svg",{class:"q-checkbox__svg fit absolute-full",viewBox:"0 0 24 24","aria-hidden":"true"},[o("path",{class:"q-checkbox__truthy",fill:"none",d:"M1.73,12.91 8.1,19.28 22.79,4.59"}),o("path",{class:"q-checkbox__indet",d:"M4,14H20V10H4"})])]);var de=Y({name:"QCheckbox",props:le,emits:ne,setup(t){function l(e,c){const i=n(()=>(e.value===!0?t.checkedIcon:c.value===!0?t.indeterminateIcon:t.uncheckedIcon)||null);return()=>i.value!==null?[o("div",{key:"icon",class:"q-checkbox__icon-container absolute flex flex-center no-wrap"},[o(G,{class:"q-checkbox__icon",name:i.value})])]:[re]}return oe("checkbox",l)}});export{de as Q};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
