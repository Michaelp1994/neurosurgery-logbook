var Tf=Object.defineProperty,Pf=Object.defineProperties;var Lf=Object.getOwnPropertyDescriptors;var Ml=Object.getOwnPropertySymbols;var If=Object.prototype.hasOwnProperty,_f=Object.prototype.propertyIsEnumerable;var Nl=(i,n,s)=>n in i?Tf(i,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):i[n]=s,dn=(i,n)=>{for(var s in n||(n={}))If.call(n,s)&&Nl(i,s,n[s]);if(Ml)for(var s of Ml(n))_f.call(n,s)&&Nl(i,s,n[s]);return i},gs=(i,n)=>Pf(i,Lf(n));function Na(i,n){const s=Object.create(null),l=i.split(",");for(let u=0;u<l.length;u++)s[l[u]]=!0;return n?u=>!!s[u.toLowerCase()]:u=>!!s[u]}const Of="Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt",Mf=Na(Of),Nf="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Rf=Na(Nf);function vh(i){return!!i||i===""}function _r(i){if(Ce(i)){const n={};for(let s=0;s<i.length;s++){const l=i[s],u=at(l)?zf(l):_r(l);if(u)for(const f in u)n[f]=u[f]}return n}else{if(at(i))return i;if(ct(i))return i}}const Ff=/;(?![^(]*\))/g,Df=/:(.+)/;function zf(i){const n={};return i.split(Ff).forEach(s=>{if(s){const l=s.split(Df);l.length>1&&(n[l[0].trim()]=l[1].trim())}}),n}function Or(i){let n="";if(at(i))n=i;else if(Ce(i))for(let s=0;s<i.length;s++){const l=Or(i[s]);l&&(n+=l+" ")}else if(ct(i))for(const s in i)i[s]&&(n+=s+" ");return n.trim()}function Xf(i){if(!i)return null;let{class:n,style:s}=i;return n&&!at(n)&&(i.class=Or(n)),s&&(i.style=_r(s)),i}function Hf(i,n){if(i.length!==n.length)return!1;let s=!0;for(let l=0;s&&l<i.length;l++)s=Ri(i[l],n[l]);return s}function Ri(i,n){if(i===n)return!0;let s=Rl(i),l=Rl(n);if(s||l)return s&&l?i.getTime()===n.getTime():!1;if(s=Ce(i),l=Ce(n),s||l)return s&&l?Hf(i,n):!1;if(s=ct(i),l=ct(n),s||l){if(!s||!l)return!1;const u=Object.keys(i).length,f=Object.keys(n).length;if(u!==f)return!1;for(const v in i){const b=i.hasOwnProperty(v),k=n.hasOwnProperty(v);if(b&&!k||!b&&k||!Ri(i[v],n[v]))return!1}}return String(i)===String(n)}function Ra(i,n){return i.findIndex(s=>Ri(s,n))}const Yf=i=>at(i)?i:i==null?"":Ce(i)||ct(i)&&(i.toString===yh||!Oe(i.toString))?JSON.stringify(i,bh,2):String(i),bh=(i,n)=>n&&n.__v_isRef?bh(i,n.value):wn(n)?{[`Map(${n.size})`]:[...n.entries()].reduce((s,[l,u])=>(s[`${l} =>`]=u,s),{})}:on(n)?{[`Set(${n.size})`]:[...n.values()]}:ct(n)&&!Ce(n)&&!wh(n)?String(n):n,Ue={},yn=[],Zt=()=>{},Bf=()=>!1,Wf=/^on[^a-z]/,Mr=i=>Wf.test(i),Oo=i=>i.startsWith("onUpdate:"),lt=Object.assign,Mo=(i,n)=>{const s=i.indexOf(n);s>-1&&i.splice(s,1)},Vf=Object.prototype.hasOwnProperty,Ve=(i,n)=>Vf.call(i,n),Ce=Array.isArray,wn=i=>Fa(i)==="[object Map]",on=i=>Fa(i)==="[object Set]",Rl=i=>i instanceof Date,Oe=i=>typeof i=="function",at=i=>typeof i=="string",No=i=>typeof i=="symbol",ct=i=>i!==null&&typeof i=="object",Ro=i=>ct(i)&&Oe(i.then)&&Oe(i.catch),yh=Object.prototype.toString,Fa=i=>yh.call(i),jf=i=>Fa(i).slice(8,-1),wh=i=>Fa(i)==="[object Object]",Fo=i=>at(i)&&i!=="NaN"&&i[0]!=="-"&&""+parseInt(i,10)===i,lr=Na(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Da=i=>{const n=Object.create(null);return s=>n[s]||(n[s]=i(s))},Gf=/-(\w)/g,zt=Da(i=>i.replace(Gf,(n,s)=>s?s.toUpperCase():"")),Uf=/\B([A-Z])/g,ii=Da(i=>i.replace(Uf,"-$1").toLowerCase()),Nr=Da(i=>i.charAt(0).toUpperCase()+i.slice(1)),cr=Da(i=>i?`on${Nr(i)}`:""),br=(i,n)=>!Object.is(i,n),kn=(i,n)=>{for(let s=0;s<i.length;s++)i[s](n)},ga=(i,n,s)=>{Object.defineProperty(i,n,{configurable:!0,enumerable:!1,value:s})},Fi=i=>{const n=parseFloat(i);return isNaN(n)?i:n};let Fl;const qf=()=>Fl||(Fl=typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:typeof global!="undefined"?global:{});let Vt;class Do{constructor(n=!1){this.active=!0,this.effects=[],this.cleanups=[],!n&&Vt&&(this.parent=Vt,this.index=(Vt.scopes||(Vt.scopes=[])).push(this)-1)}run(n){if(this.active)try{return Vt=this,n()}finally{Vt=this.parent}}on(){Vt=this}off(){Vt=this.parent}stop(n){if(this.active){let s,l;for(s=0,l=this.effects.length;s<l;s++)this.effects[s].stop();for(s=0,l=this.cleanups.length;s<l;s++)this.cleanups[s]();if(this.scopes)for(s=0,l=this.scopes.length;s<l;s++)this.scopes[s].stop(!0);if(this.parent&&!n){const u=this.parent.scopes.pop();u&&u!==this&&(this.parent.scopes[this.index]=u,u.index=this.index)}this.active=!1}}}function zo(i){return new Do(i)}function kh(i,n=Vt){n&&n.active&&n.effects.push(i)}function $f(){return Vt}function Kf(i){Vt&&Vt.cleanups.push(i)}const Xo=i=>{const n=new Set(i);return n.w=0,n.n=0,n},Ah=i=>(i.w&Di)>0,Sh=i=>(i.n&Di)>0,Zf=({deps:i})=>{if(i.length)for(let n=0;n<i.length;n++)i[n].w|=Di},Jf=i=>{const{deps:n}=i;if(n.length){let s=0;for(let l=0;l<n.length;l++){const u=n[l];Ah(u)&&!Sh(u)?u.delete(i):n[s++]=u,u.w&=~Di,u.n&=~Di}n.length=s}},Xs=new WeakMap;let nr=0,Di=1;const Hs=30;let ti;const Zi=Symbol(""),Ys=Symbol("");class Rr{constructor(n,s=null,l){this.fn=n,this.scheduler=s,this.active=!0,this.deps=[],this.parent=void 0,kh(this,l)}run(){if(!this.active)return this.fn();let n=ti,s=Mi;for(;n;){if(n===this)return;n=n.parent}try{return this.parent=ti,ti=this,Mi=!0,Di=1<<++nr,nr<=Hs?Zf(this):Dl(this),this.fn()}finally{nr<=Hs&&Jf(this),Di=1<<--nr,ti=this.parent,Mi=s,this.parent=void 0}}stop(){this.active&&(Dl(this),this.onStop&&this.onStop(),this.active=!1)}}function Dl(i){const{deps:n}=i;if(n.length){for(let s=0;s<n.length;s++)n[s].delete(i);n.length=0}}function Qf(i,n){i.effect&&(i=i.effect.fn);const s=new Rr(i);n&&(lt(s,n),n.scope&&kh(s,n.scope)),(!n||!n.lazy)&&s.run();const l=s.run.bind(s);return l.effect=s,l}function ep(i){i.effect.stop()}let Mi=!0;const Ch=[];function ln(){Ch.push(Mi),Mi=!1}function cn(){const i=Ch.pop();Mi=i===void 0?!0:i}function Xt(i,n,s){if(Mi&&ti){let l=Xs.get(i);l||Xs.set(i,l=new Map);let u=l.get(s);u||l.set(s,u=Xo()),Eh(u)}}function Eh(i,n){let s=!1;nr<=Hs?Sh(i)||(i.n|=Di,s=!Ah(i)):s=!i.has(ti),s&&(i.add(ti),ti.deps.push(i))}function gi(i,n,s,l,u,f){const v=Xs.get(i);if(!v)return;let b=[];if(n==="clear")b=[...v.values()];else if(s==="length"&&Ce(i))v.forEach((k,S)=>{(S==="length"||S>=l)&&b.push(k)});else switch(s!==void 0&&b.push(v.get(s)),n){case"add":Ce(i)?Fo(s)&&b.push(v.get("length")):(b.push(v.get(Zi)),wn(i)&&b.push(v.get(Ys)));break;case"delete":Ce(i)||(b.push(v.get(Zi)),wn(i)&&b.push(v.get(Ys)));break;case"set":wn(i)&&b.push(v.get(Zi));break}if(b.length===1)b[0]&&Bs(b[0]);else{const k=[];for(const S of b)S&&k.push(...S);Bs(Xo(k))}}function Bs(i,n){for(const s of Ce(i)?i:[...i])(s!==ti||s.allowRecurse)&&(s.scheduler?s.scheduler():s.run())}const tp=Na("__proto__,__v_isRef,__isVue"),Th=new Set(Object.getOwnPropertyNames(Symbol).map(i=>Symbol[i]).filter(No)),ip=za(),np=za(!1,!0),rp=za(!0),ap=za(!0,!0),zl=sp();function sp(){const i={};return["includes","indexOf","lastIndexOf"].forEach(n=>{i[n]=function(...s){const l=Xe(this);for(let f=0,v=this.length;f<v;f++)Xt(l,"get",f+"");const u=l[n](...s);return u===-1||u===!1?l[n](...s.map(Xe)):u}}),["push","pop","shift","unshift","splice"].forEach(n=>{i[n]=function(...s){ln();const l=Xe(this)[n].apply(this,s);return cn(),l}}),i}function za(i=!1,n=!1){return function(l,u,f){if(u==="__v_isReactive")return!i;if(u==="__v_isReadonly")return i;if(u==="__v_isShallow")return n;if(u==="__v_raw"&&f===(i?n?Nh:Mh:n?Oh:_h).get(l))return l;const v=Ce(l);if(!i&&v&&Ve(zl,u))return Reflect.get(zl,u,f);const b=Reflect.get(l,u,f);return(No(u)?Th.has(u):tp(u))||(i||Xt(l,"get",u),n)?b:Ke(b)?!v||!Fo(u)?b.value:b:ct(b)?i?Yo(b):Pt(b):b}}const op=Ph(),lp=Ph(!0);function Ph(i=!1){return function(s,l,u,f){let v=s[l];if(En(v)&&Ke(v)&&!Ke(u))return!1;if(!i&&!En(u)&&(Bo(u)||(u=Xe(u),v=Xe(v)),!Ce(s)&&Ke(v)&&!Ke(u)))return v.value=u,!0;const b=Ce(s)&&Fo(l)?Number(l)<s.length:Ve(s,l),k=Reflect.set(s,l,u,f);return s===Xe(f)&&(b?br(u,v)&&gi(s,"set",l,u):gi(s,"add",l,u)),k}}function cp(i,n){const s=Ve(i,n);i[n];const l=Reflect.deleteProperty(i,n);return l&&s&&gi(i,"delete",n,void 0),l}function hp(i,n){const s=Reflect.has(i,n);return(!No(n)||!Th.has(n))&&Xt(i,"has",n),s}function up(i){return Xt(i,"iterate",Ce(i)?"length":Zi),Reflect.ownKeys(i)}const Lh={get:ip,set:op,deleteProperty:cp,has:hp,ownKeys:up},Ih={get:rp,set(i,n){return!0},deleteProperty(i,n){return!0}},dp=lt({},Lh,{get:np,set:lp}),fp=lt({},Ih,{get:ap}),Ho=i=>i,Xa=i=>Reflect.getPrototypeOf(i);function Wr(i,n,s=!1,l=!1){i=i.__v_raw;const u=Xe(i),f=Xe(n);n!==f&&!s&&Xt(u,"get",n),!s&&Xt(u,"get",f);const{has:v}=Xa(u),b=l?Ho:s?Vo:yr;if(v.call(u,n))return b(i.get(n));if(v.call(u,f))return b(i.get(f));i!==u&&i.get(n)}function Vr(i,n=!1){const s=this.__v_raw,l=Xe(s),u=Xe(i);return i!==u&&!n&&Xt(l,"has",i),!n&&Xt(l,"has",u),i===u?s.has(i):s.has(i)||s.has(u)}function jr(i,n=!1){return i=i.__v_raw,!n&&Xt(Xe(i),"iterate",Zi),Reflect.get(i,"size",i)}function Xl(i){i=Xe(i);const n=Xe(this);return Xa(n).has.call(n,i)||(n.add(i),gi(n,"add",i,i)),this}function Hl(i,n){n=Xe(n);const s=Xe(this),{has:l,get:u}=Xa(s);let f=l.call(s,i);f||(i=Xe(i),f=l.call(s,i));const v=u.call(s,i);return s.set(i,n),f?br(n,v)&&gi(s,"set",i,n):gi(s,"add",i,n),this}function Yl(i){const n=Xe(this),{has:s,get:l}=Xa(n);let u=s.call(n,i);u||(i=Xe(i),u=s.call(n,i)),l&&l.call(n,i);const f=n.delete(i);return u&&gi(n,"delete",i,void 0),f}function Bl(){const i=Xe(this),n=i.size!==0,s=i.clear();return n&&gi(i,"clear",void 0,void 0),s}function Gr(i,n){return function(l,u){const f=this,v=f.__v_raw,b=Xe(v),k=n?Ho:i?Vo:yr;return!i&&Xt(b,"iterate",Zi),v.forEach((S,I)=>l.call(u,k(S),k(I),f))}}function Ur(i,n,s){return function(...l){const u=this.__v_raw,f=Xe(u),v=wn(f),b=i==="entries"||i===Symbol.iterator&&v,k=i==="keys"&&v,S=u[i](...l),I=s?Ho:n?Vo:yr;return!n&&Xt(f,"iterate",k?Ys:Zi),{next(){const{value:N,done:O}=S.next();return O?{value:N,done:O}:{value:b?[I(N[0]),I(N[1])]:I(N),done:O}},[Symbol.iterator](){return this}}}}function Si(i){return function(...n){return i==="delete"?!1:this}}function pp(){const i={get(f){return Wr(this,f)},get size(){return jr(this)},has:Vr,add:Xl,set:Hl,delete:Yl,clear:Bl,forEach:Gr(!1,!1)},n={get(f){return Wr(this,f,!1,!0)},get size(){return jr(this)},has:Vr,add:Xl,set:Hl,delete:Yl,clear:Bl,forEach:Gr(!1,!0)},s={get(f){return Wr(this,f,!0)},get size(){return jr(this,!0)},has(f){return Vr.call(this,f,!0)},add:Si("add"),set:Si("set"),delete:Si("delete"),clear:Si("clear"),forEach:Gr(!0,!1)},l={get(f){return Wr(this,f,!0,!0)},get size(){return jr(this,!0)},has(f){return Vr.call(this,f,!0)},add:Si("add"),set:Si("set"),delete:Si("delete"),clear:Si("clear"),forEach:Gr(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(f=>{i[f]=Ur(f,!1,!1),s[f]=Ur(f,!0,!1),n[f]=Ur(f,!1,!0),l[f]=Ur(f,!0,!0)}),[i,s,n,l]}const[gp,xp,mp,vp]=pp();function Ha(i,n){const s=n?i?vp:mp:i?xp:gp;return(l,u,f)=>u==="__v_isReactive"?!i:u==="__v_isReadonly"?i:u==="__v_raw"?l:Reflect.get(Ve(s,u)&&u in l?s:l,u,f)}const bp={get:Ha(!1,!1)},yp={get:Ha(!1,!0)},wp={get:Ha(!0,!1)},kp={get:Ha(!0,!0)},_h=new WeakMap,Oh=new WeakMap,Mh=new WeakMap,Nh=new WeakMap;function Ap(i){switch(i){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Sp(i){return i.__v_skip||!Object.isExtensible(i)?0:Ap(jf(i))}function Pt(i){return En(i)?i:Ya(i,!1,Lh,bp,_h)}function Rh(i){return Ya(i,!1,dp,yp,Oh)}function Yo(i){return Ya(i,!0,Ih,wp,Mh)}function Cp(i){return Ya(i,!0,fp,kp,Nh)}function Ya(i,n,s,l,u){if(!ct(i)||i.__v_raw&&!(n&&i.__v_isReactive))return i;const f=u.get(i);if(f)return f;const v=Sp(i);if(v===0)return i;const b=new Proxy(i,v===2?l:s);return u.set(i,b),b}function ni(i){return En(i)?ni(i.__v_raw):!!(i&&i.__v_isReactive)}function En(i){return!!(i&&i.__v_isReadonly)}function Bo(i){return!!(i&&i.__v_isShallow)}function Wo(i){return ni(i)||En(i)}function Xe(i){const n=i&&i.__v_raw;return n?Xe(n):i}function xi(i){return ga(i,"__v_skip",!0),i}const yr=i=>ct(i)?Pt(i):i,Vo=i=>ct(i)?Yo(i):i;function jo(i){Mi&&ti&&(i=Xe(i),Eh(i.dep||(i.dep=Xo())))}function Ba(i,n){i=Xe(i),i.dep&&Bs(i.dep)}function Ke(i){return!!(i&&i.__v_isRef===!0)}function Ge(i){return Dh(i,!1)}function Fh(i){return Dh(i,!0)}function Dh(i,n){return Ke(i)?i:new Ep(i,n)}class Ep{constructor(n,s){this.__v_isShallow=s,this.dep=void 0,this.__v_isRef=!0,this._rawValue=s?n:Xe(n),this._value=s?n:yr(n)}get value(){return jo(this),this._value}set value(n){n=this.__v_isShallow?n:Xe(n),br(n,this._rawValue)&&(this._rawValue=n,this._value=this.__v_isShallow?n:yr(n),Ba(this))}}function Tp(i){Ba(i)}function An(i){return Ke(i)?i.value:i}const Pp={get:(i,n,s)=>An(Reflect.get(i,n,s)),set:(i,n,s,l)=>{const u=i[n];return Ke(u)&&!Ke(s)?(u.value=s,!0):Reflect.set(i,n,s,l)}};function Go(i){return ni(i)?i:new Proxy(i,Pp)}class Lp{constructor(n){this.dep=void 0,this.__v_isRef=!0;const{get:s,set:l}=n(()=>jo(this),()=>Ba(this));this._get=s,this._set=l}get value(){return this._get()}set value(n){this._set(n)}}function Ip(i){return new Lp(i)}function zh(i){const n=Ce(i)?new Array(i.length):{};for(const s in i)n[s]=Uo(i,s);return n}class _p{constructor(n,s,l){this._object=n,this._key=s,this._defaultValue=l,this.__v_isRef=!0}get value(){const n=this._object[this._key];return n===void 0?this._defaultValue:n}set value(n){this._object[this._key]=n}}function Uo(i,n,s){const l=i[n];return Ke(l)?l:new _p(i,n,s)}class Op{constructor(n,s,l,u){this._setter=s,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new Rr(n,()=>{this._dirty||(this._dirty=!0,Ba(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!u,this.__v_isReadonly=l}get value(){const n=Xe(this);return jo(n),(n._dirty||!n._cacheable)&&(n._dirty=!1,n._value=n.effect.run()),n._value}set value(n){this._setter(n)}}function Mp(i,n,s=!1){let l,u;const f=Oe(i);return f?(l=i,u=Zt):(l=i.get,u=i.set),new Op(l,u,f||!u,s)}Promise.resolve();const hr=[];function Xh(i,...n){ln();const s=hr.length?hr[hr.length-1].component:null,l=s&&s.appContext.config.warnHandler,u=Np();if(l)ri(l,s,11,[i+n.join(""),s&&s.proxy,u.map(({vnode:f})=>`at <${Iu(s,f.type)}>`).join(`
`),u]);else{const f=[`[Vue warn]: ${i}`,...n];u.length&&f.push(`
`,...Rp(u)),console.warn(...f)}cn()}function Np(){let i=hr[hr.length-1];if(!i)return[];const n=[];for(;i;){const s=n[0];s&&s.vnode===i?s.recurseCount++:n.push({vnode:i,recurseCount:0});const l=i.component&&i.component.parent;i=l&&l.vnode}return n}function Rp(i){const n=[];return i.forEach((s,l)=>{n.push(...l===0?[]:[`
`],...Fp(s))}),n}function Fp({vnode:i,recurseCount:n}){const s=n>0?`... (${n} recursive calls)`:"",l=i.component?i.component.parent==null:!1,u=` at <${Iu(i.component,i.type,l)}`,f=">"+s;return i.props?[u,...Dp(i.props),f]:[u+f]}function Dp(i){const n=[],s=Object.keys(i);return s.slice(0,3).forEach(l=>{n.push(...Hh(l,i[l]))}),s.length>3&&n.push(" ..."),n}function Hh(i,n,s){return at(n)?(n=JSON.stringify(n),s?n:[`${i}=${n}`]):typeof n=="number"||typeof n=="boolean"||n==null?s?n:[`${i}=${n}`]:Ke(n)?(n=Hh(i,Xe(n.value),!0),s?n:[`${i}=Ref<`,n,">"]):Oe(n)?[`${i}=fn${n.name?`<${n.name}>`:""}`]:(n=Xe(n),s?n:[`${i}=`,n])}function ri(i,n,s,l){let u;try{u=l?i(...l):i()}catch(f){hn(f,n,s)}return u}function Dt(i,n,s,l){if(Oe(i)){const f=ri(i,n,s,l);return f&&Ro(f)&&f.catch(v=>{hn(v,n,s)}),f}const u=[];for(let f=0;f<i.length;f++)u.push(Dt(i[f],n,s,l));return u}function hn(i,n,s,l=!0){const u=n?n.vnode:null;if(n){let f=n.parent;const v=n.proxy,b=s;for(;f;){const S=f.ec;if(S){for(let I=0;I<S.length;I++)if(S[I](i,v,b)===!1)return}f=f.parent}const k=n.appContext.config.errorHandler;if(k){ri(k,null,10,[i,v,b]);return}}zp(i,s,u,l)}function zp(i,n,s,l=!0){console.error(i)}let xa=!1,Ws=!1;const Mt=[];let hi=0;const ur=[];let rr=null,gn=0;const dr=[];let Li=null,xn=0;const Yh=Promise.resolve();let qo=null,Vs=null;function en(i){const n=qo||Yh;return i?n.then(this?i.bind(this):i):n}function Xp(i){let n=hi+1,s=Mt.length;for(;n<s;){const l=n+s>>>1;wr(Mt[l])<i?n=l+1:s=l}return n}function $o(i){(!Mt.length||!Mt.includes(i,xa&&i.allowRecurse?hi+1:hi))&&i!==Vs&&(i.id==null?Mt.push(i):Mt.splice(Xp(i.id),0,i),Bh())}function Bh(){!xa&&!Ws&&(Ws=!0,qo=Yh.then(Vh))}function Hp(i){const n=Mt.indexOf(i);n>hi&&Mt.splice(n,1)}function Wh(i,n,s,l){Ce(i)?s.push(...i):(!n||!n.includes(i,i.allowRecurse?l+1:l))&&s.push(i),Bh()}function Yp(i){Wh(i,rr,ur,gn)}function Ko(i){Wh(i,Li,dr,xn)}function Zo(i,n=null){if(ur.length){for(Vs=n,rr=[...new Set(ur)],ur.length=0,gn=0;gn<rr.length;gn++)rr[gn]();rr=null,gn=0,Vs=null,Zo(i,n)}}function ma(i){if(dr.length){const n=[...new Set(dr)];if(dr.length=0,Li){Li.push(...n);return}for(Li=n,Li.sort((s,l)=>wr(s)-wr(l)),xn=0;xn<Li.length;xn++)Li[xn]();Li=null,xn=0}}const wr=i=>i.id==null?1/0:i.id;function Vh(i){Ws=!1,xa=!0,Zo(i),Mt.sort((s,l)=>wr(s)-wr(l));const n=Zt;try{for(hi=0;hi<Mt.length;hi++){const s=Mt[hi];s&&s.active!==!1&&ri(s,null,14)}}finally{hi=0,Mt.length=0,ma(),xa=!1,qo=null,(Mt.length||ur.length||dr.length)&&Vh(i)}}let mn,qr=[];function jh(i,n){var s,l;mn=i,mn?(mn.enabled=!0,qr.forEach(({event:u,args:f})=>mn.emit(u,...f)),qr=[]):typeof window!="undefined"&&window.HTMLElement&&!(!((l=(s=window.navigator)===null||s===void 0?void 0:s.userAgent)===null||l===void 0)&&l.includes("jsdom"))?((n.__VUE_DEVTOOLS_HOOK_REPLAY__=n.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push(f=>{jh(f,n)}),setTimeout(()=>{mn||(n.__VUE_DEVTOOLS_HOOK_REPLAY__=null,qr=[])},3e3)):qr=[]}function Bp(i,n,...s){const l=i.vnode.props||Ue;let u=s;const f=n.startsWith("update:"),v=f&&n.slice(7);if(v&&v in l){const I=`${v==="modelValue"?"model":v}Modifiers`,{number:N,trim:O}=l[I]||Ue;O?u=s.map(z=>z.trim()):N&&(u=s.map(Fi))}let b,k=l[b=cr(n)]||l[b=cr(zt(n))];!k&&f&&(k=l[b=cr(ii(n))]),k&&Dt(k,i,6,u);const S=l[b+"Once"];if(S){if(!i.emitted)i.emitted={};else if(i.emitted[b])return;i.emitted[b]=!0,Dt(S,i,6,u)}}function Gh(i,n,s=!1){const l=n.emitsCache,u=l.get(i);if(u!==void 0)return u;const f=i.emits;let v={},b=!1;if(!Oe(i)){const k=S=>{const I=Gh(S,n,!0);I&&(b=!0,lt(v,I))};!s&&n.mixins.length&&n.mixins.forEach(k),i.extends&&k(i.extends),i.mixins&&i.mixins.forEach(k)}return!f&&!b?(l.set(i,null),null):(Ce(f)?f.forEach(k=>v[k]=null):lt(v,f),l.set(i,v),v)}function Jo(i,n){return!i||!Mr(n)?!1:(n=n.slice(2).replace(/Once$/,""),Ve(i,n[0].toLowerCase()+n.slice(1))||Ve(i,ii(n))||Ve(i,n))}let Rt=null,Wa=null;function kr(i){const n=Rt;return Rt=i,Wa=i&&i.type.__scopeId||null,n}function Wp(i){Wa=i}function Vp(){Wa=null}const jp=i=>Qo;function Qo(i,n=Rt,s){if(!n||i._n)return i;const l=(...u)=>{l._d&&$s(-1);const f=kr(n),v=i(...u);return kr(f),l._d&&$s(1),v};return l._n=!0,l._c=!0,l._d=!0,l}function ea(i){const{type:n,vnode:s,proxy:l,withProxy:u,props:f,propsOptions:[v],slots:b,attrs:k,emit:S,render:I,renderCache:N,data:O,setupState:z,ctx:j,inheritAttrs:K}=i;let B,Y;const P=kr(i);try{if(s.shapeFlag&4){const H=u||l;B=Ot(I.call(H,H,N,f,z,O,j)),Y=k}else{const H=n;B=Ot(H.length>1?H(f,{attrs:k,slots:b,emit:S}):H(f,null)),Y=n.props?k:Up(k)}}catch(H){pr.length=0,hn(H,i,1),B=it(At)}let q=B;if(Y&&K!==!1){const H=Object.keys(Y),{shapeFlag:X}=q;H.length&&X&7&&(v&&H.some(Oo)&&(Y=qp(Y,v)),q=Xi(q,Y))}return s.dirs&&(q.dirs=q.dirs?q.dirs.concat(s.dirs):s.dirs),s.transition&&(q.transition=s.transition),B=q,kr(P),B}function Gp(i){let n;for(let s=0;s<i.length;s++){const l=i[s];if(zi(l)){if(l.type!==At||l.children==="v-if"){if(n)return;n=l}}else return}return n}const Up=i=>{let n;for(const s in i)(s==="class"||s==="style"||Mr(s))&&((n||(n={}))[s]=i[s]);return n},qp=(i,n)=>{const s={};for(const l in i)(!Oo(l)||!(l.slice(9)in n))&&(s[l]=i[l]);return s};function $p(i,n,s){const{props:l,children:u,component:f}=i,{props:v,children:b,patchFlag:k}=n,S=f.emitsOptions;if(n.dirs||n.transition)return!0;if(s&&k>=0){if(k&1024)return!0;if(k&16)return l?Wl(l,v,S):!!v;if(k&8){const I=n.dynamicProps;for(let N=0;N<I.length;N++){const O=I[N];if(v[O]!==l[O]&&!Jo(S,O))return!0}}}else return(u||b)&&(!b||!b.$stable)?!0:l===v?!1:l?v?Wl(l,v,S):!0:!!v;return!1}function Wl(i,n,s){const l=Object.keys(n);if(l.length!==Object.keys(i).length)return!0;for(let u=0;u<l.length;u++){const f=l[u];if(n[f]!==i[f]&&!Jo(s,f))return!0}return!1}function el({vnode:i,parent:n},s){for(;n&&n.subTree===i;)(i=n.vnode).el=s,n=n.parent}const Kp=i=>i.__isSuspense,Zp={name:"Suspense",__isSuspense:!0,process(i,n,s,l,u,f,v,b,k,S){i==null?Qp(n,s,l,u,f,v,b,k,S):eg(i,n,s,l,u,v,b,k,S)},hydrate:tg,create:tl,normalize:ig},Jp=Zp;function Ar(i,n){const s=i.props&&i.props[n];Oe(s)&&s()}function Qp(i,n,s,l,u,f,v,b,k){const{p:S,o:{createElement:I}}=k,N=I("div"),O=i.suspense=tl(i,u,l,n,N,s,f,v,b,k);S(null,O.pendingBranch=i.ssContent,N,null,l,O,f,v),O.deps>0?(Ar(i,"onPending"),Ar(i,"onFallback"),S(null,i.ssFallback,n,s,l,null,f,v),Sn(O,i.ssFallback)):O.resolve()}function eg(i,n,s,l,u,f,v,b,{p:k,um:S,o:{createElement:I}}){const N=n.suspense=i.suspense;N.vnode=n,n.el=i.el;const O=n.ssContent,z=n.ssFallback,{activeBranch:j,pendingBranch:K,isInFallback:B,isHydrating:Y}=N;if(K)N.pendingBranch=O,ei(O,K)?(k(K,O,N.hiddenContainer,null,u,N,f,v,b),N.deps<=0?N.resolve():B&&(k(j,z,s,l,u,null,f,v,b),Sn(N,z))):(N.pendingId++,Y?(N.isHydrating=!1,N.activeBranch=K):S(K,u,N),N.deps=0,N.effects.length=0,N.hiddenContainer=I("div"),B?(k(null,O,N.hiddenContainer,null,u,N,f,v,b),N.deps<=0?N.resolve():(k(j,z,s,l,u,null,f,v,b),Sn(N,z))):j&&ei(O,j)?(k(j,O,s,l,u,N,f,v,b),N.resolve(!0)):(k(null,O,N.hiddenContainer,null,u,N,f,v,b),N.deps<=0&&N.resolve()));else if(j&&ei(O,j))k(j,O,s,l,u,N,f,v,b),Sn(N,O);else if(Ar(n,"onPending"),N.pendingBranch=O,N.pendingId++,k(null,O,N.hiddenContainer,null,u,N,f,v,b),N.deps<=0)N.resolve();else{const{timeout:P,pendingId:q}=N;P>0?setTimeout(()=>{N.pendingId===q&&N.fallback(z)},P):P===0&&N.fallback(z)}}function tl(i,n,s,l,u,f,v,b,k,S,I=!1){const{p:N,m:O,um:z,n:j,o:{parentNode:K,remove:B}}=S,Y=Fi(i.props&&i.props.timeout),P={vnode:i,parent:n,parentComponent:s,isSVG:v,container:l,hiddenContainer:u,anchor:f,deps:0,pendingId:0,timeout:typeof Y=="number"?Y:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:I,isUnmounted:!1,effects:[],resolve(q=!1){const{vnode:H,activeBranch:X,pendingBranch:Z,pendingId:U,effects:te,parentComponent:le,container:pe}=P;if(P.isHydrating)P.isHydrating=!1;else if(!q){const Ae=X&&Z.transition&&Z.transition.mode==="out-in";Ae&&(X.transition.afterLeave=()=>{U===P.pendingId&&O(Z,pe,he,0)});let{anchor:he}=P;X&&(he=j(X),z(X,le,P,!0)),Ae||O(Z,pe,he,0)}Sn(P,Z),P.pendingBranch=null,P.isInFallback=!1;let ve=P.parent,ne=!1;for(;ve;){if(ve.pendingBranch){ve.effects.push(...te),ne=!0;break}ve=ve.parent}ne||Ko(te),P.effects=[],Ar(H,"onResolve")},fallback(q){if(!P.pendingBranch)return;const{vnode:H,activeBranch:X,parentComponent:Z,container:U,isSVG:te}=P;Ar(H,"onFallback");const le=j(X),pe=()=>{!P.isInFallback||(N(null,q,U,le,Z,null,te,b,k),Sn(P,q))},ve=q.transition&&q.transition.mode==="out-in";ve&&(X.transition.afterLeave=pe),P.isInFallback=!0,z(X,Z,null,!0),ve||pe()},move(q,H,X){P.activeBranch&&O(P.activeBranch,q,H,X),P.container=q},next(){return P.activeBranch&&j(P.activeBranch)},registerDep(q,H){const X=!!P.pendingBranch;X&&P.deps++;const Z=q.vnode.el;q.asyncDep.catch(U=>{hn(U,q,0)}).then(U=>{if(q.isUnmounted||P.isUnmounted||P.pendingId!==q.suspenseId)return;q.asyncResolved=!0;const{vnode:te}=q;Js(q,U,!1),Z&&(te.el=Z);const le=!Z&&q.subTree.el;H(q,te,K(Z||q.subTree.el),Z?null:j(q.subTree),P,v,k),le&&B(le),el(q,te.el),X&&--P.deps===0&&P.resolve()})},unmount(q,H){P.isUnmounted=!0,P.activeBranch&&z(P.activeBranch,s,q,H),P.pendingBranch&&z(P.pendingBranch,s,q,H)}};return P}function tg(i,n,s,l,u,f,v,b,k){const S=n.suspense=tl(n,l,s,i.parentNode,document.createElement("div"),null,u,f,v,b,!0),I=k(i,S.pendingBranch=n.ssContent,s,S,f,v);return S.deps===0&&S.resolve(),I}function ig(i){const{shapeFlag:n,children:s}=i,l=n&32;i.ssContent=Vl(l?s.default:s),i.ssFallback=l?Vl(s.fallback):it(At)}function Vl(i){let n;if(Oe(i)){const s=Ln&&i._c;s&&(i._d=!1,Ua()),i=i(),s&&(i._d=!0,n=ai,bu())}return Ce(i)&&(i=Gp(i)),i=Ot(i),n&&!i.dynamicChildren&&(i.dynamicChildren=n.filter(s=>s!==i)),i}function Uh(i,n){n&&n.pendingBranch?Ce(i)?n.effects.push(...i):n.effects.push(i):Ko(i)}function Sn(i,n){i.activeBranch=n;const{vnode:s,parentComponent:l}=i,u=s.el=n.el;l&&l.subTree===s&&(l.vnode.el=u,el(l,u))}function Cn(i,n){if(dt){let s=dt.provides;const l=dt.parent&&dt.parent.provides;l===s&&(s=dt.provides=Object.create(l)),s[i]=n}}function Lt(i,n,s=!1){const l=dt||Rt;if(l){const u=l.parent==null?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides;if(u&&i in u)return u[i];if(arguments.length>1)return s&&Oe(n)?n.call(l.proxy):n}}function ta(i,n){return Fr(i,null,n)}function qh(i,n){return Fr(i,null,{flush:"post"})}function ng(i,n){return Fr(i,null,{flush:"sync"})}const jl={};function di(i,n,s){return Fr(i,n,s)}function Fr(i,n,{immediate:s,deep:l,flush:u,onTrack:f,onTrigger:v}=Ue){const b=dt;let k,S=!1,I=!1;if(Ke(i)?(k=()=>i.value,S=Bo(i)):ni(i)?(k=()=>i,l=!0):Ce(i)?(I=!0,S=i.some(ni),k=()=>i.map(Y=>{if(Ke(Y))return Y.value;if(ni(Y))return Ki(Y);if(Oe(Y))return ri(Y,b,2)})):Oe(i)?n?k=()=>ri(i,b,2):k=()=>{if(!(b&&b.isUnmounted))return N&&N(),Dt(i,b,3,[O])}:k=Zt,n&&l){const Y=k;k=()=>Ki(Y())}let N,O=Y=>{N=B.onStop=()=>{ri(Y,b,4)}};if(In)return O=Zt,n?s&&Dt(n,b,3,[k(),I?[]:void 0,O]):k(),Zt;let z=I?[]:jl;const j=()=>{if(!!B.active)if(n){const Y=B.run();(l||S||(I?Y.some((P,q)=>br(P,z[q])):br(Y,z)))&&(N&&N(),Dt(n,b,3,[Y,z===jl?void 0:z,O]),z=Y)}else B.run()};j.allowRecurse=!!n;let K;u==="sync"?K=j:u==="post"?K=()=>ft(j,b&&b.suspense):K=()=>{!b||b.isMounted?Yp(j):j()};const B=new Rr(k,K);return n?s?j():z=B.run():u==="post"?ft(B.run.bind(B),b&&b.suspense):B.run(),()=>{B.stop(),b&&b.scope&&Mo(b.scope.effects,B)}}function rg(i,n,s){const l=this.proxy,u=at(i)?i.includes(".")?$h(l,i):()=>l[i]:i.bind(l,l);let f;Oe(n)?f=n:(f=n.handler,s=n);const v=dt;Hi(this);const b=Fr(u,f.bind(l),s);return v?Hi(v):Ni(),b}function $h(i,n){const s=n.split(".");return()=>{let l=i;for(let u=0;u<s.length&&l;u++)l=l[s[u]];return l}}function Ki(i,n){if(!ct(i)||i.__v_skip||(n=n||new Set,n.has(i)))return i;if(n.add(i),Ke(i))Ki(i.value,n);else if(Ce(i))for(let s=0;s<i.length;s++)Ki(i[s],n);else if(on(i)||wn(i))i.forEach(s=>{Ki(s,n)});else if(wh(i))for(const s in i)Ki(i[s],n);return i}function il(){const i={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return mi(()=>{i.isMounted=!0}),nn(()=>{i.isUnmounting=!0}),i}const Wt=[Function,Array],ag={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Wt,onEnter:Wt,onAfterEnter:Wt,onEnterCancelled:Wt,onBeforeLeave:Wt,onLeave:Wt,onAfterLeave:Wt,onLeaveCancelled:Wt,onBeforeAppear:Wt,onAppear:Wt,onAfterAppear:Wt,onAppearCancelled:Wt},setup(i,{slots:n}){const s=Ht(),l=il();let u;return()=>{const f=n.default&&Va(n.default(),!0);if(!f||!f.length)return;const v=Xe(i),{mode:b}=v,k=f[0];if(l.isLeaving)return xs(k);const S=Gl(k);if(!S)return xs(k);const I=Tn(S,v,l,s);tn(S,I);const N=s.subTree,O=N&&Gl(N);let z=!1;const{getTransitionKey:j}=S.type;if(j){const K=j();u===void 0?u=K:K!==u&&(u=K,z=!0)}if(O&&O.type!==At&&(!ei(S,O)||z)){const K=Tn(O,v,l,s);if(tn(O,K),b==="out-in")return l.isLeaving=!0,K.afterLeave=()=>{l.isLeaving=!1,s.update()},xs(k);b==="in-out"&&S.type!==At&&(K.delayLeave=(B,Y,P)=>{const q=Kh(l,O);q[String(O.key)]=O,B._leaveCb=()=>{Y(),B._leaveCb=void 0,delete I.delayedLeave},I.delayedLeave=P})}return k}}},nl=ag;function Kh(i,n){const{leavingVNodes:s}=i;let l=s.get(n.type);return l||(l=Object.create(null),s.set(n.type,l)),l}function Tn(i,n,s,l){const{appear:u,mode:f,persisted:v=!1,onBeforeEnter:b,onEnter:k,onAfterEnter:S,onEnterCancelled:I,onBeforeLeave:N,onLeave:O,onAfterLeave:z,onLeaveCancelled:j,onBeforeAppear:K,onAppear:B,onAfterAppear:Y,onAppearCancelled:P}=n,q=String(i.key),H=Kh(s,i),X=(U,te)=>{U&&Dt(U,l,9,te)},Z={mode:f,persisted:v,beforeEnter(U){let te=b;if(!s.isMounted)if(u)te=K||b;else return;U._leaveCb&&U._leaveCb(!0);const le=H[q];le&&ei(i,le)&&le.el._leaveCb&&le.el._leaveCb(),X(te,[U])},enter(U){let te=k,le=S,pe=I;if(!s.isMounted)if(u)te=B||k,le=Y||S,pe=P||I;else return;let ve=!1;const ne=U._enterCb=Ae=>{ve||(ve=!0,Ae?X(pe,[U]):X(le,[U]),Z.delayedLeave&&Z.delayedLeave(),U._enterCb=void 0)};te?(te(U,ne),te.length<=1&&ne()):ne()},leave(U,te){const le=String(i.key);if(U._enterCb&&U._enterCb(!0),s.isUnmounting)return te();X(N,[U]);let pe=!1;const ve=U._leaveCb=ne=>{pe||(pe=!0,te(),ne?X(j,[U]):X(z,[U]),U._leaveCb=void 0,H[le]===i&&delete H[le])};H[le]=i,O?(O(U,ve),O.length<=1&&ve()):ve()},clone(U){return Tn(U,n,s,l)}};return Z}function xs(i){if(Dr(i))return i=Xi(i),i.children=null,i}function Gl(i){return Dr(i)?i.children?i.children[0]:void 0:i}function tn(i,n){i.shapeFlag&6&&i.component?tn(i.component.subTree,n):i.shapeFlag&128?(i.ssContent.transition=n.clone(i.ssContent),i.ssFallback.transition=n.clone(i.ssFallback)):i.transition=n}function Va(i,n=!1){let s=[],l=0;for(let u=0;u<i.length;u++){const f=i[u];f.type===pt?(f.patchFlag&128&&l++,s=s.concat(Va(f.children,n))):(n||f.type!==At)&&s.push(f)}if(l>1)for(let u=0;u<s.length;u++)s[u].patchFlag=-2;return s}function Vn(i){return Oe(i)?{setup:i,name:i.name}:i}const Sr=i=>!!i.type.__asyncLoader;function sg(i){Oe(i)&&(i={loader:i});const{loader:n,loadingComponent:s,errorComponent:l,delay:u=200,timeout:f,suspensible:v=!0,onError:b}=i;let k=null,S,I=0;const N=()=>(I++,k=null,O()),O=()=>{let z;return k||(z=k=n().catch(j=>{if(j=j instanceof Error?j:new Error(String(j)),b)return new Promise((K,B)=>{b(j,()=>K(N()),()=>B(j),I+1)});throw j}).then(j=>z!==k&&k?k:(j&&(j.__esModule||j[Symbol.toStringTag]==="Module")&&(j=j.default),S=j,j)))};return Vn({name:"AsyncComponentWrapper",__asyncLoader:O,get __asyncResolved(){return S},setup(){const z=dt;if(S)return()=>ms(S,z);const j=P=>{k=null,hn(P,z,13,!l)};if(v&&z.suspense||In)return O().then(P=>()=>ms(P,z)).catch(P=>(j(P),()=>l?it(l,{error:P}):null));const K=Ge(!1),B=Ge(),Y=Ge(!!u);return u&&setTimeout(()=>{Y.value=!1},u),f!=null&&setTimeout(()=>{if(!K.value&&!B.value){const P=new Error(`Async component timed out after ${f}ms.`);j(P),B.value=P}},f),O().then(()=>{K.value=!0,z.parent&&Dr(z.parent.vnode)&&$o(z.parent.update)}).catch(P=>{j(P),B.value=P}),()=>{if(K.value&&S)return ms(S,z);if(B.value&&l)return it(l,{error:B.value});if(s&&!Y.value)return it(s)}}})}function ms(i,{vnode:{ref:n,props:s,children:l}}){const u=it(i,s,l);return u.ref=n,u}const Dr=i=>i.type.__isKeepAlive,og={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(i,{slots:n}){const s=Ht(),l=s.ctx;if(!l.renderer)return n.default;const u=new Map,f=new Set;let v=null;const b=s.suspense,{renderer:{p:k,m:S,um:I,o:{createElement:N}}}=l,O=N("div");l.activate=(P,q,H,X,Z)=>{const U=P.component;S(P,q,H,0,b),k(U.vnode,P,q,H,U,b,X,P.slotScopeIds,Z),ft(()=>{U.isDeactivated=!1,U.a&&kn(U.a);const te=P.props&&P.props.onVnodeMounted;te&&Tt(te,U.parent,P)},b)},l.deactivate=P=>{const q=P.component;S(P,O,null,1,b),ft(()=>{q.da&&kn(q.da);const H=P.props&&P.props.onVnodeUnmounted;H&&Tt(H,q.parent,P),q.isDeactivated=!0},b)};function z(P){vs(P),I(P,s,b,!0)}function j(P){u.forEach((q,H)=>{const X=ka(q.type);X&&(!P||!P(X))&&K(H)})}function K(P){const q=u.get(P);!v||q.type!==v.type?z(q):v&&vs(v),u.delete(P),f.delete(P)}di(()=>[i.include,i.exclude],([P,q])=>{P&&j(H=>ar(P,H)),q&&j(H=>!ar(q,H))},{flush:"post",deep:!0});let B=null;const Y=()=>{B!=null&&u.set(B,bs(s.subTree))};return mi(Y),Ga(Y),nn(()=>{u.forEach(P=>{const{subTree:q,suspense:H}=s,X=bs(q);if(P.type===X.type){vs(X);const Z=X.component.da;Z&&ft(Z,H);return}z(P)})}),()=>{if(B=null,!n.default)return null;const P=n.default(),q=P[0];if(P.length>1)return v=null,P;if(!zi(q)||!(q.shapeFlag&4)&&!(q.shapeFlag&128))return v=null,q;let H=bs(q);const X=H.type,Z=ka(Sr(H)?H.type.__asyncResolved||{}:X),{include:U,exclude:te,max:le}=i;if(U&&(!Z||!ar(U,Z))||te&&Z&&ar(te,Z))return v=H,q;const pe=H.key==null?X:H.key,ve=u.get(pe);return H.el&&(H=Xi(H),q.shapeFlag&128&&(q.ssContent=H)),B=pe,ve?(H.el=ve.el,H.component=ve.component,H.transition&&tn(H,H.transition),H.shapeFlag|=512,f.delete(pe),f.add(pe)):(f.add(pe),le&&f.size>parseInt(le,10)&&K(f.values().next().value)),H.shapeFlag|=256,v=H,q}}},lg=og;function ar(i,n){return Ce(i)?i.some(s=>ar(s,n)):at(i)?i.split(",").includes(n):i.test?i.test(n):!1}function Zh(i,n){Qh(i,"a",n)}function Jh(i,n){Qh(i,"da",n)}function Qh(i,n,s=dt){const l=i.__wdc||(i.__wdc=()=>{let u=s;for(;u;){if(u.isDeactivated)return;u=u.parent}return i()});if(ja(n,l,s),s){let u=s.parent;for(;u&&u.parent;)Dr(u.parent.vnode)&&cg(l,n,s,u),u=u.parent}}function cg(i,n,s,l){const u=ja(n,i,l,!0);jn(()=>{Mo(l[n],u)},s)}function vs(i){let n=i.shapeFlag;n&256&&(n-=256),n&512&&(n-=512),i.shapeFlag=n}function bs(i){return i.shapeFlag&128?i.ssContent:i}function ja(i,n,s=dt,l=!1){if(s){const u=s[i]||(s[i]=[]),f=n.__weh||(n.__weh=(...v)=>{if(s.isUnmounted)return;ln(),Hi(s);const b=Dt(n,s,i,v);return Ni(),cn(),b});return l?u.unshift(f):u.push(f),f}}const wi=i=>(n,s=dt)=>(!In||i==="sp")&&ja(i,n,s),eu=wi("bm"),mi=wi("m"),tu=wi("bu"),Ga=wi("u"),nn=wi("bum"),jn=wi("um"),iu=wi("sp"),nu=wi("rtg"),ru=wi("rtc");function au(i,n=dt){ja("ec",i,n)}let js=!0;function hg(i){const n=ou(i),s=i.proxy,l=i.ctx;js=!1,n.beforeCreate&&Ul(n.beforeCreate,i,"bc");const{data:u,computed:f,methods:v,watch:b,provide:k,inject:S,created:I,beforeMount:N,mounted:O,beforeUpdate:z,updated:j,activated:K,deactivated:B,beforeDestroy:Y,beforeUnmount:P,destroyed:q,unmounted:H,render:X,renderTracked:Z,renderTriggered:U,errorCaptured:te,serverPrefetch:le,expose:pe,inheritAttrs:ve,components:ne,directives:Ae,filters:he}=n;if(S&&ug(S,l,null,i.appContext.config.unwrapInjectedRef),v)for(const Me in v){const Ne=v[Me];Oe(Ne)&&(l[Me]=Ne.bind(s))}if(u){const Me=u.call(s,s);ct(Me)&&(i.data=Pt(Me))}if(js=!0,f)for(const Me in f){const Ne=f[Me],Be=Oe(Ne)?Ne.bind(s,s):Oe(Ne.get)?Ne.get.bind(s,s):Zt,Yt=!Oe(Ne)&&Oe(Ne.set)?Ne.set.bind(s):Zt,nt=ht({get:Be,set:Yt});Object.defineProperty(l,Me,{enumerable:!0,configurable:!0,get:()=>nt.value,set:je=>nt.value=je})}if(b)for(const Me in b)su(b[Me],l,s,Me);if(k){const Me=Oe(k)?k.call(s):k;Reflect.ownKeys(Me).forEach(Ne=>{Cn(Ne,Me[Ne])})}I&&Ul(I,i,"c");function Fe(Me,Ne){Ce(Ne)?Ne.forEach(Be=>Me(Be.bind(s))):Ne&&Me(Ne.bind(s))}if(Fe(eu,N),Fe(mi,O),Fe(tu,z),Fe(Ga,j),Fe(Zh,K),Fe(Jh,B),Fe(au,te),Fe(ru,Z),Fe(nu,U),Fe(nn,P),Fe(jn,H),Fe(iu,le),Ce(pe))if(pe.length){const Me=i.exposed||(i.exposed={});pe.forEach(Ne=>{Object.defineProperty(Me,Ne,{get:()=>s[Ne],set:Be=>s[Ne]=Be})})}else i.exposed||(i.exposed={});X&&i.render===Zt&&(i.render=X),ve!=null&&(i.inheritAttrs=ve),ne&&(i.components=ne),Ae&&(i.directives=Ae)}function ug(i,n,s=Zt,l=!1){Ce(i)&&(i=Gs(i));for(const u in i){const f=i[u];let v;ct(f)?"default"in f?v=Lt(f.from||u,f.default,!0):v=Lt(f.from||u):v=Lt(f),Ke(v)&&l?Object.defineProperty(n,u,{enumerable:!0,configurable:!0,get:()=>v.value,set:b=>v.value=b}):n[u]=v}}function Ul(i,n,s){Dt(Ce(i)?i.map(l=>l.bind(n.proxy)):i.bind(n.proxy),n,s)}function su(i,n,s,l){const u=l.includes(".")?$h(s,l):()=>s[l];if(at(i)){const f=n[i];Oe(f)&&di(u,f)}else if(Oe(i))di(u,i.bind(s));else if(ct(i))if(Ce(i))i.forEach(f=>su(f,n,s,l));else{const f=Oe(i.handler)?i.handler.bind(s):n[i.handler];Oe(f)&&di(u,f,i)}}function ou(i){const n=i.type,{mixins:s,extends:l}=n,{mixins:u,optionsCache:f,config:{optionMergeStrategies:v}}=i.appContext,b=f.get(n);let k;return b?k=b:!u.length&&!s&&!l?k=n:(k={},u.length&&u.forEach(S=>va(k,S,v,!0)),va(k,n,v)),f.set(n,k),k}function va(i,n,s,l=!1){const{mixins:u,extends:f}=n;f&&va(i,f,s,!0),u&&u.forEach(v=>va(i,v,s,!0));for(const v in n)if(!(l&&v==="expose")){const b=dg[v]||s&&s[v];i[v]=b?b(i[v],n[v]):n[v]}return i}const dg={data:ql,props:Ui,emits:Ui,methods:Ui,computed:Ui,beforeCreate:wt,created:wt,beforeMount:wt,mounted:wt,beforeUpdate:wt,updated:wt,beforeDestroy:wt,beforeUnmount:wt,destroyed:wt,unmounted:wt,activated:wt,deactivated:wt,errorCaptured:wt,serverPrefetch:wt,components:Ui,directives:Ui,watch:pg,provide:ql,inject:fg};function ql(i,n){return n?i?function(){return lt(Oe(i)?i.call(this,this):i,Oe(n)?n.call(this,this):n)}:n:i}function fg(i,n){return Ui(Gs(i),Gs(n))}function Gs(i){if(Ce(i)){const n={};for(let s=0;s<i.length;s++)n[i[s]]=i[s];return n}return i}function wt(i,n){return i?[...new Set([].concat(i,n))]:n}function Ui(i,n){return i?lt(lt(Object.create(null),i),n):n}function pg(i,n){if(!i)return n;if(!n)return i;const s=lt(Object.create(null),i);for(const l in n)s[l]=wt(i[l],n[l]);return s}function gg(i,n,s,l=!1){const u={},f={};ga(f,qa,1),i.propsDefaults=Object.create(null),lu(i,n,u,f);for(const v in i.propsOptions[0])v in u||(u[v]=void 0);s?i.props=l?u:Rh(u):i.type.props?i.props=u:i.props=f,i.attrs=f}function xg(i,n,s,l){const{props:u,attrs:f,vnode:{patchFlag:v}}=i,b=Xe(u),[k]=i.propsOptions;let S=!1;if((l||v>0)&&!(v&16)){if(v&8){const I=i.vnode.dynamicProps;for(let N=0;N<I.length;N++){let O=I[N];const z=n[O];if(k)if(Ve(f,O))z!==f[O]&&(f[O]=z,S=!0);else{const j=zt(O);u[j]=Us(k,b,j,z,i,!1)}else z!==f[O]&&(f[O]=z,S=!0)}}}else{lu(i,n,u,f)&&(S=!0);let I;for(const N in b)(!n||!Ve(n,N)&&((I=ii(N))===N||!Ve(n,I)))&&(k?s&&(s[N]!==void 0||s[I]!==void 0)&&(u[N]=Us(k,b,N,void 0,i,!0)):delete u[N]);if(f!==b)for(const N in f)(!n||!Ve(n,N)&&!0)&&(delete f[N],S=!0)}S&&gi(i,"set","$attrs")}function lu(i,n,s,l){const[u,f]=i.propsOptions;let v=!1,b;if(n)for(let k in n){if(lr(k))continue;const S=n[k];let I;u&&Ve(u,I=zt(k))?!f||!f.includes(I)?s[I]=S:(b||(b={}))[I]=S:Jo(i.emitsOptions,k)||(!(k in l)||S!==l[k])&&(l[k]=S,v=!0)}if(f){const k=Xe(s),S=b||Ue;for(let I=0;I<f.length;I++){const N=f[I];s[N]=Us(u,k,N,S[N],i,!Ve(S,N))}}return v}function Us(i,n,s,l,u,f){const v=i[s];if(v!=null){const b=Ve(v,"default");if(b&&l===void 0){const k=v.default;if(v.type!==Function&&Oe(k)){const{propsDefaults:S}=u;s in S?l=S[s]:(Hi(u),l=S[s]=k.call(null,n),Ni())}else l=k}v[0]&&(f&&!b?l=!1:v[1]&&(l===""||l===ii(s))&&(l=!0))}return l}function cu(i,n,s=!1){const l=n.propsCache,u=l.get(i);if(u)return u;const f=i.props,v={},b=[];let k=!1;if(!Oe(i)){const I=N=>{k=!0;const[O,z]=cu(N,n,!0);lt(v,O),z&&b.push(...z)};!s&&n.mixins.length&&n.mixins.forEach(I),i.extends&&I(i.extends),i.mixins&&i.mixins.forEach(I)}if(!f&&!k)return l.set(i,yn),yn;if(Ce(f))for(let I=0;I<f.length;I++){const N=zt(f[I]);$l(N)&&(v[N]=Ue)}else if(f)for(const I in f){const N=zt(I);if($l(N)){const O=f[I],z=v[N]=Ce(O)||Oe(O)?{type:O}:O;if(z){const j=Jl(Boolean,z.type),K=Jl(String,z.type);z[0]=j>-1,z[1]=K<0||j<K,(j>-1||Ve(z,"default"))&&b.push(N)}}}const S=[v,b];return l.set(i,S),S}function $l(i){return i[0]!=="$"}function Kl(i){const n=i&&i.toString().match(/^\s*function (\w+)/);return n?n[1]:i===null?"null":""}function Zl(i,n){return Kl(i)===Kl(n)}function Jl(i,n){return Ce(n)?n.findIndex(s=>Zl(s,i)):Oe(n)&&Zl(n,i)?0:-1}const hu=i=>i[0]==="_"||i==="$stable",rl=i=>Ce(i)?i.map(Ot):[Ot(i)],mg=(i,n,s)=>{const l=Qo((...u)=>rl(n(...u)),s);return l._c=!1,l},uu=(i,n,s)=>{const l=i._ctx;for(const u in i){if(hu(u))continue;const f=i[u];if(Oe(f))n[u]=mg(u,f,l);else if(f!=null){const v=rl(f);n[u]=()=>v}}},du=(i,n)=>{const s=rl(n);i.slots.default=()=>s},vg=(i,n)=>{if(i.vnode.shapeFlag&32){const s=n._;s?(i.slots=Xe(n),ga(n,"_",s)):uu(n,i.slots={})}else i.slots={},n&&du(i,n);ga(i.slots,qa,1)},bg=(i,n,s)=>{const{vnode:l,slots:u}=i;let f=!0,v=Ue;if(l.shapeFlag&32){const b=n._;b?s&&b===1?f=!1:(lt(u,n),!s&&b===1&&delete u._):(f=!n.$stable,uu(n,u)),v=n}else n&&(du(i,n),v={default:1});if(f)for(const b in u)!hu(b)&&!(b in v)&&delete u[b]};function fu(i,n){const s=Rt;if(s===null)return i;const l=s.proxy,u=i.dirs||(i.dirs=[]);for(let f=0;f<n.length;f++){let[v,b,k,S=Ue]=n[f];Oe(v)&&(v={mounted:v,updated:v}),v.deep&&Ki(b),u.push({dir:v,instance:l,value:b,oldValue:void 0,arg:k,modifiers:S})}return i}function Qt(i,n,s,l){const u=i.dirs,f=n&&n.dirs;for(let v=0;v<u.length;v++){const b=u[v];f&&(b.oldValue=f[v].value);let k=b.dir[l];k&&(ln(),Dt(k,s,8,[i.el,b,i,n]),cn())}}function pu(){return{app:null,config:{isNativeTag:Bf,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let yg=0;function wg(i,n){return function(l,u=null){u!=null&&!ct(u)&&(u=null);const f=pu(),v=new Set;let b=!1;const k=f.app={_uid:yg++,_component:l,_props:u,_container:null,_context:f,_instance:null,version:Nu,get config(){return f.config},set config(S){},use(S,...I){return v.has(S)||(S&&Oe(S.install)?(v.add(S),S.install(k,...I)):Oe(S)&&(v.add(S),S(k,...I))),k},mixin(S){return f.mixins.includes(S)||f.mixins.push(S),k},component(S,I){return I?(f.components[S]=I,k):f.components[S]},directive(S,I){return I?(f.directives[S]=I,k):f.directives[S]},mount(S,I,N){if(!b){const O=it(l,u);return O.appContext=f,I&&n?n(O,S):i(O,S,N),b=!0,k._container=S,S.__vue_app__=k,dl(O.component)||O.component.proxy}},unmount(){b&&(i(null,k._container),delete k._container.__vue_app__)},provide(S,I){return f.provides[S]=I,k}};return k}}function ba(i,n,s,l,u=!1){if(Ce(i)){i.forEach((O,z)=>ba(O,n&&(Ce(n)?n[z]:n),s,l,u));return}if(Sr(l)&&!u)return;const f=l.shapeFlag&4?dl(l.component)||l.component.proxy:l.el,v=u?null:f,{i:b,r:k}=i,S=n&&n.r,I=b.refs===Ue?b.refs={}:b.refs,N=b.setupState;if(S!=null&&S!==k&&(at(S)?(I[S]=null,Ve(N,S)&&(N[S]=null)):Ke(S)&&(S.value=null)),Oe(k))ri(k,b,12,[v,I]);else{const O=at(k),z=Ke(k);if(O||z){const j=()=>{if(i.f){const K=O?I[k]:k.value;u?Ce(K)&&Mo(K,f):Ce(K)?K.includes(f)||K.push(f):O?I[k]=[f]:(k.value=[f],i.k&&(I[i.k]=k.value))}else O?(I[k]=v,Ve(N,k)&&(N[k]=v)):Ke(k)&&(k.value=v,i.k&&(I[i.k]=v))};v?(j.id=-1,ft(j,s)):j()}}}let Ci=!1;const $r=i=>/svg/.test(i.namespaceURI)&&i.tagName!=="foreignObject",ys=i=>i.nodeType===8;function kg(i){const{mt:n,p:s,o:{patchProp:l,nextSibling:u,parentNode:f,remove:v,insert:b,createComment:k}}=i,S=(B,Y)=>{if(!Y.hasChildNodes()){s(null,B,Y),ma();return}Ci=!1,I(Y.firstChild,B,null,null,null),ma(),Ci&&console.error("Hydration completed but contains mismatches.")},I=(B,Y,P,q,H,X=!1)=>{const Z=ys(B)&&B.data==="[",U=()=>j(B,Y,P,q,H,Z),{type:te,ref:le,shapeFlag:pe}=Y,ve=B.nodeType;Y.el=B;let ne=null;switch(te){case Pn:ve!==3?ne=U():(B.data!==Y.children&&(Ci=!0,B.data=Y.children),ne=u(B));break;case At:ve!==8||Z?ne=U():ne=u(B);break;case Ji:if(ve!==1)ne=U();else{ne=B;const Ae=!Y.children.length;for(let he=0;he<Y.staticCount;he++)Ae&&(Y.children+=ne.outerHTML),he===Y.staticCount-1&&(Y.anchor=ne),ne=u(ne);return ne}break;case pt:Z?ne=z(B,Y,P,q,H,X):ne=U();break;default:if(pe&1)ve!==1||Y.type.toLowerCase()!==B.tagName.toLowerCase()?ne=U():ne=N(B,Y,P,q,H,X);else if(pe&6){Y.slotScopeIds=H;const Ae=f(B);if(n(Y,Ae,null,P,q,$r(Ae),X),ne=Z?K(B):u(B),Sr(Y)){let he;Z?(he=it(pt),he.anchor=ne?ne.previousSibling:Ae.lastChild):he=B.nodeType===3?hl(""):it("div"),he.el=B,Y.component.subTree=he}}else pe&64?ve!==8?ne=U():ne=Y.type.hydrate(B,Y,P,q,H,X,i,O):pe&128&&(ne=Y.type.hydrate(B,Y,P,q,$r(f(B)),H,X,i,I))}return le!=null&&ba(le,null,q,Y),ne},N=(B,Y,P,q,H,X)=>{X=X||!!Y.dynamicChildren;const{type:Z,props:U,patchFlag:te,shapeFlag:le,dirs:pe}=Y,ve=Z==="input"&&pe||Z==="option";if(ve||te!==-1){if(pe&&Qt(Y,null,P,"created"),U)if(ve||!X||te&48)for(const Ae in U)(ve&&Ae.endsWith("value")||Mr(Ae)&&!lr(Ae))&&l(B,Ae,null,U[Ae],!1,void 0,P);else U.onClick&&l(B,"onClick",null,U.onClick,!1,void 0,P);let ne;if((ne=U&&U.onVnodeBeforeMount)&&Tt(ne,P,Y),pe&&Qt(Y,null,P,"beforeMount"),((ne=U&&U.onVnodeMounted)||pe)&&Uh(()=>{ne&&Tt(ne,P,Y),pe&&Qt(Y,null,P,"mounted")},q),le&16&&!(U&&(U.innerHTML||U.textContent))){let Ae=O(B.firstChild,Y,B,P,q,H,X);for(;Ae;){Ci=!0;const he=Ae;Ae=Ae.nextSibling,v(he)}}else le&8&&B.textContent!==Y.children&&(Ci=!0,B.textContent=Y.children)}return B.nextSibling},O=(B,Y,P,q,H,X,Z)=>{Z=Z||!!Y.dynamicChildren;const U=Y.children,te=U.length;for(let le=0;le<te;le++){const pe=Z?U[le]:U[le]=Ot(U[le]);if(B)B=I(B,pe,q,H,X,Z);else{if(pe.type===Pn&&!pe.children)continue;Ci=!0,s(null,pe,P,null,q,H,$r(P),X)}}return B},z=(B,Y,P,q,H,X)=>{const{slotScopeIds:Z}=Y;Z&&(H=H?H.concat(Z):Z);const U=f(B),te=O(u(B),Y,U,P,q,H,X);return te&&ys(te)&&te.data==="]"?u(Y.anchor=te):(Ci=!0,b(Y.anchor=k("]"),U,te),te)},j=(B,Y,P,q,H,X)=>{if(Ci=!0,Y.el=null,X){const te=K(B);for(;;){const le=u(B);if(le&&le!==te)v(le);else break}}const Z=u(B),U=f(B);return v(B),s(null,Y,U,Z,P,q,$r(U),H),Z},K=B=>{let Y=0;for(;B;)if(B=u(B),B&&ys(B)&&(B.data==="["&&Y++,B.data==="]")){if(Y===0)return u(B);Y--}return B};return[S,I]}const ft=Uh;function gu(i){return mu(i)}function xu(i){return mu(i,kg)}function mu(i,n){const s=qf();s.__VUE__=!0;const{insert:l,remove:u,patchProp:f,createElement:v,createText:b,createComment:k,setText:S,setElementText:I,parentNode:N,nextSibling:O,setScopeId:z=Zt,cloneNode:j,insertStaticContent:K}=i,B=(W,$,ee,ae=null,se=null,xe=null,ye=!1,fe=null,me=!!$.dynamicChildren)=>{if(W===$)return;W&&!ei(W,$)&&(ae=be(W),st(W,se,xe,!0),W=null),$.patchFlag===-2&&(me=!1,$.dynamicChildren=null);const{type:ce,ref:Ee,shapeFlag:Se}=$;switch(ce){case Pn:Y(W,$,ee,ae);break;case At:P(W,$,ee,ae);break;case Ji:W==null&&q($,ee,ae,ye);break;case pt:Ae(W,$,ee,ae,se,xe,ye,fe,me);break;default:Se&1?Z(W,$,ee,ae,se,xe,ye,fe,me):Se&6?he(W,$,ee,ae,se,xe,ye,fe,me):(Se&64||Se&128)&&ce.process(W,$,ee,ae,se,xe,ye,fe,me,De)}Ee!=null&&se&&ba(Ee,W&&W.ref,xe,$||W,!$)},Y=(W,$,ee,ae)=>{if(W==null)l($.el=b($.children),ee,ae);else{const se=$.el=W.el;$.children!==W.children&&S(se,$.children)}},P=(W,$,ee,ae)=>{W==null?l($.el=k($.children||""),ee,ae):$.el=W.el},q=(W,$,ee,ae)=>{[W.el,W.anchor]=K(W.children,$,ee,ae,W.el,W.anchor)},H=({el:W,anchor:$},ee,ae)=>{let se;for(;W&&W!==$;)se=O(W),l(W,ee,ae),W=se;l($,ee,ae)},X=({el:W,anchor:$})=>{let ee;for(;W&&W!==$;)ee=O(W),u(W),W=ee;u($)},Z=(W,$,ee,ae,se,xe,ye,fe,me)=>{ye=ye||$.type==="svg",W==null?U($,ee,ae,se,xe,ye,fe,me):pe(W,$,se,xe,ye,fe,me)},U=(W,$,ee,ae,se,xe,ye,fe)=>{let me,ce;const{type:Ee,props:Se,shapeFlag:Te,transition:_e,patchFlag:He,dirs:qe}=W;if(W.el&&j!==void 0&&He===-1)me=W.el=j(W.el);else{if(me=W.el=v(W.type,xe,Se&&Se.is,Se),Te&8?I(me,W.children):Te&16&&le(W.children,me,null,ae,se,xe&&Ee!=="foreignObject",ye,fe),qe&&Qt(W,null,ae,"created"),Se){for(const Ze in Se)Ze!=="value"&&!lr(Ze)&&f(me,Ze,null,Se[Ze],xe,W.children,ae,se,de);"value"in Se&&f(me,"value",null,Se.value),(ce=Se.onVnodeBeforeMount)&&Tt(ce,ae,W)}te(me,W,W.scopeId,ye,ae)}qe&&Qt(W,null,ae,"beforeMount");const $e=(!se||se&&!se.pendingBranch)&&_e&&!_e.persisted;$e&&_e.beforeEnter(me),l(me,$,ee),((ce=Se&&Se.onVnodeMounted)||$e||qe)&&ft(()=>{ce&&Tt(ce,ae,W),$e&&_e.enter(me),qe&&Qt(W,null,ae,"mounted")},se)},te=(W,$,ee,ae,se)=>{if(ee&&z(W,ee),ae)for(let xe=0;xe<ae.length;xe++)z(W,ae[xe]);if(se){let xe=se.subTree;if($===xe){const ye=se.vnode;te(W,ye,ye.scopeId,ye.slotScopeIds,se.parent)}}},le=(W,$,ee,ae,se,xe,ye,fe,me=0)=>{for(let ce=me;ce<W.length;ce++){const Ee=W[ce]=fe?Ii(W[ce]):Ot(W[ce]);B(null,Ee,$,ee,ae,se,xe,ye,fe)}},pe=(W,$,ee,ae,se,xe,ye)=>{const fe=$.el=W.el;let{patchFlag:me,dynamicChildren:ce,dirs:Ee}=$;me|=W.patchFlag&16;const Se=W.props||Ue,Te=$.props||Ue;let _e;ee&&ji(ee,!1),(_e=Te.onVnodeBeforeUpdate)&&Tt(_e,ee,$,W),Ee&&Qt($,W,ee,"beforeUpdate"),ee&&ji(ee,!0);const He=se&&$.type!=="foreignObject";if(ce?ve(W.dynamicChildren,ce,fe,ee,ae,He,xe):ye||Be(W,$,fe,null,ee,ae,He,xe,!1),me>0){if(me&16)ne(fe,$,Se,Te,ee,ae,se);else if(me&2&&Se.class!==Te.class&&f(fe,"class",null,Te.class,se),me&4&&f(fe,"style",Se.style,Te.style,se),me&8){const qe=$.dynamicProps;for(let $e=0;$e<qe.length;$e++){const Ze=qe[$e],St=Se[Ze],ki=Te[Ze];(ki!==St||Ze==="value")&&f(fe,Ze,St,ki,se,W.children,ee,ae,de)}}me&1&&W.children!==$.children&&I(fe,$.children)}else!ye&&ce==null&&ne(fe,$,Se,Te,ee,ae,se);((_e=Te.onVnodeUpdated)||Ee)&&ft(()=>{_e&&Tt(_e,ee,$,W),Ee&&Qt($,W,ee,"updated")},ae)},ve=(W,$,ee,ae,se,xe,ye)=>{for(let fe=0;fe<$.length;fe++){const me=W[fe],ce=$[fe],Ee=me.el&&(me.type===pt||!ei(me,ce)||me.shapeFlag&70)?N(me.el):ee;B(me,ce,Ee,null,ae,se,xe,ye,!0)}},ne=(W,$,ee,ae,se,xe,ye)=>{if(ee!==ae){for(const fe in ae){if(lr(fe))continue;const me=ae[fe],ce=ee[fe];me!==ce&&fe!=="value"&&f(W,fe,ce,me,ye,$.children,se,xe,de)}if(ee!==Ue)for(const fe in ee)!lr(fe)&&!(fe in ae)&&f(W,fe,ee[fe],null,ye,$.children,se,xe,de);"value"in ae&&f(W,"value",ee.value,ae.value)}},Ae=(W,$,ee,ae,se,xe,ye,fe,me)=>{const ce=$.el=W?W.el:b(""),Ee=$.anchor=W?W.anchor:b("");let{patchFlag:Se,dynamicChildren:Te,slotScopeIds:_e}=$;_e&&(fe=fe?fe.concat(_e):_e),W==null?(l(ce,ee,ae),l(Ee,ee,ae),le($.children,ee,Ee,se,xe,ye,fe,me)):Se>0&&Se&64&&Te&&W.dynamicChildren?(ve(W.dynamicChildren,Te,ee,se,xe,ye,fe),($.key!=null||se&&$===se.subTree)&&al(W,$,!0)):Be(W,$,ee,Ee,se,xe,ye,fe,me)},he=(W,$,ee,ae,se,xe,ye,fe,me)=>{$.slotScopeIds=fe,W==null?$.shapeFlag&512?se.ctx.activate($,ee,ae,ye,me):Re($,ee,ae,se,xe,ye,me):Fe(W,$,me)},Re=(W,$,ee,ae,se,xe,ye)=>{const fe=W.component=Cu(W,ae,se);if(Dr(W)&&(fe.ctx.renderer=De),Tu(fe),fe.asyncDep){if(se&&se.registerDep(fe,Me),!W.el){const me=fe.subTree=it(At);P(null,me,$,ee)}return}Me(fe,W,$,ee,se,xe,ye)},Fe=(W,$,ee)=>{const ae=$.component=W.component;if($p(W,$,ee))if(ae.asyncDep&&!ae.asyncResolved){Ne(ae,$,ee);return}else ae.next=$,Hp(ae.update),ae.update();else $.component=W.component,$.el=W.el,ae.vnode=$},Me=(W,$,ee,ae,se,xe,ye)=>{const fe=()=>{if(W.isMounted){let{next:Ee,bu:Se,u:Te,parent:_e,vnode:He}=W,qe=Ee,$e;ji(W,!1),Ee?(Ee.el=He.el,Ne(W,Ee,ye)):Ee=He,Se&&kn(Se),($e=Ee.props&&Ee.props.onVnodeBeforeUpdate)&&Tt($e,_e,Ee,He),ji(W,!0);const Ze=ea(W),St=W.subTree;W.subTree=Ze,B(St,Ze,N(St.el),be(St),W,se,xe),Ee.el=Ze.el,qe===null&&el(W,Ze.el),Te&&ft(Te,se),($e=Ee.props&&Ee.props.onVnodeUpdated)&&ft(()=>Tt($e,_e,Ee,He),se)}else{let Ee;const{el:Se,props:Te}=$,{bm:_e,m:He,parent:qe}=W,$e=Sr($);if(ji(W,!1),_e&&kn(_e),!$e&&(Ee=Te&&Te.onVnodeBeforeMount)&&Tt(Ee,qe,$),ji(W,!0),Se&&Le){const Ze=()=>{W.subTree=ea(W),Le(Se,W.subTree,W,se,null)};$e?$.type.__asyncLoader().then(()=>!W.isUnmounted&&Ze()):Ze()}else{const Ze=W.subTree=ea(W);B(null,Ze,ee,ae,W,se,xe),$.el=Ze.el}if(He&&ft(He,se),!$e&&(Ee=Te&&Te.onVnodeMounted)){const Ze=$;ft(()=>Tt(Ee,qe,Ze),se)}$.shapeFlag&256&&W.a&&ft(W.a,se),W.isMounted=!0,$=ee=ae=null}},me=W.effect=new Rr(fe,()=>$o(W.update),W.scope),ce=W.update=me.run.bind(me);ce.id=W.uid,ji(W,!0),ce()},Ne=(W,$,ee)=>{$.component=W;const ae=W.vnode.props;W.vnode=$,W.next=null,xg(W,$.props,ae,ee),bg(W,$.children,ee),ln(),Zo(void 0,W.update),cn()},Be=(W,$,ee,ae,se,xe,ye,fe,me=!1)=>{const ce=W&&W.children,Ee=W?W.shapeFlag:0,Se=$.children,{patchFlag:Te,shapeFlag:_e}=$;if(Te>0){if(Te&128){nt(ce,Se,ee,ae,se,xe,ye,fe,me);return}else if(Te&256){Yt(ce,Se,ee,ae,se,xe,ye,fe,me);return}}_e&8?(Ee&16&&de(ce,se,xe),Se!==ce&&I(ee,Se)):Ee&16?_e&16?nt(ce,Se,ee,ae,se,xe,ye,fe,me):de(ce,se,xe,!0):(Ee&8&&I(ee,""),_e&16&&le(Se,ee,ae,se,xe,ye,fe,me))},Yt=(W,$,ee,ae,se,xe,ye,fe,me)=>{W=W||yn,$=$||yn;const ce=W.length,Ee=$.length,Se=Math.min(ce,Ee);let Te;for(Te=0;Te<Se;Te++){const _e=$[Te]=me?Ii($[Te]):Ot($[Te]);B(W[Te],_e,ee,null,se,xe,ye,fe,me)}ce>Ee?de(W,se,xe,!0,!1,Se):le($,ee,ae,se,xe,ye,fe,me,Se)},nt=(W,$,ee,ae,se,xe,ye,fe,me)=>{let ce=0;const Ee=$.length;let Se=W.length-1,Te=Ee-1;for(;ce<=Se&&ce<=Te;){const _e=W[ce],He=$[ce]=me?Ii($[ce]):Ot($[ce]);if(ei(_e,He))B(_e,He,ee,null,se,xe,ye,fe,me);else break;ce++}for(;ce<=Se&&ce<=Te;){const _e=W[Se],He=$[Te]=me?Ii($[Te]):Ot($[Te]);if(ei(_e,He))B(_e,He,ee,null,se,xe,ye,fe,me);else break;Se--,Te--}if(ce>Se){if(ce<=Te){const _e=Te+1,He=_e<Ee?$[_e].el:ae;for(;ce<=Te;)B(null,$[ce]=me?Ii($[ce]):Ot($[ce]),ee,He,se,xe,ye,fe,me),ce++}}else if(ce>Te)for(;ce<=Se;)st(W[ce],se,xe,!0),ce++;else{const _e=ce,He=ce,qe=new Map;for(ce=He;ce<=Te;ce++){const yt=$[ce]=me?Ii($[ce]):Ot($[ce]);yt.key!=null&&qe.set(yt.key,ce)}let $e,Ze=0;const St=Te-He+1;let ki=!1,Zn=0;const Bi=new Array(St);for(ce=0;ce<St;ce++)Bi[ce]=0;for(ce=_e;ce<=Se;ce++){const yt=W[ce];if(Ze>=St){st(yt,se,xe,!0);continue}let Bt;if(yt.key!=null)Bt=qe.get(yt.key);else for($e=He;$e<=Te;$e++)if(Bi[$e-He]===0&&ei(yt,$[$e])){Bt=$e;break}Bt===void 0?st(yt,se,xe,!0):(Bi[Bt-He]=ce+1,Bt>=Zn?Zn=Bt:ki=!0,B(yt,$[Bt],ee,null,se,xe,ye,fe,me),Ze++)}const Jn=ki?Ag(Bi):yn;for($e=Jn.length-1,ce=St-1;ce>=0;ce--){const yt=He+ce,Bt=$[yt],Yr=yt+1<Ee?$[yt+1].el:ae;Bi[ce]===0?B(null,Bt,ee,Yr,se,xe,ye,fe,me):ki&&($e<0||ce!==Jn[$e]?je(Bt,ee,Yr,2):$e--)}}},je=(W,$,ee,ae,se=null)=>{const{el:xe,type:ye,transition:fe,children:me,shapeFlag:ce}=W;if(ce&6){je(W.component.subTree,$,ee,ae);return}if(ce&128){W.suspense.move($,ee,ae);return}if(ce&64){ye.move(W,$,ee,De);return}if(ye===pt){l(xe,$,ee);for(let Se=0;Se<me.length;Se++)je(me[Se],$,ee,ae);l(W.anchor,$,ee);return}if(ye===Ji){H(W,$,ee);return}if(ae!==2&&ce&1&&fe)if(ae===0)fe.beforeEnter(xe),l(xe,$,ee),ft(()=>fe.enter(xe),se);else{const{leave:Se,delayLeave:Te,afterLeave:_e}=fe,He=()=>l(xe,$,ee),qe=()=>{Se(xe,()=>{He(),_e&&_e()})};Te?Te(xe,He,qe):qe()}else l(xe,$,ee)},st=(W,$,ee,ae=!1,se=!1)=>{const{type:xe,props:ye,ref:fe,children:me,dynamicChildren:ce,shapeFlag:Ee,patchFlag:Se,dirs:Te}=W;if(fe!=null&&ba(fe,null,ee,W,!0),Ee&256){$.ctx.deactivate(W);return}const _e=Ee&1&&Te,He=!Sr(W);let qe;if(He&&(qe=ye&&ye.onVnodeBeforeUnmount)&&Tt(qe,$,W),Ee&6)ue(W.component,ee,ae);else{if(Ee&128){W.suspense.unmount(ee,ae);return}_e&&Qt(W,null,$,"beforeUnmount"),Ee&64?W.type.remove(W,$,ee,se,De,ae):ce&&(xe!==pt||Se>0&&Se&64)?de(ce,$,ee,!1,!0):(xe===pt&&Se&384||!se&&Ee&16)&&de(me,$,ee),ae&&bt(W)}(He&&(qe=ye&&ye.onVnodeUnmounted)||_e)&&ft(()=>{qe&&Tt(qe,$,W),_e&&Qt(W,null,$,"unmounted")},ee)},bt=W=>{const{type:$,el:ee,anchor:ae,transition:se}=W;if($===pt){Q(ee,ae);return}if($===Ji){X(W);return}const xe=()=>{u(ee),se&&!se.persisted&&se.afterLeave&&se.afterLeave()};if(W.shapeFlag&1&&se&&!se.persisted){const{leave:ye,delayLeave:fe}=se,me=()=>ye(ee,xe);fe?fe(W.el,xe,me):me()}else xe()},Q=(W,$)=>{let ee;for(;W!==$;)ee=O(W),u(W),W=ee;u($)},ue=(W,$,ee)=>{const{bum:ae,scope:se,update:xe,subTree:ye,um:fe}=W;ae&&kn(ae),se.stop(),xe&&(xe.active=!1,st(ye,W,$,ee)),fe&&ft(fe,$),ft(()=>{W.isUnmounted=!0},$),$&&$.pendingBranch&&!$.isUnmounted&&W.asyncDep&&!W.asyncResolved&&W.suspenseId===$.pendingId&&($.deps--,$.deps===0&&$.resolve())},de=(W,$,ee,ae=!1,se=!1,xe=0)=>{for(let ye=xe;ye<W.length;ye++)st(W[ye],$,ee,ae,se)},be=W=>W.shapeFlag&6?be(W.component.subTree):W.shapeFlag&128?W.suspense.next():O(W.anchor||W.el),ze=(W,$,ee)=>{W==null?$._vnode&&st($._vnode,null,null,!0):B($._vnode||null,W,$,null,null,null,ee),ma(),$._vnode=W},De={p:B,um:st,m:je,r:bt,mt:Re,mc:le,pc:Be,pbc:ve,n:be,o:i};let Ie,Le;return n&&([Ie,Le]=n(De)),{render:ze,hydrate:Ie,createApp:wg(ze,Ie)}}function ji({effect:i,update:n},s){i.allowRecurse=n.allowRecurse=s}function al(i,n,s=!1){const l=i.children,u=n.children;if(Ce(l)&&Ce(u))for(let f=0;f<l.length;f++){const v=l[f];let b=u[f];b.shapeFlag&1&&!b.dynamicChildren&&((b.patchFlag<=0||b.patchFlag===32)&&(b=u[f]=Ii(u[f]),b.el=v.el),s||al(v,b))}}function Ag(i){const n=i.slice(),s=[0];let l,u,f,v,b;const k=i.length;for(l=0;l<k;l++){const S=i[l];if(S!==0){if(u=s[s.length-1],i[u]<S){n[l]=u,s.push(l);continue}for(f=0,v=s.length-1;f<v;)b=f+v>>1,i[s[b]]<S?f=b+1:v=b;S<i[s[f]]&&(f>0&&(n[l]=s[f-1]),s[f]=l)}}for(f=s.length,v=s[f-1];f-- >0;)s[f]=v,v=n[v];return s}const Sg=i=>i.__isTeleport,fr=i=>i&&(i.disabled||i.disabled===""),Ql=i=>typeof SVGElement!="undefined"&&i instanceof SVGElement,qs=(i,n)=>{const s=i&&i.to;return at(s)?n?n(s):null:s},Cg={__isTeleport:!0,process(i,n,s,l,u,f,v,b,k,S){const{mc:I,pc:N,pbc:O,o:{insert:z,querySelector:j,createText:K,createComment:B}}=S,Y=fr(n.props);let{shapeFlag:P,children:q,dynamicChildren:H}=n;if(i==null){const X=n.el=K(""),Z=n.anchor=K("");z(X,s,l),z(Z,s,l);const U=n.target=qs(n.props,j),te=n.targetAnchor=K("");U&&(z(te,U),v=v||Ql(U));const le=(pe,ve)=>{P&16&&I(q,pe,ve,u,f,v,b,k)};Y?le(s,Z):U&&le(U,te)}else{n.el=i.el;const X=n.anchor=i.anchor,Z=n.target=i.target,U=n.targetAnchor=i.targetAnchor,te=fr(i.props),le=te?s:Z,pe=te?X:U;if(v=v||Ql(Z),H?(O(i.dynamicChildren,H,le,u,f,v,b),al(i,n,!0)):k||N(i,n,le,pe,u,f,v,b,!1),Y)te||Kr(n,s,X,S,1);else if((n.props&&n.props.to)!==(i.props&&i.props.to)){const ve=n.target=qs(n.props,j);ve&&Kr(n,ve,null,S,0)}else te&&Kr(n,Z,U,S,1)}},remove(i,n,s,l,{um:u,o:{remove:f}},v){const{shapeFlag:b,children:k,anchor:S,targetAnchor:I,target:N,props:O}=i;if(N&&f(I),(v||!fr(O))&&(f(S),b&16))for(let z=0;z<k.length;z++){const j=k[z];u(j,n,s,!0,!!j.dynamicChildren)}},move:Kr,hydrate:Eg};function Kr(i,n,s,{o:{insert:l},m:u},f=2){f===0&&l(i.targetAnchor,n,s);const{el:v,anchor:b,shapeFlag:k,children:S,props:I}=i,N=f===2;if(N&&l(v,n,s),(!N||fr(I))&&k&16)for(let O=0;O<S.length;O++)u(S[O],n,s,2);N&&l(b,n,s)}function Eg(i,n,s,l,u,f,{o:{nextSibling:v,parentNode:b,querySelector:k}},S){const I=n.target=qs(n.props,k);if(I){const N=I._lpa||I.firstChild;n.shapeFlag&16&&(fr(n.props)?(n.anchor=S(v(i),n,b(i),s,l,u,f),n.targetAnchor=N):(n.anchor=v(i),n.targetAnchor=S(N,n,I,s,l,u,f)),I._lpa=n.targetAnchor&&v(n.targetAnchor))}return n.anchor&&v(n.anchor)}const Tg=Cg,sl="components",Pg="directives";function Lg(i,n){return ol(sl,i,!0,n)||i}const vu=Symbol();function Ig(i){return at(i)?ol(sl,i,!1)||i:i||vu}function _g(i){return ol(Pg,i)}function ol(i,n,s=!0,l=!1){const u=Rt||dt;if(u){const f=u.type;if(i===sl){const b=ka(f);if(b&&(b===n||b===zt(n)||b===Nr(zt(n))))return f}const v=ec(u[i]||f[i],n)||ec(u.appContext[i],n);return!v&&l?f:v}}function ec(i,n){return i&&(i[n]||i[zt(n)]||i[Nr(zt(n))])}const pt=Symbol(void 0),Pn=Symbol(void 0),At=Symbol(void 0),Ji=Symbol(void 0),pr=[];let ai=null;function Ua(i=!1){pr.push(ai=i?null:[])}function bu(){pr.pop(),ai=pr[pr.length-1]||null}let Ln=1;function $s(i){Ln+=i}function yu(i){return i.dynamicChildren=Ln>0?ai||yn:null,bu(),Ln>0&&ai&&ai.push(i),i}function Og(i,n,s,l,u,f){return yu(cl(i,n,s,l,u,f,!0))}function ll(i,n,s,l,u){return yu(it(i,n,s,l,u,!0))}function zi(i){return i?i.__v_isVNode===!0:!1}function ei(i,n){return i.type===n.type&&i.key===n.key}function Mg(i){}const qa="__vInternal",wu=({key:i})=>i!=null?i:null,ia=({ref:i,ref_key:n,ref_for:s})=>i!=null?at(i)||Ke(i)||Oe(i)?{i:Rt,r:i,k:n,f:!!s}:i:null;function cl(i,n=null,s=null,l=0,u=null,f=i===pt?0:1,v=!1,b=!1){const k={__v_isVNode:!0,__v_skip:!0,type:i,props:n,key:n&&wu(n),ref:n&&ia(n),scopeId:Wa,slotScopeIds:null,children:s,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:f,patchFlag:l,dynamicProps:u,dynamicChildren:null,appContext:null};return b?(ul(k,s),f&128&&i.normalize(k)):s&&(k.shapeFlag|=at(s)?8:16),Ln>0&&!v&&ai&&(k.patchFlag>0||f&6)&&k.patchFlag!==32&&ai.push(k),k}const it=Ng;function Ng(i,n=null,s=null,l=0,u=null,f=!1){if((!i||i===vu)&&(i=At),zi(i)){const b=Xi(i,n,!0);return s&&ul(b,s),b}if(Kg(i)&&(i=i.__vccOpts),n){n=ku(n);let{class:b,style:k}=n;b&&!at(b)&&(n.class=Or(b)),ct(k)&&(Wo(k)&&!Ce(k)&&(k=lt({},k)),n.style=_r(k))}const v=at(i)?1:Kp(i)?128:Sg(i)?64:ct(i)?4:Oe(i)?2:0;return cl(i,n,s,l,u,v,f,!0)}function ku(i){return i?Wo(i)||qa in i?lt({},i):i:null}function Xi(i,n,s=!1){const{props:l,ref:u,patchFlag:f,children:v}=i,b=n?Au(l||{},n):l;return{__v_isVNode:!0,__v_skip:!0,type:i.type,props:b,key:b&&wu(b),ref:n&&n.ref?s&&u?Ce(u)?u.concat(ia(n)):[u,ia(n)]:ia(n):u,scopeId:i.scopeId,slotScopeIds:i.slotScopeIds,children:v,target:i.target,targetAnchor:i.targetAnchor,staticCount:i.staticCount,shapeFlag:i.shapeFlag,patchFlag:n&&i.type!==pt?f===-1?16:f|16:f,dynamicProps:i.dynamicProps,dynamicChildren:i.dynamicChildren,appContext:i.appContext,dirs:i.dirs,transition:i.transition,component:i.component,suspense:i.suspense,ssContent:i.ssContent&&Xi(i.ssContent),ssFallback:i.ssFallback&&Xi(i.ssFallback),el:i.el,anchor:i.anchor}}function hl(i=" ",n=0){return it(Pn,null,i,n)}function Rg(i,n){const s=it(Ji,null,i);return s.staticCount=n,s}function Fg(i="",n=!1){return n?(Ua(),ll(At,null,i)):it(At,null,i)}function Ot(i){return i==null||typeof i=="boolean"?it(At):Ce(i)?it(pt,null,i.slice()):typeof i=="object"?Ii(i):it(Pn,null,String(i))}function Ii(i){return i.el===null||i.memo?i:Xi(i)}function ul(i,n){let s=0;const{shapeFlag:l}=i;if(n==null)n=null;else if(Ce(n))s=16;else if(typeof n=="object")if(l&65){const u=n.default;u&&(u._c&&(u._d=!1),ul(i,u()),u._c&&(u._d=!0));return}else{s=32;const u=n._;!u&&!(qa in n)?n._ctx=Rt:u===3&&Rt&&(Rt.slots._===1?n._=1:(n._=2,i.patchFlag|=1024))}else Oe(n)?(n={default:n,_ctx:Rt},s=32):(n=String(n),l&64?(s=16,n=[hl(n)]):s=8);i.children=n,i.shapeFlag|=s}function Au(...i){const n={};for(let s=0;s<i.length;s++){const l=i[s];for(const u in l)if(u==="class")n.class!==l.class&&(n.class=Or([n.class,l.class]));else if(u==="style")n.style=_r([n.style,l.style]);else if(Mr(u)){const f=n[u],v=l[u];v&&f!==v&&!(Ce(f)&&f.includes(v))&&(n[u]=f?[].concat(f,v):v)}else u!==""&&(n[u]=l[u])}return n}function Tt(i,n,s,l=null){Dt(i,n,7,[s,l])}function Dg(i,n,s,l){let u;const f=s&&s[l];if(Ce(i)||at(i)){u=new Array(i.length);for(let v=0,b=i.length;v<b;v++)u[v]=n(i[v],v,void 0,f&&f[v])}else if(typeof i=="number"){u=new Array(i);for(let v=0;v<i;v++)u[v]=n(v+1,v,void 0,f&&f[v])}else if(ct(i))if(i[Symbol.iterator])u=Array.from(i,(v,b)=>n(v,b,void 0,f&&f[b]));else{const v=Object.keys(i);u=new Array(v.length);for(let b=0,k=v.length;b<k;b++){const S=v[b];u[b]=n(i[S],S,b,f&&f[b])}}else u=[];return s&&(s[l]=u),u}function zg(i,n){for(let s=0;s<n.length;s++){const l=n[s];if(Ce(l))for(let u=0;u<l.length;u++)i[l[u].name]=l[u].fn;else l&&(i[l.name]=l.fn)}return i}function Xg(i,n,s={},l,u){if(Rt.isCE)return it("slot",n==="default"?null:{name:n},l&&l());let f=i[n];f&&f._c&&(f._d=!1),Ua();const v=f&&Su(f(s)),b=ll(pt,{key:s.key||`_${n}`},v||(l?l():[]),v&&i._===1?64:-2);return!u&&b.scopeId&&(b.slotScopeIds=[b.scopeId+"-s"]),f&&f._c&&(f._d=!0),b}function Su(i){return i.some(n=>zi(n)?!(n.type===At||n.type===pt&&!Su(n.children)):!0)?i:null}function Hg(i){const n={};for(const s in i)n[cr(s)]=i[s];return n}const Ks=i=>i?Eu(i)?dl(i)||i.proxy:Ks(i.parent):null,ya=lt(Object.create(null),{$:i=>i,$el:i=>i.vnode.el,$data:i=>i.data,$props:i=>i.props,$attrs:i=>i.attrs,$slots:i=>i.slots,$refs:i=>i.refs,$parent:i=>Ks(i.parent),$root:i=>Ks(i.root),$emit:i=>i.emit,$options:i=>ou(i),$forceUpdate:i=>()=>$o(i.update),$nextTick:i=>en.bind(i.proxy),$watch:i=>rg.bind(i)}),Zs={get({_:i},n){const{ctx:s,setupState:l,data:u,props:f,accessCache:v,type:b,appContext:k}=i;let S;if(n[0]!=="$"){const z=v[n];if(z!==void 0)switch(z){case 1:return l[n];case 2:return u[n];case 4:return s[n];case 3:return f[n]}else{if(l!==Ue&&Ve(l,n))return v[n]=1,l[n];if(u!==Ue&&Ve(u,n))return v[n]=2,u[n];if((S=i.propsOptions[0])&&Ve(S,n))return v[n]=3,f[n];if(s!==Ue&&Ve(s,n))return v[n]=4,s[n];js&&(v[n]=0)}}const I=ya[n];let N,O;if(I)return n==="$attrs"&&Xt(i,"get",n),I(i);if((N=b.__cssModules)&&(N=N[n]))return N;if(s!==Ue&&Ve(s,n))return v[n]=4,s[n];if(O=k.config.globalProperties,Ve(O,n))return O[n]},set({_:i},n,s){const{data:l,setupState:u,ctx:f}=i;return u!==Ue&&Ve(u,n)?(u[n]=s,!0):l!==Ue&&Ve(l,n)?(l[n]=s,!0):Ve(i.props,n)||n[0]==="$"&&n.slice(1)in i?!1:(f[n]=s,!0)},has({_:{data:i,setupState:n,accessCache:s,ctx:l,appContext:u,propsOptions:f}},v){let b;return!!s[v]||i!==Ue&&Ve(i,v)||n!==Ue&&Ve(n,v)||(b=f[0])&&Ve(b,v)||Ve(l,v)||Ve(ya,v)||Ve(u.config.globalProperties,v)},defineProperty(i,n,s){return s.get!=null?this.set(i,n,s.get(),null):s.value!=null&&this.set(i,n,s.value,null),Reflect.defineProperty(i,n,s)}},Yg=lt({},Zs,{get(i,n){if(n!==Symbol.unscopables)return Zs.get(i,n,i)},has(i,n){return n[0]!=="_"&&!Mf(n)}}),Bg=pu();let Wg=0;function Cu(i,n,s){const l=i.type,u=(n?n.appContext:i.appContext)||Bg,f={uid:Wg++,vnode:i,type:l,parent:n,appContext:u,root:null,next:null,subTree:null,effect:null,update:null,scope:new Do(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:n?n.provides:Object.create(u.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:cu(l,u),emitsOptions:Gh(l,u),emit:null,emitted:null,propsDefaults:Ue,inheritAttrs:l.inheritAttrs,ctx:Ue,data:Ue,props:Ue,attrs:Ue,slots:Ue,refs:Ue,setupState:Ue,setupContext:null,suspense:s,suspenseId:s?s.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return f.ctx={_:f},f.root=n?n.root:f,f.emit=Bp.bind(null,f),i.ce&&i.ce(f),f}let dt=null;const Ht=()=>dt||Rt,Hi=i=>{dt=i,i.scope.on()},Ni=()=>{dt&&dt.scope.off(),dt=null};function Eu(i){return i.vnode.shapeFlag&4}let In=!1;function Tu(i,n=!1){In=n;const{props:s,children:l}=i.vnode,u=Eu(i);gg(i,s,u,n),vg(i,l);const f=u?Vg(i,n):void 0;return In=!1,f}function Vg(i,n){const s=i.type;i.accessCache=Object.create(null),i.proxy=xi(new Proxy(i.ctx,Zs));const{setup:l}=s;if(l){const u=i.setupContext=l.length>1?Lu(i):null;Hi(i),ln();const f=ri(l,i,0,[i.props,u]);if(cn(),Ni(),Ro(f)){if(f.then(Ni,Ni),n)return f.then(v=>{Js(i,v,n)}).catch(v=>{hn(v,i,0)});i.asyncDep=f}else Js(i,f,n)}else Pu(i,n)}function Js(i,n,s){Oe(n)?i.type.__ssrInlineRender?i.ssrRender=n:i.render=n:ct(n)&&(i.setupState=Go(n)),Pu(i,s)}let wa,Qs;function jg(i){wa=i,Qs=n=>{n.render._rc&&(n.withProxy=new Proxy(n.ctx,Yg))}}const Gg=()=>!wa;function Pu(i,n,s){const l=i.type;if(!i.render){if(!n&&wa&&!l.render){const u=l.template;if(u){const{isCustomElement:f,compilerOptions:v}=i.appContext.config,{delimiters:b,compilerOptions:k}=l,S=lt(lt({isCustomElement:f,delimiters:b},v),k);l.render=wa(u,S)}}i.render=l.render||Zt,Qs&&Qs(i)}Hi(i),ln(),hg(i),cn(),Ni()}function Ug(i){return new Proxy(i.attrs,{get(n,s){return Xt(i,"get","$attrs"),n[s]}})}function Lu(i){const n=l=>{i.exposed=l||{}};let s;return{get attrs(){return s||(s=Ug(i))},slots:i.slots,emit:i.emit,expose:n}}function dl(i){if(i.exposed)return i.exposeProxy||(i.exposeProxy=new Proxy(Go(xi(i.exposed)),{get(n,s){if(s in n)return n[s];if(s in ya)return ya[s](i)}}))}const qg=/(?:^|[-_])(\w)/g,$g=i=>i.replace(qg,n=>n.toUpperCase()).replace(/[-_]/g,"");function ka(i){return Oe(i)&&i.displayName||i.name}function Iu(i,n,s=!1){let l=ka(n);if(!l&&n.__file){const u=n.__file.match(/([^/\\]+)\.\w+$/);u&&(l=u[1])}if(!l&&i&&i.parent){const u=f=>{for(const v in f)if(f[v]===n)return v};l=u(i.components||i.parent.type.components)||u(i.appContext.components)}return l?$g(l):s?"App":"Anonymous"}function Kg(i){return Oe(i)&&"__vccOpts"in i}const ht=(i,n)=>Mp(i,n,In);function Zg(){return null}function Jg(){return null}function Qg(i){}function ex(i,n){return null}function tx(){return _u().slots}function ix(){return _u().attrs}function _u(){const i=Ht();return i.setupContext||(i.setupContext=Lu(i))}function nx(i,n){const s=Ce(i)?i.reduce((l,u)=>(l[u]={},l),{}):i;for(const l in n){const u=s[l];u?Ce(u)||Oe(u)?s[l]={type:u,default:n[l]}:u.default=n[l]:u===null&&(s[l]={default:n[l]})}return s}function rx(i,n){const s={};for(const l in i)n.includes(l)||Object.defineProperty(s,l,{enumerable:!0,get:()=>i[l]});return s}function ax(i){const n=Ht();let s=i();return Ni(),Ro(s)&&(s=s.catch(l=>{throw Hi(n),l})),[s,()=>Hi(n)]}function _t(i,n,s){const l=arguments.length;return l===2?ct(n)&&!Ce(n)?zi(n)?it(i,null,[n]):it(i,n):it(i,null,n):(l>3?s=Array.prototype.slice.call(arguments,2):l===3&&zi(s)&&(s=[s]),it(i,n,s))}const Ou=Symbol(""),sx=()=>{{const i=Lt(Ou);return i||Xh("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),i}};function ox(){}function lx(i,n,s,l){const u=s[l];if(u&&Mu(u,i))return u;const f=n();return f.memo=i.slice(),s[l]=f}function Mu(i,n){const s=i.memo;if(s.length!=n.length)return!1;for(let l=0;l<s.length;l++)if(s[l]!==n[l])return!1;return Ln>0&&ai&&ai.push(i),!0}const Nu="3.2.31",cx={createComponentInstance:Cu,setupComponent:Tu,renderComponentRoot:ea,setCurrentRenderingInstance:kr,isVNode:zi,normalizeVNode:Ot},hx=cx,ux=null,dx=null,fx="http://www.w3.org/2000/svg",$i=typeof document!="undefined"?document:null,tc=$i&&$i.createElement("template"),px={insert:(i,n,s)=>{n.insertBefore(i,s||null)},remove:i=>{const n=i.parentNode;n&&n.removeChild(i)},createElement:(i,n,s,l)=>{const u=n?$i.createElementNS(fx,i):$i.createElement(i,s?{is:s}:void 0);return i==="select"&&l&&l.multiple!=null&&u.setAttribute("multiple",l.multiple),u},createText:i=>$i.createTextNode(i),createComment:i=>$i.createComment(i),setText:(i,n)=>{i.nodeValue=n},setElementText:(i,n)=>{i.textContent=n},parentNode:i=>i.parentNode,nextSibling:i=>i.nextSibling,querySelector:i=>$i.querySelector(i),setScopeId(i,n){i.setAttribute(n,"")},cloneNode(i){const n=i.cloneNode(!0);return"_value"in i&&(n._value=i._value),n},insertStaticContent(i,n,s,l,u,f){const v=s?s.previousSibling:n.lastChild;if(u&&(u===f||u.nextSibling))for(;n.insertBefore(u.cloneNode(!0),s),!(u===f||!(u=u.nextSibling)););else{tc.innerHTML=l?`<svg>${i}</svg>`:i;const b=tc.content;if(l){const k=b.firstChild;for(;k.firstChild;)b.appendChild(k.firstChild);b.removeChild(k)}n.insertBefore(b,s)}return[v?v.nextSibling:n.firstChild,s?s.previousSibling:n.lastChild]}};function gx(i,n,s){const l=i._vtc;l&&(n=(n?[n,...l]:[...l]).join(" ")),n==null?i.removeAttribute("class"):s?i.setAttribute("class",n):i.className=n}function xx(i,n,s){const l=i.style,u=at(s);if(s&&!u){for(const f in s)eo(l,f,s[f]);if(n&&!at(n))for(const f in n)s[f]==null&&eo(l,f,"")}else{const f=l.display;u?n!==s&&(l.cssText=s):n&&i.removeAttribute("style"),"_vod"in i&&(l.display=f)}}const ic=/\s*!important$/;function eo(i,n,s){if(Ce(s))s.forEach(l=>eo(i,n,l));else if(n.startsWith("--"))i.setProperty(n,s);else{const l=mx(i,n);ic.test(s)?i.setProperty(ii(l),s.replace(ic,""),"important"):i[l]=s}}const nc=["Webkit","Moz","ms"],ws={};function mx(i,n){const s=ws[n];if(s)return s;let l=zt(n);if(l!=="filter"&&l in i)return ws[n]=l;l=Nr(l);for(let u=0;u<nc.length;u++){const f=nc[u]+l;if(f in i)return ws[n]=f}return n}const rc="http://www.w3.org/1999/xlink";function vx(i,n,s,l,u){if(l&&n.startsWith("xlink:"))s==null?i.removeAttributeNS(rc,n.slice(6,n.length)):i.setAttributeNS(rc,n,s);else{const f=Rf(n);s==null||f&&!vh(s)?i.removeAttribute(n):i.setAttribute(n,f?"":s)}}function bx(i,n,s,l,u,f,v){if(n==="innerHTML"||n==="textContent"){l&&v(l,u,f),i[n]=s==null?"":s;return}if(n==="value"&&i.tagName!=="PROGRESS"&&!i.tagName.includes("-")){i._value=s;const b=s==null?"":s;(i.value!==b||i.tagName==="OPTION")&&(i.value=b),s==null&&i.removeAttribute(n);return}if(s===""||s==null){const b=typeof i[n];if(b==="boolean"){i[n]=vh(s);return}else if(s==null&&b==="string"){i[n]="",i.removeAttribute(n);return}else if(b==="number"){try{i[n]=0}catch{}i.removeAttribute(n);return}}try{i[n]=s}catch{}}let Aa=Date.now,Ru=!1;if(typeof window!="undefined"){Aa()>document.createEvent("Event").timeStamp&&(Aa=()=>performance.now());const i=navigator.userAgent.match(/firefox\/(\d+)/i);Ru=!!(i&&Number(i[1])<=53)}let to=0;const yx=Promise.resolve(),wx=()=>{to=0},kx=()=>to||(yx.then(wx),to=Aa());function ui(i,n,s,l){i.addEventListener(n,s,l)}function Ax(i,n,s,l){i.removeEventListener(n,s,l)}function Sx(i,n,s,l,u=null){const f=i._vei||(i._vei={}),v=f[n];if(l&&v)v.value=l;else{const[b,k]=Cx(n);if(l){const S=f[n]=Ex(l,u);ui(i,b,S,k)}else v&&(Ax(i,b,v,k),f[n]=void 0)}}const ac=/(?:Once|Passive|Capture)$/;function Cx(i){let n;if(ac.test(i)){n={};let s;for(;s=i.match(ac);)i=i.slice(0,i.length-s[0].length),n[s[0].toLowerCase()]=!0}return[ii(i.slice(2)),n]}function Ex(i,n){const s=l=>{const u=l.timeStamp||Aa();(Ru||u>=s.attached-1)&&Dt(Tx(l,s.value),n,5,[l])};return s.value=i,s.attached=kx(),s}function Tx(i,n){if(Ce(n)){const s=i.stopImmediatePropagation;return i.stopImmediatePropagation=()=>{s.call(i),i._stopped=!0},n.map(l=>u=>!u._stopped&&l&&l(u))}else return n}const sc=/^on[a-z]/,Px=(i,n,s,l,u=!1,f,v,b,k)=>{n==="class"?gx(i,l,u):n==="style"?xx(i,s,l):Mr(n)?Oo(n)||Sx(i,n,s,l,v):(n[0]==="."?(n=n.slice(1),!0):n[0]==="^"?(n=n.slice(1),!1):Lx(i,n,l,u))?bx(i,n,l,f,v,b,k):(n==="true-value"?i._trueValue=l:n==="false-value"&&(i._falseValue=l),vx(i,n,l,u))};function Lx(i,n,s,l){return l?!!(n==="innerHTML"||n==="textContent"||n in i&&sc.test(n)&&Oe(s)):n==="spellcheck"||n==="draggable"||n==="form"||n==="list"&&i.tagName==="INPUT"||n==="type"&&i.tagName==="TEXTAREA"||sc.test(n)&&at(s)?!1:n in i}function Fu(i,n){const s=Vn(i);class l extends $a{constructor(f){super(s,f,n)}}return l.def=s,l}const Ix=i=>Fu(i,$u),_x=typeof HTMLElement!="undefined"?HTMLElement:class{};class $a extends _x{constructor(n,s={},l){super();this._def=n,this._props=s,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&l?l(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,en(()=>{this._connected||(no(null,this.shadowRoot),this._instance=null)})}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let l=0;l<this.attributes.length;l++)this._setAttr(this.attributes[l].name);new MutationObserver(l=>{for(const u of l)this._setAttr(u.attributeName)}).observe(this,{attributes:!0});const n=l=>{const{props:u,styles:f}=l,v=!Ce(u),b=u?v?Object.keys(u):u:[];let k;if(v)for(const S in this._props){const I=u[S];(I===Number||I&&I.type===Number)&&(this._props[S]=Fi(this._props[S]),(k||(k=Object.create(null)))[S]=!0)}this._numberProps=k;for(const S of Object.keys(this))S[0]!=="_"&&this._setProp(S,this[S],!0,!1);for(const S of b.map(zt))Object.defineProperty(this,S,{get(){return this._getProp(S)},set(I){this._setProp(S,I)}});this._applyStyles(f),this._update()},s=this._def.__asyncLoader;s?s().then(n):n(this._def)}_setAttr(n){let s=this.getAttribute(n);this._numberProps&&this._numberProps[n]&&(s=Fi(s)),this._setProp(zt(n),s,!1)}_getProp(n){return this._props[n]}_setProp(n,s,l=!0,u=!0){s!==this._props[n]&&(this._props[n]=s,u&&this._instance&&this._update(),l&&(s===!0?this.setAttribute(ii(n),""):typeof s=="string"||typeof s=="number"?this.setAttribute(ii(n),s+""):s||this.removeAttribute(ii(n))))}_update(){no(this._createVNode(),this.shadowRoot)}_createVNode(){const n=it(this._def,lt({},this._props));return this._instance||(n.ce=s=>{this._instance=s,s.isCE=!0,s.emit=(u,...f)=>{this.dispatchEvent(new CustomEvent(u,{detail:f}))};let l=this;for(;l=l&&(l.parentNode||l.host);)if(l instanceof $a){s.parent=l._instance;break}}),n}_applyStyles(n){n&&n.forEach(s=>{const l=document.createElement("style");l.textContent=s,this.shadowRoot.appendChild(l)})}}function Ox(i="$style"){{const n=Ht();if(!n)return Ue;const s=n.type.__cssModules;if(!s)return Ue;const l=s[i];return l||Ue}}function Mx(i){const n=Ht();if(!n)return;const s=()=>io(n.subTree,i(n.proxy));qh(s),mi(()=>{const l=new MutationObserver(s);l.observe(n.subTree.el.parentNode,{childList:!0}),jn(()=>l.disconnect())})}function io(i,n){if(i.shapeFlag&128){const s=i.suspense;i=s.activeBranch,s.pendingBranch&&!s.isHydrating&&s.effects.push(()=>{io(s.activeBranch,n)})}for(;i.component;)i=i.component.subTree;if(i.shapeFlag&1&&i.el)oc(i.el,n);else if(i.type===pt)i.children.forEach(s=>io(s,n));else if(i.type===Ji){let{el:s,anchor:l}=i;for(;s&&(oc(s,n),s!==l);)s=s.nextSibling}}function oc(i,n){if(i.nodeType===1){const s=i.style;for(const l in n)s.setProperty(`--${l}`,n[l])}}const Ei="transition",Qn="animation",fl=(i,{slots:n})=>_t(nl,zu(i),n);fl.displayName="Transition";const Du={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Nx=fl.props=lt({},nl.props,Du),Gi=(i,n=[])=>{Ce(i)?i.forEach(s=>s(...n)):i&&i(...n)},lc=i=>i?Ce(i)?i.some(n=>n.length>1):i.length>1:!1;function zu(i){const n={};for(const ne in i)ne in Du||(n[ne]=i[ne]);if(i.css===!1)return n;const{name:s="v",type:l,duration:u,enterFromClass:f=`${s}-enter-from`,enterActiveClass:v=`${s}-enter-active`,enterToClass:b=`${s}-enter-to`,appearFromClass:k=f,appearActiveClass:S=v,appearToClass:I=b,leaveFromClass:N=`${s}-leave-from`,leaveActiveClass:O=`${s}-leave-active`,leaveToClass:z=`${s}-leave-to`}=i,j=Rx(u),K=j&&j[0],B=j&&j[1],{onBeforeEnter:Y,onEnter:P,onEnterCancelled:q,onLeave:H,onLeaveCancelled:X,onBeforeAppear:Z=Y,onAppear:U=P,onAppearCancelled:te=q}=n,le=(ne,Ae,he)=>{qi(ne,Ae?I:b),qi(ne,Ae?S:v),he&&he()},pe=(ne,Ae)=>{qi(ne,z),qi(ne,O),Ae&&Ae()},ve=ne=>(Ae,he)=>{const Re=ne?U:P,Fe=()=>le(Ae,ne,he);Gi(Re,[Ae,Fe]),cc(()=>{qi(Ae,ne?k:f),li(Ae,ne?I:b),lc(Re)||hc(Ae,l,K,Fe)})};return lt(n,{onBeforeEnter(ne){Gi(Y,[ne]),li(ne,f),li(ne,v)},onBeforeAppear(ne){Gi(Z,[ne]),li(ne,k),li(ne,S)},onEnter:ve(!1),onAppear:ve(!0),onLeave(ne,Ae){const he=()=>pe(ne,Ae);li(ne,N),Hu(),li(ne,O),cc(()=>{qi(ne,N),li(ne,z),lc(H)||hc(ne,l,B,he)}),Gi(H,[ne,he])},onEnterCancelled(ne){le(ne,!1),Gi(q,[ne])},onAppearCancelled(ne){le(ne,!0),Gi(te,[ne])},onLeaveCancelled(ne){pe(ne),Gi(X,[ne])}})}function Rx(i){if(i==null)return null;if(ct(i))return[ks(i.enter),ks(i.leave)];{const n=ks(i);return[n,n]}}function ks(i){return Fi(i)}function li(i,n){n.split(/\s+/).forEach(s=>s&&i.classList.add(s)),(i._vtc||(i._vtc=new Set)).add(n)}function qi(i,n){n.split(/\s+/).forEach(l=>l&&i.classList.remove(l));const{_vtc:s}=i;s&&(s.delete(n),s.size||(i._vtc=void 0))}function cc(i){requestAnimationFrame(()=>{requestAnimationFrame(i)})}let Fx=0;function hc(i,n,s,l){const u=i._endId=++Fx,f=()=>{u===i._endId&&l()};if(s)return setTimeout(f,s);const{type:v,timeout:b,propCount:k}=Xu(i,n);if(!v)return l();const S=v+"end";let I=0;const N=()=>{i.removeEventListener(S,O),f()},O=z=>{z.target===i&&++I>=k&&N()};setTimeout(()=>{I<k&&N()},b+1),i.addEventListener(S,O)}function Xu(i,n){const s=window.getComputedStyle(i),l=j=>(s[j]||"").split(", "),u=l(Ei+"Delay"),f=l(Ei+"Duration"),v=uc(u,f),b=l(Qn+"Delay"),k=l(Qn+"Duration"),S=uc(b,k);let I=null,N=0,O=0;n===Ei?v>0&&(I=Ei,N=v,O=f.length):n===Qn?S>0&&(I=Qn,N=S,O=k.length):(N=Math.max(v,S),I=N>0?v>S?Ei:Qn:null,O=I?I===Ei?f.length:k.length:0);const z=I===Ei&&/\b(transform|all)(,|$)/.test(s[Ei+"Property"]);return{type:I,timeout:N,propCount:O,hasTransform:z}}function uc(i,n){for(;i.length<n.length;)i=i.concat(i);return Math.max(...n.map((s,l)=>dc(s)+dc(i[l])))}function dc(i){return Number(i.slice(0,-1).replace(",","."))*1e3}function Hu(){return document.body.offsetHeight}const Yu=new WeakMap,Bu=new WeakMap,Dx={name:"TransitionGroup",props:lt({},Nx,{tag:String,moveClass:String}),setup(i,{slots:n}){const s=Ht(),l=il();let u,f;return Ga(()=>{if(!u.length)return;const v=i.moveClass||`${i.name||"v"}-move`;if(!Bx(u[0].el,s.vnode.el,v))return;u.forEach(Xx),u.forEach(Hx);const b=u.filter(Yx);Hu(),b.forEach(k=>{const S=k.el,I=S.style;li(S,v),I.transform=I.webkitTransform=I.transitionDuration="";const N=S._moveCb=O=>{O&&O.target!==S||(!O||/transform$/.test(O.propertyName))&&(S.removeEventListener("transitionend",N),S._moveCb=null,qi(S,v))};S.addEventListener("transitionend",N)})}),()=>{const v=Xe(i),b=zu(v);let k=v.tag||pt;u=f,f=n.default?Va(n.default()):[];for(let S=0;S<f.length;S++){const I=f[S];I.key!=null&&tn(I,Tn(I,b,l,s))}if(u)for(let S=0;S<u.length;S++){const I=u[S];tn(I,Tn(I,b,l,s)),Yu.set(I,I.el.getBoundingClientRect())}return it(k,null,f)}}},zx=Dx;function Xx(i){const n=i.el;n._moveCb&&n._moveCb(),n._enterCb&&n._enterCb()}function Hx(i){Bu.set(i,i.el.getBoundingClientRect())}function Yx(i){const n=Yu.get(i),s=Bu.get(i),l=n.left-s.left,u=n.top-s.top;if(l||u){const f=i.el.style;return f.transform=f.webkitTransform=`translate(${l}px,${u}px)`,f.transitionDuration="0s",i}}function Bx(i,n,s){const l=i.cloneNode();i._vtc&&i._vtc.forEach(v=>{v.split(/\s+/).forEach(b=>b&&l.classList.remove(b))}),s.split(/\s+/).forEach(v=>v&&l.classList.add(v)),l.style.display="none";const u=n.nodeType===1?n:n.parentNode;u.appendChild(l);const{hasTransform:f}=Xu(l);return u.removeChild(l),f}const Yi=i=>{const n=i.props["onUpdate:modelValue"];return Ce(n)?s=>kn(n,s):n};function Wx(i){i.target.composing=!0}function fc(i){const n=i.target;n.composing&&(n.composing=!1,Vx(n,"input"))}function Vx(i,n){const s=document.createEvent("HTMLEvents");s.initEvent(n,!0,!0),i.dispatchEvent(s)}const Sa={created(i,{modifiers:{lazy:n,trim:s,number:l}},u){i._assign=Yi(u);const f=l||u.props&&u.props.type==="number";ui(i,n?"change":"input",v=>{if(v.target.composing)return;let b=i.value;s?b=b.trim():f&&(b=Fi(b)),i._assign(b)}),s&&ui(i,"change",()=>{i.value=i.value.trim()}),n||(ui(i,"compositionstart",Wx),ui(i,"compositionend",fc),ui(i,"change",fc))},mounted(i,{value:n}){i.value=n==null?"":n},beforeUpdate(i,{value:n,modifiers:{lazy:s,trim:l,number:u}},f){if(i._assign=Yi(f),i.composing||document.activeElement===i&&(s||l&&i.value.trim()===n||(u||i.type==="number")&&Fi(i.value)===n))return;const v=n==null?"":n;i.value!==v&&(i.value=v)}},pl={deep:!0,created(i,n,s){i._assign=Yi(s),ui(i,"change",()=>{const l=i._modelValue,u=_n(i),f=i.checked,v=i._assign;if(Ce(l)){const b=Ra(l,u),k=b!==-1;if(f&&!k)v(l.concat(u));else if(!f&&k){const S=[...l];S.splice(b,1),v(S)}}else if(on(l)){const b=new Set(l);f?b.add(u):b.delete(u),v(b)}else v(Vu(i,f))})},mounted:pc,beforeUpdate(i,n,s){i._assign=Yi(s),pc(i,n,s)}};function pc(i,{value:n,oldValue:s},l){i._modelValue=n,Ce(n)?i.checked=Ra(n,l.props.value)>-1:on(n)?i.checked=n.has(l.props.value):n!==s&&(i.checked=Ri(n,Vu(i,!0)))}const gl={created(i,{value:n},s){i.checked=Ri(n,s.props.value),i._assign=Yi(s),ui(i,"change",()=>{i._assign(_n(i))})},beforeUpdate(i,{value:n,oldValue:s},l){i._assign=Yi(l),n!==s&&(i.checked=Ri(n,l.props.value))}},Wu={deep:!0,created(i,{value:n,modifiers:{number:s}},l){const u=on(n);ui(i,"change",()=>{const f=Array.prototype.filter.call(i.options,v=>v.selected).map(v=>s?Fi(_n(v)):_n(v));i._assign(i.multiple?u?new Set(f):f:f[0])}),i._assign=Yi(l)},mounted(i,{value:n}){gc(i,n)},beforeUpdate(i,n,s){i._assign=Yi(s)},updated(i,{value:n}){gc(i,n)}};function gc(i,n){const s=i.multiple;if(!(s&&!Ce(n)&&!on(n))){for(let l=0,u=i.options.length;l<u;l++){const f=i.options[l],v=_n(f);if(s)Ce(n)?f.selected=Ra(n,v)>-1:f.selected=n.has(v);else if(Ri(_n(f),n)){i.selectedIndex!==l&&(i.selectedIndex=l);return}}!s&&i.selectedIndex!==-1&&(i.selectedIndex=-1)}}function _n(i){return"_value"in i?i._value:i.value}function Vu(i,n){const s=n?"_trueValue":"_falseValue";return s in i?i[s]:n}const jx={created(i,n,s){Zr(i,n,s,null,"created")},mounted(i,n,s){Zr(i,n,s,null,"mounted")},beforeUpdate(i,n,s,l){Zr(i,n,s,l,"beforeUpdate")},updated(i,n,s,l){Zr(i,n,s,l,"updated")}};function Zr(i,n,s,l,u){let f;switch(i.tagName){case"SELECT":f=Wu;break;case"TEXTAREA":f=Sa;break;default:switch(s.props&&s.props.type){case"checkbox":f=pl;break;case"radio":f=gl;break;default:f=Sa}}const v=f[u];v&&v(i,n,s,l)}function Gx(){Sa.getSSRProps=({value:i})=>({value:i}),gl.getSSRProps=({value:i},n)=>{if(n.props&&Ri(n.props.value,i))return{checked:!0}},pl.getSSRProps=({value:i},n)=>{if(Ce(i)){if(n.props&&Ra(i,n.props.value)>-1)return{checked:!0}}else if(on(i)){if(n.props&&i.has(n.props.value))return{checked:!0}}else if(i)return{checked:!0}}}const Ux=["ctrl","shift","alt","meta"],qx={stop:i=>i.stopPropagation(),prevent:i=>i.preventDefault(),self:i=>i.target!==i.currentTarget,ctrl:i=>!i.ctrlKey,shift:i=>!i.shiftKey,alt:i=>!i.altKey,meta:i=>!i.metaKey,left:i=>"button"in i&&i.button!==0,middle:i=>"button"in i&&i.button!==1,right:i=>"button"in i&&i.button!==2,exact:(i,n)=>Ux.some(s=>i[`${s}Key`]&&!n.includes(s))},$x=(i,n)=>(s,...l)=>{for(let u=0;u<n.length;u++){const f=qx[n[u]];if(f&&f(s,n))return}return i(s,...l)},Kx={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Zx=(i,n)=>s=>{if(!("key"in s))return;const l=ii(s.key);if(n.some(u=>u===l||Kx[u]===l))return i(s)},ju={beforeMount(i,{value:n},{transition:s}){i._vod=i.style.display==="none"?"":i.style.display,s&&n?s.beforeEnter(i):er(i,n)},mounted(i,{value:n},{transition:s}){s&&n&&s.enter(i)},updated(i,{value:n,oldValue:s},{transition:l}){!n!=!s&&(l?n?(l.beforeEnter(i),er(i,!0),l.enter(i)):l.leave(i,()=>{er(i,!1)}):er(i,n))},beforeUnmount(i,{value:n}){er(i,n)}};function er(i,n){i.style.display=n?i._vod:"none"}function Jx(){ju.getSSRProps=({value:i})=>{if(!i)return{style:{display:"none"}}}}const Gu=lt({patchProp:Px},px);let gr,xc=!1;function Uu(){return gr||(gr=gu(Gu))}function qu(){return gr=xc?gr:xu(Gu),xc=!0,gr}const no=(...i)=>{Uu().render(...i)},$u=(...i)=>{qu().hydrate(...i)},Qx=(...i)=>{const n=Uu().createApp(...i),{mount:s}=n;return n.mount=l=>{const u=Ku(l);if(!u)return;const f=n._component;!Oe(f)&&!f.render&&!f.template&&(f.template=u.innerHTML),u.innerHTML="";const v=s(u,!1,u instanceof SVGElement);return u instanceof Element&&(u.removeAttribute("v-cloak"),u.setAttribute("data-v-app","")),v},n},em=(...i)=>{const n=qu().createApp(...i),{mount:s}=n;return n.mount=l=>{const u=Ku(l);if(u)return s(u,!0,u instanceof SVGElement)},n};function Ku(i){return at(i)?document.querySelector(i):i}let mc=!1;const tm=()=>{mc||(mc=!0,Gx(),Jx())},im=()=>{};var nm=Object.freeze(Object.defineProperty({__proto__:null,compile:im,EffectScope:Do,ReactiveEffect:Rr,customRef:Ip,effect:Qf,effectScope:zo,getCurrentScope:$f,isProxy:Wo,isReactive:ni,isReadonly:En,isRef:Ke,isShallow:Bo,markRaw:xi,onScopeDispose:Kf,proxyRefs:Go,reactive:Pt,readonly:Yo,ref:Ge,shallowReactive:Rh,shallowReadonly:Cp,shallowRef:Fh,stop:ep,toRaw:Xe,toRef:Uo,toRefs:zh,triggerRef:Tp,unref:An,camelize:zt,capitalize:Nr,normalizeClass:Or,normalizeProps:Xf,normalizeStyle:_r,toDisplayString:Yf,toHandlerKey:cr,BaseTransition:nl,Comment:At,Fragment:pt,KeepAlive:lg,Static:Ji,Suspense:Jp,Teleport:Tg,Text:Pn,callWithAsyncErrorHandling:Dt,callWithErrorHandling:ri,cloneVNode:Xi,compatUtils:dx,computed:ht,createBlock:ll,createCommentVNode:Fg,createElementBlock:Og,createElementVNode:cl,createHydrationRenderer:xu,createPropsRestProxy:rx,createRenderer:gu,createSlots:zg,createStaticVNode:Rg,createTextVNode:hl,createVNode:it,defineAsyncComponent:sg,defineComponent:Vn,defineEmits:Jg,defineExpose:Qg,defineProps:Zg,get devtools(){return mn},getCurrentInstance:Ht,getTransitionRawChildren:Va,guardReactiveProps:ku,h:_t,handleError:hn,initCustomFormatter:ox,inject:Lt,isMemoSame:Mu,isRuntimeOnly:Gg,isVNode:zi,mergeDefaults:nx,mergeProps:Au,nextTick:en,onActivated:Zh,onBeforeMount:eu,onBeforeUnmount:nn,onBeforeUpdate:tu,onDeactivated:Jh,onErrorCaptured:au,onMounted:mi,onRenderTracked:ru,onRenderTriggered:nu,onServerPrefetch:iu,onUnmounted:jn,onUpdated:Ga,openBlock:Ua,popScopeId:Vp,provide:Cn,pushScopeId:Wp,queuePostFlushCb:Ko,registerRuntimeCompiler:jg,renderList:Dg,renderSlot:Xg,resolveComponent:Lg,resolveDirective:_g,resolveDynamicComponent:Ig,resolveFilter:ux,resolveTransitionHooks:Tn,setBlockTracking:$s,setDevtoolsHook:jh,setTransitionHooks:tn,ssrContextKey:Ou,ssrUtils:hx,toHandlers:Hg,transformVNodeArgs:Mg,useAttrs:ix,useSSRContext:sx,useSlots:tx,useTransitionState:il,version:Nu,warn:Xh,watch:di,watchEffect:ta,watchPostEffect:qh,watchSyncEffect:ng,withAsyncContext:ax,withCtx:Qo,withDefaults:ex,withDirectives:fu,withMemo:lx,withScopeId:jp,Transition:fl,TransitionGroup:zx,VueElement:$a,createApp:Qx,createSSRApp:em,defineCustomElement:Fu,defineSSRCustomElement:Ix,hydrate:$u,initDirectivesForSSR:tm,render:no,useCssModule:Ox,useCssVars:Mx,vModelCheckbox:pl,vModelDynamic:jx,vModelRadio:gl,vModelSelect:Wu,vModelText:Sa,vShow:ju,withKeys:Zx,withModifiers:$x},Symbol.toStringTag,{value:"Module"}));function Ka(i,n,s,l){Object.defineProperty(i,n,{get:s,set:l,enumerable:!0})}function Vy(i,n){for(const s in n)Ka(i,s,n[s])}const vi=Ge(!1);let Za;function rm(i,n){const s=/(edg|edge|edga|edgios)\/([\w.]+)/.exec(i)||/(opr)[\/]([\w.]+)/.exec(i)||/(vivaldi)[\/]([\w.]+)/.exec(i)||/(chrome|crios)[\/]([\w.]+)/.exec(i)||/(version)(applewebkit)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(i)||/(webkit)[\/]([\w.]+).*(version)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(i)||/(firefox|fxios)[\/]([\w.]+)/.exec(i)||/(webkit)[\/]([\w.]+)/.exec(i)||/(opera)(?:.*version|)[\/]([\w.]+)/.exec(i)||[];return{browser:s[5]||s[3]||s[1]||"",version:s[2]||s[4]||"0",versionNumber:s[4]||s[2]||"0",platform:n[0]||""}}function am(i){return/(ipad)/.exec(i)||/(ipod)/.exec(i)||/(windows phone)/.exec(i)||/(iphone)/.exec(i)||/(kindle)/.exec(i)||/(silk)/.exec(i)||/(android)/.exec(i)||/(win)/.exec(i)||/(mac)/.exec(i)||/(linux)/.exec(i)||/(cros)/.exec(i)||/(playbook)/.exec(i)||/(bb)/.exec(i)||/(blackberry)/.exec(i)||[]}const Zu="ontouchstart"in window||window.navigator.maxTouchPoints>0;function sm(i){Za={is:dn({},i)},delete i.mac,delete i.desktop;const n=Math.min(window.innerHeight,window.innerWidth)>414?"ipad":"iphone";Object.assign(i,{mobile:!0,ios:!0,platform:n,[n]:!0})}function om(i){const n=i.toLowerCase(),s=am(n),l=rm(n,s),u={};l.browser&&(u[l.browser]=!0,u.version=l.version,u.versionNumber=parseInt(l.versionNumber,10)),l.platform&&(u[l.platform]=!0);const f=u.android||u.ios||u.bb||u.blackberry||u.ipad||u.iphone||u.ipod||u.kindle||u.playbook||u.silk||u["windows phone"];return f===!0||n.indexOf("mobile")>-1?(u.mobile=!0,u.edga||u.edgios?(u.edge=!0,l.browser="edge"):u.crios?(u.chrome=!0,l.browser="chrome"):u.fxios&&(u.firefox=!0,l.browser="firefox")):u.desktop=!0,(u.ipod||u.ipad||u.iphone)&&(u.ios=!0),u["windows phone"]&&(u.winphone=!0,delete u["windows phone"]),(u.chrome||u.opr||u.safari||u.vivaldi||u.mobile===!0&&u.ios!==!0&&f!==!0)&&(u.webkit=!0),u.edg&&(l.browser="edgechromium",u.edgeChromium=!0),(u.safari&&u.blackberry||u.bb)&&(l.browser="blackberry",u.blackberry=!0),u.safari&&u.playbook&&(l.browser="playbook",u.playbook=!0),u.opr&&(l.browser="opera",u.opera=!0),u.safari&&u.android&&(l.browser="android",u.android=!0),u.safari&&u.kindle&&(l.browser="kindle",u.kindle=!0),u.safari&&u.silk&&(l.browser="silk",u.silk=!0),u.vivaldi&&(l.browser="vivaldi",u.vivaldi=!0),u.name=l.browser,u.platform=l.platform,n.indexOf("electron")>-1?u.electron=!0:document.location.href.indexOf("-extension://")>-1?u.bex=!0:(window.Capacitor!==void 0?(u.capacitor=!0,u.nativeMobile=!0,u.nativeMobileWrapper="capacitor"):(window._cordovaNative!==void 0||window.cordova!==void 0)&&(u.cordova=!0,u.nativeMobile=!0,u.nativeMobileWrapper="cordova"),Zu===!0&&u.mac===!0&&(u.desktop===!0&&u.safari===!0||u.nativeMobile===!0&&u.android!==!0&&u.ios!==!0&&u.ipad!==!0)&&sm(u)),u}const vc=navigator.userAgent||navigator.vendor||window.opera,lm={has:{touch:!1,webStorage:!1},within:{iframe:!1}},$t={userAgent:vc,is:om(vc),has:{touch:Zu},within:{iframe:window.self!==window.top}},ro={install(i){const{$q:n}=i;vi.value===!0?(i.onSSRHydrated.push(()=>{vi.value=!1,Object.assign(n.platform,$t),Za=void 0}),n.platform=Pt(this)):n.platform=this}};{let i;Ka($t.has,"webStorage",()=>{if(i!==void 0)return i;try{if(window.localStorage)return i=!0,!0}catch{}return i=!1,!1}),$t.is.ios===!0&&window.navigator.vendor.toLowerCase().indexOf("apple"),vi.value===!0?Object.assign(ro,$t,Za,lm):Object.assign(ro,$t)}const xl=i=>xi(Vn(i)),jy=i=>xi(i);function bc(i,n){const s=i.style;for(const l in n)s[l]=n[l]}function cm(i){if(i==null)return;if(typeof i=="string")try{return document.querySelector(i)||void 0}catch{return}const n=Ke(i)===!0?i.value:i;if(n)return n.$el||n}function Gy(i,n){if(i==null||i.contains(n)===!0)return!0;for(let s=i.nextElementSibling;s!==null;s=s.nextElementSibling)if(s.contains(n))return!0;return!1}const hm=[null,document,document.body,document.scrollingElement,document.documentElement];function um(i,n){let s=cm(n);if(s===void 0){if(i==null)return window;s=i.closest(".scroll,.scroll-y,.overflow-auto")}return hm.includes(s)?window:s}function Ju(i){return i===window?window.pageYOffset||window.scrollY||document.body.scrollTop||0:i.scrollTop}function Qu(i){return i===window?window.pageXOffset||window.scrollX||document.body.scrollLeft||0:i.scrollLeft}function ed(i,n,s=0){const l=arguments[3]===void 0?performance.now():arguments[3],u=Ju(i);if(s<=0){u!==n&&ao(i,n);return}requestAnimationFrame(f=>{const v=f-l,b=u+(n-u)/Math.max(v,s)*v;ao(i,b),b!==n&&ed(i,n,s-v,f)})}function td(i,n,s=0){const l=arguments[3]===void 0?performance.now():arguments[3],u=Qu(i);if(s<=0){u!==n&&so(i,n);return}requestAnimationFrame(f=>{const v=f-l,b=u+(n-u)/Math.max(v,s)*v;so(i,b),b!==n&&td(i,n,s-v,f)})}function ao(i,n){if(i===window){window.scrollTo(window.pageXOffset||window.scrollX||document.body.scrollLeft||0,n);return}i.scrollTop=n}function so(i,n){if(i===window){window.scrollTo(n,window.pageYOffset||window.scrollY||document.body.scrollTop||0);return}i.scrollLeft=n}function Uy(i,n,s){if(s){ed(i,n,s);return}ao(i,n)}function qy(i,n,s){if(s){td(i,n,s);return}so(i,n)}let Jr;function As(){if(Jr!==void 0)return Jr;const i=document.createElement("p"),n=document.createElement("div");bc(i,{width:"100%",height:"200px"}),bc(n,{position:"absolute",top:"0px",left:"0px",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),n.appendChild(i),document.body.appendChild(n);const s=i.offsetWidth;n.style.overflow="scroll";let l=i.offsetWidth;return s===l&&(l=n.clientWidth),n.remove(),Jr=s-l,Jr}function $y(i,n=!0){return!i||i.nodeType!==Node.ELEMENT_NODE?!1:n?i.scrollHeight>i.clientHeight&&(i.classList.contains("scroll")||i.classList.contains("overflow-auto")||["auto","scroll"].includes(window.getComputedStyle(i)["overflow-y"])):i.scrollWidth>i.clientWidth&&(i.classList.contains("scroll")||i.classList.contains("overflow-auto")||["auto","scroll"].includes(window.getComputedStyle(i)["overflow-x"]))}const bi={hasPassive:!1,passiveCapture:!0,notPassiveCapture:!0};try{const i=Object.defineProperty({},"passive",{get(){Object.assign(bi,{hasPassive:!0,passive:{passive:!0},notPassive:{passive:!1},passiveCapture:{passive:!0,capture:!0},notPassiveCapture:{passive:!1,capture:!0}})}});window.addEventListener("qtest",null,i),window.removeEventListener("qtest",null,i)}catch{}function rn(){}function Ky(i){return i.button===0}function Zy(i){return i.touches&&i.touches[0]?i=i.touches[0]:i.changedTouches&&i.changedTouches[0]?i=i.changedTouches[0]:i.targetTouches&&i.targetTouches[0]&&(i=i.targetTouches[0]),{top:i.clientY,left:i.clientX}}function Jy(i){if(i.path)return i.path;if(i.composedPath)return i.composedPath();const n=[];let s=i.target;for(;s;){if(n.push(s),s.tagName==="HTML")return n.push(document),n.push(window),n;s=s.parentElement}}function Qy(i){i.stopPropagation()}function yc(i){i.cancelable!==!1&&i.preventDefault()}function e0(i){i.cancelable!==!1&&i.preventDefault(),i.stopPropagation()}function t0(i,n){if(i===void 0||n===!0&&i.__dragPrevented===!0)return;const s=n===!0?l=>{l.__dragPrevented=!0,l.addEventListener("dragstart",yc,bi.notPassiveCapture)}:l=>{delete l.__dragPrevented,l.removeEventListener("dragstart",yc,bi.notPassiveCapture)};i.querySelectorAll("a, img").forEach(s)}function i0(i,n,s){const l=`__q_${n}_evt`;i[l]=i[l]!==void 0?i[l].concat(s):s,s.forEach(u=>{u[0].addEventListener(u[1],i[u[2]],bi[u[3]])})}function n0(i,n){const s=`__q_${n}_evt`;i[s]!==void 0&&(i[s].forEach(l=>{l[0].removeEventListener(l[1],i[l[2]],bi[l[3]])}),i[s]=void 0)}const{passive:wc}=bi,dm=["both","horizontal","vertical"];var fm=xl({name:"QScrollObserver",props:{axis:{type:String,validator:i=>dm.includes(i),default:"vertical"},debounce:[String,Number],scrollTarget:{default:void 0}},emits:["scroll"],setup(i,{emit:n}){const s={position:{top:0,left:0},direction:"down",directionChanged:!1,delta:{top:0,left:0},inflectionPoint:{top:0,left:0}};let l=null,u,f;di(()=>i.scrollTarget,()=>{k(),b()});function v(){l!==null&&l();const N=Math.max(0,Ju(u)),O=Qu(u),z={top:N-s.position.top,left:O-s.position.left};if(i.axis==="vertical"&&z.top===0||i.axis==="horizontal"&&z.left===0)return;const j=Math.abs(z.top)>=Math.abs(z.left)?z.top<0?"up":"down":z.left<0?"left":"right";s.position={top:N,left:O},s.directionChanged=s.direction!==j,s.delta=z,s.directionChanged===!0&&(s.direction=j,s.inflectionPoint=s.position),n("scroll",dn({},s))}function b(){u=um(f,i.scrollTarget),u.addEventListener("scroll",S,wc),S(!0)}function k(){u!==void 0&&(u.removeEventListener("scroll",S,wc),u=void 0)}function S(N){if(N===!0||i.debounce===0||i.debounce==="0")v();else if(l===null){const[O,z]=i.debounce?[setTimeout(v,i.debounce),clearTimeout]:[requestAnimationFrame(v),cancelAnimationFrame];l=()=>{z(O),l=null}}}const I=Ht();return mi(()=>{f=I.proxy.$el.parentNode,b()}),nn(()=>{l!==null&&l(),k()}),Object.assign(I.proxy,{trigger:S,getPosition:()=>s}),rn}});function pm(){const i=Ge(!vi.value);return i.value===!1&&mi(()=>{i.value=!0}),i}const id=typeof ResizeObserver!="undefined",kc=id===!0?{}:{style:"display:block;position:absolute;top:0;left:0;right:0;bottom:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:-1;",url:"about:blank"};var Ac=xl({name:"QResizeObserver",props:{debounce:{type:[String,Number],default:100}},emits:["resize"],setup(i,{emit:n}){let s=null,l,u={width:-1,height:-1};function f(k){k===!0||i.debounce===0||i.debounce==="0"?v():s===null&&(s=setTimeout(v,i.debounce))}function v(){if(clearTimeout(s),s=null,l){const{offsetWidth:k,offsetHeight:S}=l;(k!==u.width||S!==u.height)&&(u={width:k,height:S},n("resize",u))}}const b=Ht();if(Object.assign(b.proxy,{trigger:f}),id===!0){let k;return mi(()=>{en(()=>{l=b.proxy.$el.parentNode,l&&(k=new ResizeObserver(f),k.observe(l),v())})}),nn(()=>{clearTimeout(s),k!==void 0&&(k.disconnect!==void 0?k.disconnect():l&&k.unobserve(l))}),rn}else{let I=function(){clearTimeout(s),S!==void 0&&(S.removeEventListener!==void 0&&S.removeEventListener("resize",f,bi.passive),S=void 0)},N=function(){I(),l&&l.contentDocument&&(S=l.contentDocument.defaultView,S.addEventListener("resize",f,bi.passive),v())};const k=pm();let S;return mi(()=>{en(()=>{l=b.proxy.$el,l&&N()})}),nn(I),()=>{if(k.value===!0)return _t("object",{style:kc.style,tabindex:-1,type:"text/html",data:kc.url,"aria-hidden":"true",onLoad:N})}}}});function r0(i,n){return i!==void 0&&i()||n}function a0(i,n){if(i!==void 0){const s=i();if(s!=null)return s.slice()}return n}function gm(i,n){return i!==void 0?n.concat(i()):n}function s0(i,n){return i===void 0?n:n!==void 0?n.concat(i()):i()}function o0(i,n,s,l,u,f){n.key=l+u;const v=_t(i,n,s);return u===!0?fu(v,f()):v}const xm="_q_",mm="_q_l_",l0="_q_pc_",c0="_q_fo_";var h0=xl({name:"QLayout",props:{container:Boolean,view:{type:String,default:"hhh lpr fff",validator:i=>/^(h|l)h(h|r) lpr (f|l)f(f|r)$/.test(i.toLowerCase())},onScroll:Function,onScrollHeight:Function,onResize:Function},setup(i,{slots:n,emit:s}){const{proxy:{$q:l}}=Ht(),u=Ge(null),f=Ge(l.screen.height),v=Ge(i.container===!0?0:l.screen.width),b=Ge({position:0,direction:"down",inflectionPoint:0}),k=Ge(0),S=Ge(vi.value===!0?0:As()),I=ht(()=>"q-layout q-layout--"+(i.container===!0?"containerized":"standard")),N=ht(()=>i.container===!1?{minHeight:l.screen.height+"px"}:null),O=ht(()=>S.value!==0?{[l.lang.rtl===!0?"left":"right"]:`${S.value}px`}:null),z=ht(()=>S.value!==0?{[l.lang.rtl===!0?"right":"left"]:0,[l.lang.rtl===!0?"left":"right"]:`-${S.value}px`,width:`calc(100% + ${S.value}px)`}:null);function j(H){if(i.container===!0||document.qScrollPrevented!==!0){const X={position:H.position.top,direction:H.direction,directionChanged:H.directionChanged,inflectionPoint:H.inflectionPoint.top,delta:H.delta.top};b.value=X,i.onScroll!==void 0&&s("scroll",X)}}function K(H){const{height:X,width:Z}=H;let U=!1;f.value!==X&&(U=!0,f.value=X,i.onScrollHeight!==void 0&&s("scroll-height",X),Y()),v.value!==Z&&(U=!0,v.value=Z),U===!0&&i.onResize!==void 0&&s("resize",H)}function B({height:H}){k.value!==H&&(k.value=H,Y())}function Y(){if(i.container===!0){const H=f.value>k.value?As():0;S.value!==H&&(S.value=H)}}let P;const q={instances:{},view:ht(()=>i.view),isContainer:ht(()=>i.container),rootRef:u,height:f,containerHeight:k,scrollbarWidth:S,totalWidth:ht(()=>v.value+S.value),rows:ht(()=>{const H=i.view.toLowerCase().split(" ");return{top:H[0].split(""),middle:H[1].split(""),bottom:H[2].split("")}}),header:Pt({size:0,offset:0,space:!1}),right:Pt({size:300,offset:0,space:!1}),footer:Pt({size:0,offset:0,space:!1}),left:Pt({size:300,offset:0,space:!1}),scroll:b,animate(){P!==void 0?clearTimeout(P):document.body.classList.add("q-body--layout-animate"),P=setTimeout(()=>{document.body.classList.remove("q-body--layout-animate"),P=void 0},155)},update(H,X,Z){q[H][X]=Z}};if(Cn(mm,q),As()>0){let Z=function(){H=null,X.classList.remove("hide-scrollbar")},U=function(){if(H===null){if(X.scrollHeight>l.screen.height)return;X.classList.add("hide-scrollbar")}else clearTimeout(H);H=setTimeout(Z,300)},te=function(le){H!==null&&le==="remove"&&(clearTimeout(H),Z()),window[`${le}EventListener`]("resize",U)},H=null;const X=document.body;di(()=>i.container!==!0?"add":"remove",te),i.container!==!0&&te("add"),jn(()=>{te("remove")})}return()=>{const H=gm(n.default,[_t(fm,{onScroll:j}),_t(Ac,{onResize:K})]),X=_t("div",{class:I.value,style:N.value,ref:i.container===!0?void 0:u},H);return i.container===!0?_t("div",{class:"q-layout-container overflow-hidden",ref:u},[_t(Ac,{onResize:B}),_t("div",{class:"absolute-full",style:O.value},[_t("div",{class:"scroll",style:z.value},[X])])]):X}}}),vm=!1;/*!
  * pinia v2.0.12
  * (c) 2022 Eduardo San Martin Morote
  * @license MIT
  */let nd;const Ja=i=>nd=i,rd=Symbol();function oo(i){return i&&typeof i=="object"&&Object.prototype.toString.call(i)==="[object Object]"&&typeof i.toJSON!="function"}var xr;(function(i){i.direct="direct",i.patchObject="patch object",i.patchFunction="patch function"})(xr||(xr={}));function u0(){const i=zo(!0),n=i.run(()=>Ge({}));let s=[],l=[];const u=xi({install(f){Ja(u),u._a=f,f.provide(rd,u),f.config.globalProperties.$pinia=u,l.forEach(v=>s.push(v)),l=[]},use(f){return!this._a&&!vm?l.push(f):s.push(f),this},_p:s,_a:null,_e:i,_s:new Map,state:n});return u}const ad=()=>{};function Sc(i,n,s,l=ad){i.push(n);const u=()=>{const f=i.indexOf(n);f>-1&&(i.splice(f,1),l())};return!s&&Ht()&&jn(u),u}function fn(i,...n){i.slice().forEach(s=>{s(...n)})}function lo(i,n){for(const s in n){const l=n[s],u=i[s];oo(u)&&oo(l)&&!Ke(l)&&!ni(l)?i[s]=lo(u,l):i[s]=l}return i}const bm=Symbol();function ym(i){return!oo(i)||!i.hasOwnProperty(bm)}const{assign:ci}=Object;function wm(i){return!!(Ke(i)&&i.effect)}function km(i,n,s,l){const{state:u,actions:f,getters:v}=n,b=s.state.value[i];let k;function S(){b||(s.state.value[i]=u?u():{});const I=zh(s.state.value[i]);return ci(I,f,Object.keys(v||{}).reduce((N,O)=>(N[O]=xi(ht(()=>{Ja(s);const z=s._s.get(i);return v[O].call(z,z)})),N),{}))}return k=sd(i,S,n,s),k.$reset=function(){const N=u?u():{};this.$patch(O=>{ci(O,N)})},k}function sd(i,n,s={},l,u){let f;const v=s.state,b=ci({actions:{}},s),k={deep:!0};let S,I,N=xi([]),O=xi([]),z;const j=l.state.value[i];!v&&!j&&(l.state.value[i]={}),Ge({});function K(Z){let U;S=I=!1,typeof Z=="function"?(Z(l.state.value[i]),U={type:xr.patchFunction,storeId:i,events:z}):(lo(l.state.value[i],Z),U={type:xr.patchObject,payload:Z,storeId:i,events:z}),en().then(()=>{S=!0}),I=!0,fn(N,U,l.state.value[i])}const B=ad;function Y(){f.stop(),N=[],O=[],l._s.delete(i)}function P(Z,U){return function(){Ja(l);const te=Array.from(arguments),le=[],pe=[];function ve(he){le.push(he)}function ne(he){pe.push(he)}fn(O,{args:te,name:Z,store:H,after:ve,onError:ne});let Ae;try{Ae=U.apply(this&&this.$id===i?this:H,te)}catch(he){throw fn(pe,he),he}return Ae instanceof Promise?Ae.then(he=>(fn(le,he),he)).catch(he=>(fn(pe,he),Promise.reject(he))):(fn(le,Ae),Ae)}}const q={_p:l,$id:i,$onAction:Sc.bind(null,O),$patch:K,$reset:B,$subscribe(Z,U={}){const te=Sc(N,Z,U.detached,()=>le()),le=f.run(()=>di(()=>l.state.value[i],pe=>{(U.flush==="sync"?I:S)&&Z({storeId:i,type:xr.direct,events:z},pe)},ci({},k,U)));return te},$dispose:Y},H=Pt(ci({},q));l._s.set(i,H);const X=l._e.run(()=>(f=zo(),f.run(()=>n())));for(const Z in X){const U=X[Z];if(Ke(U)&&!wm(U)||ni(U))v||(j&&ym(U)&&(Ke(U)?U.value=j[Z]:lo(U,j[Z])),l.state.value[i][Z]=U);else if(typeof U=="function"){const te=P(Z,U);X[Z]=te,b.actions[Z]=U}}return ci(H,X),ci(Xe(H),X),Object.defineProperty(H,"$state",{get:()=>l.state.value[i],set:Z=>{K(U=>{ci(U,Z)})}}),l._p.forEach(Z=>{ci(H,f.run(()=>Z({store:H,app:l._a,pinia:l,options:b})))}),j&&v&&s.hydrate&&s.hydrate(H.$state,j),S=!0,I=!0,H}function d0(i,n,s){let l,u;const f=typeof n=="function";typeof i=="string"?(l=i,u=f?s:n):(u=i,l=i.id);function v(b,k){const S=Ht();return b=b||S&&Lt(rd),b&&Ja(b),b=nd,b._s.has(l)||(f?sd(l,n,u,b):km(l,u,b)),b._s.get(l)}return v.$id=l,v}function f0(i){i=Xe(i);const n={};for(const s in i){const l=i[s];(Ke(l)||ni(l))&&(n[s]=Uo(i,s))}return n}function Am(i,n){return n.reduce((s,l)=>s==null?void 0:s[l],i)}function Sm(i,n,s){return n.slice(0,-1).reduce((l,u)=>/^(__proto__)$/.test(u)?{}:l[u]=l[u]||{},i)[n[n.length-1]]=s,i}function Cm(i,n){return n.reduce((s,l)=>{const u=l.split(".");return Sm(s,u,Am(i,u))},{})}function Em(i={}){return function(n){var s,l,u,f;const{options:{persist:v},store:b}=n;if(!v)return;const{storage:k=(s=i.storage)!=null?s:localStorage,beforeRestore:S=(l=i.beforeRestore)!=null?l:null,afterRestore:I=(u=i.afterRestore)!=null?u:null,serializer:N=(f=i.serializer)!=null?f:{serialize:JSON.stringify,deserialize:JSON.parse},key:O=b.$id,paths:z=null}=typeof v!="boolean"?v:{};S==null||S(n);try{const j=k.getItem(O);j&&b.$patch(N.deserialize(j))}catch{}I==null||I(n),b.$subscribe((j,K)=>{try{const B=Array.isArray(z)?Cm(K,z):K;k.setItem(O,N.serialize(B))}catch{}},{detached:!0})}}var p0=Em();/*!
  * vue-router v4.0.14
  * (c) 2022 Eduardo San Martin Morote
  * @license MIT
  */const od=typeof Symbol=="function"&&typeof Symbol.toStringTag=="symbol",Gn=i=>od?Symbol(i):"_vr_"+i,Tm=Gn("rvlm"),Cc=Gn("rvd"),Qa=Gn("r"),ml=Gn("rl"),co=Gn("rvl"),vn=typeof window!="undefined";function Pm(i){return i.__esModule||od&&i[Symbol.toStringTag]==="Module"}const Je=Object.assign;function Ss(i,n){const s={};for(const l in n){const u=n[l];s[l]=Array.isArray(u)?u.map(i):i(u)}return s}const mr=()=>{},Lm=/\/$/,Im=i=>i.replace(Lm,"");function Cs(i,n,s="/"){let l,u={},f="",v="";const b=n.indexOf("?"),k=n.indexOf("#",b>-1?b:0);return b>-1&&(l=n.slice(0,b),f=n.slice(b+1,k>-1?k:n.length),u=i(f)),k>-1&&(l=l||n.slice(0,k),v=n.slice(k,n.length)),l=Nm(l!=null?l:n,s),{fullPath:l+(f&&"?")+f+v,path:l,query:u,hash:v}}function _m(i,n){const s=n.query?i(n.query):"";return n.path+(s&&"?")+s+(n.hash||"")}function Ec(i,n){return!n||!i.toLowerCase().startsWith(n.toLowerCase())?i:i.slice(n.length)||"/"}function Om(i,n,s){const l=n.matched.length-1,u=s.matched.length-1;return l>-1&&l===u&&On(n.matched[l],s.matched[u])&&ld(n.params,s.params)&&i(n.query)===i(s.query)&&n.hash===s.hash}function On(i,n){return(i.aliasOf||i)===(n.aliasOf||n)}function ld(i,n){if(Object.keys(i).length!==Object.keys(n).length)return!1;for(const s in i)if(!Mm(i[s],n[s]))return!1;return!0}function Mm(i,n){return Array.isArray(i)?Tc(i,n):Array.isArray(n)?Tc(n,i):i===n}function Tc(i,n){return Array.isArray(n)?i.length===n.length&&i.every((s,l)=>s===n[l]):i.length===1&&i[0]===n}function Nm(i,n){if(i.startsWith("/"))return i;if(!i)return n;const s=n.split("/"),l=i.split("/");let u=s.length-1,f,v;for(f=0;f<l.length;f++)if(v=l[f],!(u===1||v==="."))if(v==="..")u--;else break;return s.slice(0,u).join("/")+"/"+l.slice(f-(f===l.length?1:0)).join("/")}var Cr;(function(i){i.pop="pop",i.push="push"})(Cr||(Cr={}));var vr;(function(i){i.back="back",i.forward="forward",i.unknown=""})(vr||(vr={}));function Rm(i){if(!i)if(vn){const n=document.querySelector("base");i=n&&n.getAttribute("href")||"/",i=i.replace(/^\w+:\/\/[^\/]+/,"")}else i="/";return i[0]!=="/"&&i[0]!=="#"&&(i="/"+i),Im(i)}const Fm=/^[^#]+#/;function Dm(i,n){return i.replace(Fm,"#")+n}function zm(i,n){const s=document.documentElement.getBoundingClientRect(),l=i.getBoundingClientRect();return{behavior:n.behavior,left:l.left-s.left-(n.left||0),top:l.top-s.top-(n.top||0)}}const es=()=>({left:window.pageXOffset,top:window.pageYOffset});function Xm(i){let n;if("el"in i){const s=i.el,l=typeof s=="string"&&s.startsWith("#"),u=typeof s=="string"?l?document.getElementById(s.slice(1)):document.querySelector(s):s;if(!u)return;n=zm(u,i)}else n=i;"scrollBehavior"in document.documentElement.style?window.scrollTo(n):window.scrollTo(n.left!=null?n.left:window.pageXOffset,n.top!=null?n.top:window.pageYOffset)}function Pc(i,n){return(history.state?history.state.position-n:-1)+i}const ho=new Map;function Hm(i,n){ho.set(i,n)}function Ym(i){const n=ho.get(i);return ho.delete(i),n}let Bm=()=>location.protocol+"//"+location.host;function cd(i,n){const{pathname:s,search:l,hash:u}=n,f=i.indexOf("#");if(f>-1){let b=u.includes(i.slice(f))?i.slice(f).length:1,k=u.slice(b);return k[0]!=="/"&&(k="/"+k),Ec(k,"")}return Ec(s,i)+l+u}function Wm(i,n,s,l){let u=[],f=[],v=null;const b=({state:O})=>{const z=cd(i,location),j=s.value,K=n.value;let B=0;if(O){if(s.value=z,n.value=O,v&&v===j){v=null;return}B=K?O.position-K.position:0}else l(z);u.forEach(Y=>{Y(s.value,j,{delta:B,type:Cr.pop,direction:B?B>0?vr.forward:vr.back:vr.unknown})})};function k(){v=s.value}function S(O){u.push(O);const z=()=>{const j=u.indexOf(O);j>-1&&u.splice(j,1)};return f.push(z),z}function I(){const{history:O}=window;!O.state||O.replaceState(Je({},O.state,{scroll:es()}),"")}function N(){for(const O of f)O();f=[],window.removeEventListener("popstate",b),window.removeEventListener("beforeunload",I)}return window.addEventListener("popstate",b),window.addEventListener("beforeunload",I),{pauseListeners:k,listen:S,destroy:N}}function Lc(i,n,s,l=!1,u=!1){return{back:i,current:n,forward:s,replaced:l,position:window.history.length,scroll:u?es():null}}function Vm(i){const{history:n,location:s}=window,l={value:cd(i,s)},u={value:n.state};u.value||f(l.value,{back:null,current:l.value,forward:null,position:n.length-1,replaced:!0,scroll:null},!0);function f(k,S,I){const N=i.indexOf("#"),O=N>-1?(s.host&&document.querySelector("base")?i:i.slice(N))+k:Bm()+i+k;try{n[I?"replaceState":"pushState"](S,"",O),u.value=S}catch(z){console.error(z),s[I?"replace":"assign"](O)}}function v(k,S){const I=Je({},n.state,Lc(u.value.back,k,u.value.forward,!0),S,{position:u.value.position});f(k,I,!0),l.value=k}function b(k,S){const I=Je({},u.value,n.state,{forward:k,scroll:es()});f(I.current,I,!0);const N=Je({},Lc(l.value,k,null),{position:I.position+1},S);f(k,N,!1),l.value=k}return{location:l,state:u,push:b,replace:v}}function g0(i){i=Rm(i);const n=Vm(i),s=Wm(i,n.state,n.location,n.replace);function l(f,v=!0){v||s.pauseListeners(),history.go(f)}const u=Je({location:"",base:i,go:l,createHref:Dm.bind(null,i)},n,s);return Object.defineProperty(u,"location",{enumerable:!0,get:()=>n.location.value}),Object.defineProperty(u,"state",{enumerable:!0,get:()=>n.state.value}),u}function jm(i){return typeof i=="string"||i&&typeof i=="object"}function hd(i){return typeof i=="string"||typeof i=="symbol"}const Ti={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},ud=Gn("nf");var Ic;(function(i){i[i.aborted=4]="aborted",i[i.cancelled=8]="cancelled",i[i.duplicated=16]="duplicated"})(Ic||(Ic={}));function Mn(i,n){return Je(new Error,{type:i,[ud]:!0},n)}function Pi(i,n){return i instanceof Error&&ud in i&&(n==null||!!(i.type&n))}const _c="[^/]+?",Gm={sensitive:!1,strict:!1,start:!0,end:!0},Um=/[.+*?^${}()[\]/\\]/g;function qm(i,n){const s=Je({},Gm,n),l=[];let u=s.start?"^":"";const f=[];for(const S of i){const I=S.length?[]:[90];s.strict&&!S.length&&(u+="/");for(let N=0;N<S.length;N++){const O=S[N];let z=40+(s.sensitive?.25:0);if(O.type===0)N||(u+="/"),u+=O.value.replace(Um,"\\$&"),z+=40;else if(O.type===1){const{value:j,repeatable:K,optional:B,regexp:Y}=O;f.push({name:j,repeatable:K,optional:B});const P=Y||_c;if(P!==_c){z+=10;try{new RegExp(`(${P})`)}catch(H){throw new Error(`Invalid custom RegExp for param "${j}" (${P}): `+H.message)}}let q=K?`((?:${P})(?:/(?:${P}))*)`:`(${P})`;N||(q=B&&S.length<2?`(?:/${q})`:"/"+q),B&&(q+="?"),u+=q,z+=20,B&&(z+=-8),K&&(z+=-20),P===".*"&&(z+=-50)}I.push(z)}l.push(I)}if(s.strict&&s.end){const S=l.length-1;l[S][l[S].length-1]+=.7000000000000001}s.strict||(u+="/?"),s.end?u+="$":s.strict&&(u+="(?:/|$)");const v=new RegExp(u,s.sensitive?"":"i");function b(S){const I=S.match(v),N={};if(!I)return null;for(let O=1;O<I.length;O++){const z=I[O]||"",j=f[O-1];N[j.name]=z&&j.repeatable?z.split("/"):z}return N}function k(S){let I="",N=!1;for(const O of i){(!N||!I.endsWith("/"))&&(I+="/"),N=!1;for(const z of O)if(z.type===0)I+=z.value;else if(z.type===1){const{value:j,repeatable:K,optional:B}=z,Y=j in S?S[j]:"";if(Array.isArray(Y)&&!K)throw new Error(`Provided param "${j}" is an array but it is not repeatable (* or + modifiers)`);const P=Array.isArray(Y)?Y.join("/"):Y;if(!P)if(B)O.length<2&&(I.endsWith("/")?I=I.slice(0,-1):N=!0);else throw new Error(`Missing required param "${j}"`);I+=P}}return I}return{re:v,score:l,keys:f,parse:b,stringify:k}}function $m(i,n){let s=0;for(;s<i.length&&s<n.length;){const l=n[s]-i[s];if(l)return l;s++}return i.length<n.length?i.length===1&&i[0]===40+40?-1:1:i.length>n.length?n.length===1&&n[0]===40+40?1:-1:0}function Km(i,n){let s=0;const l=i.score,u=n.score;for(;s<l.length&&s<u.length;){const f=$m(l[s],u[s]);if(f)return f;s++}return u.length-l.length}const Zm={type:0,value:""},Jm=/[a-zA-Z0-9_]/;function Qm(i){if(!i)return[[]];if(i==="/")return[[Zm]];if(!i.startsWith("/"))throw new Error(`Invalid path "${i}"`);function n(z){throw new Error(`ERR (${s})/"${S}": ${z}`)}let s=0,l=s;const u=[];let f;function v(){f&&u.push(f),f=[]}let b=0,k,S="",I="";function N(){!S||(s===0?f.push({type:0,value:S}):s===1||s===2||s===3?(f.length>1&&(k==="*"||k==="+")&&n(`A repeatable param (${S}) must be alone in its segment. eg: '/:ids+.`),f.push({type:1,value:S,regexp:I,repeatable:k==="*"||k==="+",optional:k==="*"||k==="?"})):n("Invalid state to consume buffer"),S="")}function O(){S+=k}for(;b<i.length;){if(k=i[b++],k==="\\"&&s!==2){l=s,s=4;continue}switch(s){case 0:k==="/"?(S&&N(),v()):k===":"?(N(),s=1):O();break;case 4:O(),s=l;break;case 1:k==="("?s=2:Jm.test(k)?O():(N(),s=0,k!=="*"&&k!=="?"&&k!=="+"&&b--);break;case 2:k===")"?I[I.length-1]=="\\"?I=I.slice(0,-1)+k:s=3:I+=k;break;case 3:N(),s=0,k!=="*"&&k!=="?"&&k!=="+"&&b--,I="";break;default:n("Unknown state");break}}return s===2&&n(`Unfinished custom RegExp for param "${S}"`),N(),v(),u}function ev(i,n,s){const l=qm(Qm(i.path),s),u=Je(l,{record:i,parent:n,children:[],alias:[]});return n&&!u.record.aliasOf==!n.record.aliasOf&&n.children.push(u),u}function tv(i,n){const s=[],l=new Map;n=Mc({strict:!1,end:!0,sensitive:!1},n);function u(I){return l.get(I)}function f(I,N,O){const z=!O,j=nv(I);j.aliasOf=O&&O.record;const K=Mc(n,I),B=[j];if("alias"in I){const q=typeof I.alias=="string"?[I.alias]:I.alias;for(const H of q)B.push(Je({},j,{components:O?O.record.components:j.components,path:H,aliasOf:O?O.record:j}))}let Y,P;for(const q of B){const{path:H}=q;if(N&&H[0]!=="/"){const X=N.record.path,Z=X[X.length-1]==="/"?"":"/";q.path=N.record.path+(H&&Z+H)}if(Y=ev(q,N,K),O?O.alias.push(Y):(P=P||Y,P!==Y&&P.alias.push(Y),z&&I.name&&!Oc(Y)&&v(I.name)),"children"in j){const X=j.children;for(let Z=0;Z<X.length;Z++)f(X[Z],Y,O&&O.children[Z])}O=O||Y,k(Y)}return P?()=>{v(P)}:mr}function v(I){if(hd(I)){const N=l.get(I);N&&(l.delete(I),s.splice(s.indexOf(N),1),N.children.forEach(v),N.alias.forEach(v))}else{const N=s.indexOf(I);N>-1&&(s.splice(N,1),I.record.name&&l.delete(I.record.name),I.children.forEach(v),I.alias.forEach(v))}}function b(){return s}function k(I){let N=0;for(;N<s.length&&Km(I,s[N])>=0&&(I.record.path!==s[N].record.path||!dd(I,s[N]));)N++;s.splice(N,0,I),I.record.name&&!Oc(I)&&l.set(I.record.name,I)}function S(I,N){let O,z={},j,K;if("name"in I&&I.name){if(O=l.get(I.name),!O)throw Mn(1,{location:I});K=O.record.name,z=Je(iv(N.params,O.keys.filter(P=>!P.optional).map(P=>P.name)),I.params),j=O.stringify(z)}else if("path"in I)j=I.path,O=s.find(P=>P.re.test(j)),O&&(z=O.parse(j),K=O.record.name);else{if(O=N.name?l.get(N.name):s.find(P=>P.re.test(N.path)),!O)throw Mn(1,{location:I,currentLocation:N});K=O.record.name,z=Je({},N.params,I.params),j=O.stringify(z)}const B=[];let Y=O;for(;Y;)B.unshift(Y.record),Y=Y.parent;return{name:K,path:j,params:z,matched:B,meta:av(B)}}return i.forEach(I=>f(I)),{addRoute:f,resolve:S,removeRoute:v,getRoutes:b,getRecordMatcher:u}}function iv(i,n){const s={};for(const l of n)l in i&&(s[l]=i[l]);return s}function nv(i){return{path:i.path,redirect:i.redirect,name:i.name,meta:i.meta||{},aliasOf:void 0,beforeEnter:i.beforeEnter,props:rv(i),children:i.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in i?i.components||{}:{default:i.component}}}function rv(i){const n={},s=i.props||!1;if("component"in i)n.default=s;else for(const l in i.components)n[l]=typeof s=="boolean"?s:s[l];return n}function Oc(i){for(;i;){if(i.record.aliasOf)return!0;i=i.parent}return!1}function av(i){return i.reduce((n,s)=>Je(n,s.meta),{})}function Mc(i,n){const s={};for(const l in i)s[l]=l in n?n[l]:i[l];return s}function dd(i,n){return n.children.some(s=>s===i||dd(i,s))}const fd=/#/g,sv=/&/g,ov=/\//g,lv=/=/g,cv=/\?/g,pd=/\+/g,hv=/%5B/g,uv=/%5D/g,gd=/%5E/g,dv=/%60/g,xd=/%7B/g,fv=/%7C/g,md=/%7D/g,pv=/%20/g;function vl(i){return encodeURI(""+i).replace(fv,"|").replace(hv,"[").replace(uv,"]")}function gv(i){return vl(i).replace(xd,"{").replace(md,"}").replace(gd,"^")}function uo(i){return vl(i).replace(pd,"%2B").replace(pv,"+").replace(fd,"%23").replace(sv,"%26").replace(dv,"`").replace(xd,"{").replace(md,"}").replace(gd,"^")}function xv(i){return uo(i).replace(lv,"%3D")}function mv(i){return vl(i).replace(fd,"%23").replace(cv,"%3F")}function vv(i){return i==null?"":mv(i).replace(ov,"%2F")}function Ca(i){try{return decodeURIComponent(""+i)}catch{}return""+i}function bv(i){const n={};if(i===""||i==="?")return n;const l=(i[0]==="?"?i.slice(1):i).split("&");for(let u=0;u<l.length;++u){const f=l[u].replace(pd," "),v=f.indexOf("="),b=Ca(v<0?f:f.slice(0,v)),k=v<0?null:Ca(f.slice(v+1));if(b in n){let S=n[b];Array.isArray(S)||(S=n[b]=[S]),S.push(k)}else n[b]=k}return n}function Nc(i){let n="";for(let s in i){const l=i[s];if(s=xv(s),l==null){l!==void 0&&(n+=(n.length?"&":"")+s);continue}(Array.isArray(l)?l.map(f=>f&&uo(f)):[l&&uo(l)]).forEach(f=>{f!==void 0&&(n+=(n.length?"&":"")+s,f!=null&&(n+="="+f))})}return n}function yv(i){const n={};for(const s in i){const l=i[s];l!==void 0&&(n[s]=Array.isArray(l)?l.map(u=>u==null?null:""+u):l==null?l:""+l)}return n}function tr(){let i=[];function n(l){return i.push(l),()=>{const u=i.indexOf(l);u>-1&&i.splice(u,1)}}function s(){i=[]}return{add:n,list:()=>i,reset:s}}function _i(i,n,s,l,u){const f=l&&(l.enterCallbacks[u]=l.enterCallbacks[u]||[]);return()=>new Promise((v,b)=>{const k=N=>{N===!1?b(Mn(4,{from:s,to:n})):N instanceof Error?b(N):jm(N)?b(Mn(2,{from:n,to:N})):(f&&l.enterCallbacks[u]===f&&typeof N=="function"&&f.push(N),v())},S=i.call(l&&l.instances[u],n,s,k);let I=Promise.resolve(S);i.length<3&&(I=I.then(k)),I.catch(N=>b(N))})}function Es(i,n,s,l){const u=[];for(const f of i)for(const v in f.components){let b=f.components[v];if(!(n!=="beforeRouteEnter"&&!f.instances[v]))if(wv(b)){const S=(b.__vccOpts||b)[n];S&&u.push(_i(S,s,l,f,v))}else{let k=b();u.push(()=>k.then(S=>{if(!S)return Promise.reject(new Error(`Couldn't resolve component "${v}" at "${f.path}"`));const I=Pm(S)?S.default:S;f.components[v]=I;const O=(I.__vccOpts||I)[n];return O&&_i(O,s,l,f,v)()}))}}return u}function wv(i){return typeof i=="object"||"displayName"in i||"props"in i||"__vccOpts"in i}function Rc(i){const n=Lt(Qa),s=Lt(ml),l=ht(()=>n.resolve(An(i.to))),u=ht(()=>{const{matched:k}=l.value,{length:S}=k,I=k[S-1],N=s.matched;if(!I||!N.length)return-1;const O=N.findIndex(On.bind(null,I));if(O>-1)return O;const z=Fc(k[S-2]);return S>1&&Fc(I)===z&&N[N.length-1].path!==z?N.findIndex(On.bind(null,k[S-2])):O}),f=ht(()=>u.value>-1&&Cv(s.params,l.value.params)),v=ht(()=>u.value>-1&&u.value===s.matched.length-1&&ld(s.params,l.value.params));function b(k={}){return Sv(k)?n[An(i.replace)?"replace":"push"](An(i.to)).catch(mr):Promise.resolve()}return{route:l,href:ht(()=>l.value.href),isActive:f,isExactActive:v,navigate:b}}const kv=Vn({name:"RouterLink",props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Rc,setup(i,{slots:n}){const s=Pt(Rc(i)),{options:l}=Lt(Qa),u=ht(()=>({[Dc(i.activeClass,l.linkActiveClass,"router-link-active")]:s.isActive,[Dc(i.exactActiveClass,l.linkExactActiveClass,"router-link-exact-active")]:s.isExactActive}));return()=>{const f=n.default&&n.default(s);return i.custom?f:_t("a",{"aria-current":s.isExactActive?i.ariaCurrentValue:null,href:s.href,onClick:s.navigate,class:u.value},f)}}}),Av=kv;function Sv(i){if(!(i.metaKey||i.altKey||i.ctrlKey||i.shiftKey)&&!i.defaultPrevented&&!(i.button!==void 0&&i.button!==0)){if(i.currentTarget&&i.currentTarget.getAttribute){const n=i.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return i.preventDefault&&i.preventDefault(),!0}}function Cv(i,n){for(const s in n){const l=n[s],u=i[s];if(typeof l=="string"){if(l!==u)return!1}else if(!Array.isArray(u)||u.length!==l.length||l.some((f,v)=>f!==u[v]))return!1}return!0}function Fc(i){return i?i.aliasOf?i.aliasOf.path:i.path:""}const Dc=(i,n,s)=>i!=null?i:n!=null?n:s,Ev=Vn({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},setup(i,{attrs:n,slots:s}){const l=Lt(co),u=ht(()=>i.route||l.value),f=Lt(Cc,0),v=ht(()=>u.value.matched[f]);Cn(Cc,f+1),Cn(Tm,v),Cn(co,u);const b=Ge();return di(()=>[b.value,v.value,i.name],([k,S,I],[N,O,z])=>{S&&(S.instances[I]=k,O&&O!==S&&k&&k===N&&(S.leaveGuards.size||(S.leaveGuards=O.leaveGuards),S.updateGuards.size||(S.updateGuards=O.updateGuards))),k&&S&&(!O||!On(S,O)||!N)&&(S.enterCallbacks[I]||[]).forEach(j=>j(k))},{flush:"post"}),()=>{const k=u.value,S=v.value,I=S&&S.components[i.name],N=i.name;if(!I)return zc(s.default,{Component:I,route:k});const O=S.props[i.name],z=O?O===!0?k.params:typeof O=="function"?O(k):O:null,K=_t(I,Je({},z,n,{onVnodeUnmounted:B=>{B.component.isUnmounted&&(S.instances[N]=null)},ref:b}));return zc(s.default,{Component:K,route:k})||K}}});function zc(i,n){if(!i)return null;const s=i(n);return s.length===1?s[0]:s}const Tv=Ev;function x0(i){const n=tv(i.routes,i),s=i.parseQuery||bv,l=i.stringifyQuery||Nc,u=i.history,f=tr(),v=tr(),b=tr(),k=Fh(Ti);let S=Ti;vn&&i.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const I=Ss.bind(null,Q=>""+Q),N=Ss.bind(null,vv),O=Ss.bind(null,Ca);function z(Q,ue){let de,be;return hd(Q)?(de=n.getRecordMatcher(Q),be=ue):be=Q,n.addRoute(be,de)}function j(Q){const ue=n.getRecordMatcher(Q);ue&&n.removeRoute(ue)}function K(){return n.getRoutes().map(Q=>Q.record)}function B(Q){return!!n.getRecordMatcher(Q)}function Y(Q,ue){if(ue=Je({},ue||k.value),typeof Q=="string"){const Le=Cs(s,Q,ue.path),W=n.resolve({path:Le.path},ue),$=u.createHref(Le.fullPath);return Je(Le,W,{params:O(W.params),hash:Ca(Le.hash),redirectedFrom:void 0,href:$})}let de;if("path"in Q)de=Je({},Q,{path:Cs(s,Q.path,ue.path).path});else{const Le=Je({},Q.params);for(const W in Le)Le[W]==null&&delete Le[W];de=Je({},Q,{params:N(Q.params)}),ue.params=N(ue.params)}const be=n.resolve(de,ue),ze=Q.hash||"";be.params=I(O(be.params));const De=_m(l,Je({},Q,{hash:gv(ze),path:be.path})),Ie=u.createHref(De);return Je({fullPath:De,hash:ze,query:l===Nc?yv(Q.query):Q.query||{}},be,{redirectedFrom:void 0,href:Ie})}function P(Q){return typeof Q=="string"?Cs(s,Q,k.value.path):Je({},Q)}function q(Q,ue){if(S!==Q)return Mn(8,{from:ue,to:Q})}function H(Q){return U(Q)}function X(Q){return H(Je(P(Q),{replace:!0}))}function Z(Q){const ue=Q.matched[Q.matched.length-1];if(ue&&ue.redirect){const{redirect:de}=ue;let be=typeof de=="function"?de(Q):de;return typeof be=="string"&&(be=be.includes("?")||be.includes("#")?be=P(be):{path:be},be.params={}),Je({query:Q.query,hash:Q.hash,params:Q.params},be)}}function U(Q,ue){const de=S=Y(Q),be=k.value,ze=Q.state,De=Q.force,Ie=Q.replace===!0,Le=Z(de);if(Le)return U(Je(P(Le),{state:ze,force:De,replace:Ie}),ue||de);const W=de;W.redirectedFrom=ue;let $;return!De&&Om(l,be,de)&&($=Mn(16,{to:W,from:be}),Yt(be,be,!0,!1)),($?Promise.resolve($):le(W,be)).catch(ee=>Pi(ee)?Pi(ee,2)?ee:Be(ee):Me(ee,W,be)).then(ee=>{if(ee){if(Pi(ee,2))return U(Je(P(ee.to),{state:ze,force:De,replace:Ie}),ue||W)}else ee=ve(W,be,!0,Ie,ze);return pe(W,be,ee),ee})}function te(Q,ue){const de=q(Q,ue);return de?Promise.reject(de):Promise.resolve()}function le(Q,ue){let de;const[be,ze,De]=Pv(Q,ue);de=Es(be.reverse(),"beforeRouteLeave",Q,ue);for(const Le of be)Le.leaveGuards.forEach(W=>{de.push(_i(W,Q,ue))});const Ie=te.bind(null,Q,ue);return de.push(Ie),pn(de).then(()=>{de=[];for(const Le of f.list())de.push(_i(Le,Q,ue));return de.push(Ie),pn(de)}).then(()=>{de=Es(ze,"beforeRouteUpdate",Q,ue);for(const Le of ze)Le.updateGuards.forEach(W=>{de.push(_i(W,Q,ue))});return de.push(Ie),pn(de)}).then(()=>{de=[];for(const Le of Q.matched)if(Le.beforeEnter&&!ue.matched.includes(Le))if(Array.isArray(Le.beforeEnter))for(const W of Le.beforeEnter)de.push(_i(W,Q,ue));else de.push(_i(Le.beforeEnter,Q,ue));return de.push(Ie),pn(de)}).then(()=>(Q.matched.forEach(Le=>Le.enterCallbacks={}),de=Es(De,"beforeRouteEnter",Q,ue),de.push(Ie),pn(de))).then(()=>{de=[];for(const Le of v.list())de.push(_i(Le,Q,ue));return de.push(Ie),pn(de)}).catch(Le=>Pi(Le,8)?Le:Promise.reject(Le))}function pe(Q,ue,de){for(const be of b.list())be(Q,ue,de)}function ve(Q,ue,de,be,ze){const De=q(Q,ue);if(De)return De;const Ie=ue===Ti,Le=vn?history.state:{};de&&(be||Ie?u.replace(Q.fullPath,Je({scroll:Ie&&Le&&Le.scroll},ze)):u.push(Q.fullPath,ze)),k.value=Q,Yt(Q,ue,de,Ie),Be()}let ne;function Ae(){ne=u.listen((Q,ue,de)=>{const be=Y(Q),ze=Z(be);if(ze){U(Je(ze,{replace:!0}),be).catch(mr);return}S=be;const De=k.value;vn&&Hm(Pc(De.fullPath,de.delta),es()),le(be,De).catch(Ie=>Pi(Ie,12)?Ie:Pi(Ie,2)?(U(Ie.to,be).then(Le=>{Pi(Le,20)&&!de.delta&&de.type===Cr.pop&&u.go(-1,!1)}).catch(mr),Promise.reject()):(de.delta&&u.go(-de.delta,!1),Me(Ie,be,De))).then(Ie=>{Ie=Ie||ve(be,De,!1),Ie&&(de.delta?u.go(-de.delta,!1):de.type===Cr.pop&&Pi(Ie,20)&&u.go(-1,!1)),pe(be,De,Ie)}).catch(mr)})}let he=tr(),Re=tr(),Fe;function Me(Q,ue,de){Be(Q);const be=Re.list();return be.length?be.forEach(ze=>ze(Q,ue,de)):console.error(Q),Promise.reject(Q)}function Ne(){return Fe&&k.value!==Ti?Promise.resolve():new Promise((Q,ue)=>{he.add([Q,ue])})}function Be(Q){return Fe||(Fe=!Q,Ae(),he.list().forEach(([ue,de])=>Q?de(Q):ue()),he.reset()),Q}function Yt(Q,ue,de,be){const{scrollBehavior:ze}=i;if(!vn||!ze)return Promise.resolve();const De=!de&&Ym(Pc(Q.fullPath,0))||(be||!de)&&history.state&&history.state.scroll||null;return en().then(()=>ze(Q,ue,De)).then(Ie=>Ie&&Xm(Ie)).catch(Ie=>Me(Ie,Q,ue))}const nt=Q=>u.go(Q);let je;const st=new Set;return{currentRoute:k,addRoute:z,removeRoute:j,hasRoute:B,getRoutes:K,resolve:Y,options:i,push:H,replace:X,go:nt,back:()=>nt(-1),forward:()=>nt(1),beforeEach:f.add,beforeResolve:v.add,afterEach:b.add,onError:Re.add,isReady:Ne,install(Q){const ue=this;Q.component("RouterLink",Av),Q.component("RouterView",Tv),Q.config.globalProperties.$router=ue,Object.defineProperty(Q.config.globalProperties,"$route",{enumerable:!0,get:()=>An(k)}),vn&&!je&&k.value===Ti&&(je=!0,H(u.location).catch(ze=>{}));const de={};for(const ze in Ti)de[ze]=ht(()=>k.value[ze]);Q.provide(Qa,ue),Q.provide(ml,Pt(de)),Q.provide(co,k);const be=Q.unmount;st.add(Q),Q.unmount=function(){st.delete(Q),st.size<1&&(S=Ti,ne&&ne(),k.value=Ti,je=!1,Fe=!1),be()}}}}function pn(i){return i.reduce((n,s)=>n.then(()=>s()),Promise.resolve())}function Pv(i,n){const s=[],l=[],u=[],f=Math.max(n.matched.length,i.matched.length);for(let v=0;v<f;v++){const b=n.matched[v];b&&(i.matched.find(S=>On(S,b))?l.push(b):s.push(b));const k=i.matched[v];k&&(n.matched.find(S=>On(S,k))||u.push(k))}return[s,l,u]}function m0(){return Lt(Qa)}function v0(){return Lt(ml)}/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */var Ea=function(){return Ea=Object.assign||function(n){for(var s,l=1,u=arguments.length;l<u;l++){s=arguments[l];for(var f in s)Object.prototype.hasOwnProperty.call(s,f)&&(n[f]=s[f])}return n},Ea.apply(this,arguments)};function na(i){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?na=function(s){return typeof s}:na=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},na(i)}function Lv(i){return na(i)=="object"&&i!==null}var vd=typeof Symbol=="function"&&Symbol.toStringTag!=null?Symbol.toStringTag:"@@toStringTag";function fo(i,n){for(var s=/\r\n|[\n\r]/g,l=1,u=n+1,f;(f=s.exec(i.body))&&f.index<n;)l+=1,u=n+1-(f.index+f[0].length);return{line:l,column:u}}function Iv(i){return bd(i.source,fo(i.source,i.start))}function bd(i,n){var s=i.locationOffset.column-1,l=ra(s)+i.body,u=n.line-1,f=i.locationOffset.line-1,v=n.line+f,b=n.line===1?s:0,k=n.column+b,S="".concat(i.name,":").concat(v,":").concat(k,`
`),I=l.split(/\r\n|[\n\r]/g),N=I[u];if(N.length>120){for(var O=Math.floor(k/80),z=k%80,j=[],K=0;K<N.length;K+=80)j.push(N.slice(K,K+80));return S+Xc([["".concat(v),j[0]]].concat(j.slice(1,O+1).map(function(B){return["",B]}),[[" ",ra(z-1)+"^"],["",j[O+1]]]))}return S+Xc([["".concat(v-1),I[u-1]],["".concat(v),N],["",ra(k-1)+"^"],["".concat(v+1),I[u+1]]])}function Xc(i){var n=i.filter(function(l){l[0];var u=l[1];return u!==void 0}),s=Math.max.apply(Math,n.map(function(l){var u=l[0];return u.length}));return n.map(function(l){var u=l[0],f=l[1];return _v(s,u)+(f?" | "+f:" |")}).join(`
`)}function ra(i){return Array(i+1).join(" ")}function _v(i,n){return ra(i-n.length)+n}function aa(i){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?aa=function(s){return typeof s}:aa=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},aa(i)}function Hc(i,n){var s=Object.keys(i);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(i);n&&(l=l.filter(function(u){return Object.getOwnPropertyDescriptor(i,u).enumerable})),s.push.apply(s,l)}return s}function Ov(i){for(var n=1;n<arguments.length;n++){var s=arguments[n]!=null?arguments[n]:{};n%2?Hc(Object(s),!0).forEach(function(l){Mv(i,l,s[l])}):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(s)):Hc(Object(s)).forEach(function(l){Object.defineProperty(i,l,Object.getOwnPropertyDescriptor(s,l))})}return i}function Mv(i,n,s){return n in i?Object.defineProperty(i,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):i[n]=s,i}function Nv(i,n){if(!(i instanceof n))throw new TypeError("Cannot call a class as a function")}function Yc(i,n){for(var s=0;s<n.length;s++){var l=n[s];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(i,l.key,l)}}function Rv(i,n,s){return n&&Yc(i.prototype,n),s&&Yc(i,s),i}function Fv(i,n){if(typeof n!="function"&&n!==null)throw new TypeError("Super expression must either be null or a function");i.prototype=Object.create(n&&n.prototype,{constructor:{value:i,writable:!0,configurable:!0}}),n&&Er(i,n)}function Dv(i){var n=wd();return function(){var l=Tr(i),u;if(n){var f=Tr(this).constructor;u=Reflect.construct(l,arguments,f)}else u=l.apply(this,arguments);return yd(this,u)}}function yd(i,n){return n&&(aa(n)==="object"||typeof n=="function")?n:sr(i)}function sr(i){if(i===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return i}function po(i){var n=typeof Map=="function"?new Map:void 0;return po=function(l){if(l===null||!zv(l))return l;if(typeof l!="function")throw new TypeError("Super expression must either be null or a function");if(typeof n!="undefined"){if(n.has(l))return n.get(l);n.set(l,u)}function u(){return sa(l,arguments,Tr(this).constructor)}return u.prototype=Object.create(l.prototype,{constructor:{value:u,enumerable:!1,writable:!0,configurable:!0}}),Er(u,l)},po(i)}function sa(i,n,s){return wd()?sa=Reflect.construct:sa=function(u,f,v){var b=[null];b.push.apply(b,f);var k=Function.bind.apply(u,b),S=new k;return v&&Er(S,v.prototype),S},sa.apply(null,arguments)}function wd(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch{return!1}}function zv(i){return Function.toString.call(i).indexOf("[native code]")!==-1}function Er(i,n){return Er=Object.setPrototypeOf||function(l,u){return l.__proto__=u,l},Er(i,n)}function Tr(i){return Tr=Object.setPrototypeOf?Object.getPrototypeOf:function(s){return s.__proto__||Object.getPrototypeOf(s)},Tr(i)}var go=function(i){Fv(s,i);var n=Dv(s);function s(l,u,f,v,b,k,S){var I,N,O,z;Nv(this,s),z=n.call(this,l),z.name="GraphQLError",z.originalError=k!=null?k:void 0,z.nodes=Bc(Array.isArray(u)?u:u?[u]:void 0);for(var j=[],K=0,B=(Y=z.nodes)!==null&&Y!==void 0?Y:[];K<B.length;K++){var Y,P=B[K],q=P.loc;q!=null&&j.push(q)}j=Bc(j),z.source=f!=null?f:(I=j)===null||I===void 0?void 0:I[0].source,z.positions=v!=null?v:(N=j)===null||N===void 0?void 0:N.map(function(X){return X.start}),z.locations=v&&f?v.map(function(X){return fo(f,X)}):(O=j)===null||O===void 0?void 0:O.map(function(X){return fo(X.source,X.start)}),z.path=b!=null?b:void 0;var H=k==null?void 0:k.extensions;return S==null&&Lv(H)?z.extensions=Ov({},H):z.extensions=S!=null?S:{},Object.defineProperties(sr(z),{message:{enumerable:!0},locations:{enumerable:z.locations!=null},path:{enumerable:z.path!=null},extensions:{enumerable:z.extensions!=null&&Object.keys(z.extensions).length>0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),k!=null&&k.stack?(Object.defineProperty(sr(z),"stack",{value:k.stack,writable:!0,configurable:!0}),yd(z)):(Error.captureStackTrace?Error.captureStackTrace(sr(z),s):Object.defineProperty(sr(z),"stack",{value:Error().stack,writable:!0,configurable:!0}),z)}return Rv(s,[{key:"toString",value:function(){return Xv(this)}},{key:vd,get:function(){return"Object"}}]),s}(po(Error));function Bc(i){return i===void 0||i.length===0?void 0:i}function Xv(i){var n=i.message;if(i.nodes)for(var s=0,l=i.nodes;s<l.length;s++){var u=l[s];u.loc&&(n+=`

`+Iv(u.loc))}else if(i.source&&i.locations)for(var f=0,v=i.locations;f<v.length;f++){var b=v[f];n+=`

`+bd(i.source,b)}return n}function Ft(i,n,s){return new go("Syntax Error: ".concat(s),void 0,i,[n])}var we=Object.freeze({NAME:"Name",DOCUMENT:"Document",OPERATION_DEFINITION:"OperationDefinition",VARIABLE_DEFINITION:"VariableDefinition",SELECTION_SET:"SelectionSet",FIELD:"Field",ARGUMENT:"Argument",FRAGMENT_SPREAD:"FragmentSpread",INLINE_FRAGMENT:"InlineFragment",FRAGMENT_DEFINITION:"FragmentDefinition",VARIABLE:"Variable",INT:"IntValue",FLOAT:"FloatValue",STRING:"StringValue",BOOLEAN:"BooleanValue",NULL:"NullValue",ENUM:"EnumValue",LIST:"ListValue",OBJECT:"ObjectValue",OBJECT_FIELD:"ObjectField",DIRECTIVE:"Directive",NAMED_TYPE:"NamedType",LIST_TYPE:"ListType",NON_NULL_TYPE:"NonNullType",SCHEMA_DEFINITION:"SchemaDefinition",OPERATION_TYPE_DEFINITION:"OperationTypeDefinition",SCALAR_TYPE_DEFINITION:"ScalarTypeDefinition",OBJECT_TYPE_DEFINITION:"ObjectTypeDefinition",FIELD_DEFINITION:"FieldDefinition",INPUT_VALUE_DEFINITION:"InputValueDefinition",INTERFACE_TYPE_DEFINITION:"InterfaceTypeDefinition",UNION_TYPE_DEFINITION:"UnionTypeDefinition",ENUM_TYPE_DEFINITION:"EnumTypeDefinition",ENUM_VALUE_DEFINITION:"EnumValueDefinition",INPUT_OBJECT_TYPE_DEFINITION:"InputObjectTypeDefinition",DIRECTIVE_DEFINITION:"DirectiveDefinition",SCHEMA_EXTENSION:"SchemaExtension",SCALAR_TYPE_EXTENSION:"ScalarTypeExtension",OBJECT_TYPE_EXTENSION:"ObjectTypeExtension",INTERFACE_TYPE_EXTENSION:"InterfaceTypeExtension",UNION_TYPE_EXTENSION:"UnionTypeExtension",ENUM_TYPE_EXTENSION:"EnumTypeExtension",INPUT_OBJECT_TYPE_EXTENSION:"InputObjectTypeExtension"});function kd(i,n){var s=Boolean(i);if(!s)throw new Error(n!=null?n:"Unexpected invariant triggered.")}var Hv=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):void 0,xo=Hv;function Ad(i){var n=i.prototype.toJSON;typeof n=="function"||kd(0),i.prototype.inspect=n,xo&&(i.prototype[xo]=n)}var Sd=function(){function i(s,l,u){this.start=s.start,this.end=l.end,this.startToken=s,this.endToken=l,this.source=u}var n=i.prototype;return n.toJSON=function(){return{start:this.start,end:this.end}},i}();Ad(Sd);var ot=function(){function i(s,l,u,f,v,b,k){this.kind=s,this.start=l,this.end=u,this.line=f,this.column=v,this.value=k,this.prev=b,this.next=null}var n=i.prototype;return n.toJSON=function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}},i}();Ad(ot);function Wc(i){return i!=null&&typeof i.kind=="string"}var ie=Object.freeze({SOF:"<SOF>",EOF:"<EOF>",BANG:"!",DOLLAR:"$",AMP:"&",PAREN_L:"(",PAREN_R:")",SPREAD:"...",COLON:":",EQUALS:"=",AT:"@",BRACKET_L:"[",BRACKET_R:"]",BRACE_L:"{",PIPE:"|",BRACE_R:"}",NAME:"Name",INT:"Int",FLOAT:"Float",STRING:"String",BLOCK_STRING:"BlockString",COMMENT:"Comment"});function oa(i){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?oa=function(s){return typeof s}:oa=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},oa(i)}var Yv=10,Cd=2;function bl(i){return ts(i,[])}function ts(i,n){switch(oa(i)){case"string":return JSON.stringify(i);case"function":return i.name?"[function ".concat(i.name,"]"):"[function]";case"object":return i===null?"null":Bv(i,n);default:return String(i)}}function Bv(i,n){if(n.indexOf(i)!==-1)return"[Circular]";var s=[].concat(n,[i]),l=jv(i);if(l!==void 0){var u=l.call(i);if(u!==i)return typeof u=="string"?u:ts(u,s)}else if(Array.isArray(i))return Vv(i,s);return Wv(i,s)}function Wv(i,n){var s=Object.keys(i);if(s.length===0)return"{}";if(n.length>Cd)return"["+Gv(i)+"]";var l=s.map(function(u){var f=ts(i[u],n);return u+": "+f});return"{ "+l.join(", ")+" }"}function Vv(i,n){if(i.length===0)return"[]";if(n.length>Cd)return"[Array]";for(var s=Math.min(Yv,i.length),l=i.length-s,u=[],f=0;f<s;++f)u.push(ts(i[f],n));return l===1?u.push("... 1 more item"):l>1&&u.push("... ".concat(l," more items")),"["+u.join(", ")+"]"}function jv(i){var n=i[String(xo)];if(typeof n=="function")return n;if(typeof i.inspect=="function")return i.inspect}function Gv(i){var n=Object.prototype.toString.call(i).replace(/^\[object /,"").replace(/]$/,"");if(n==="Object"&&typeof i.constructor=="function"){var s=i.constructor.name;if(typeof s=="string"&&s!=="")return s}return n}function Ts(i,n){var s=Boolean(i);if(!s)throw new Error(n)}var Uv=function(n,s){return n instanceof s};function Vc(i,n){for(var s=0;s<n.length;s++){var l=n[s];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(i,l.key,l)}}function qv(i,n,s){return n&&Vc(i.prototype,n),s&&Vc(i,s),i}var Ed=function(){function i(n){var s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"GraphQL request",l=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{line:1,column:1};typeof n=="string"||Ts(0,"Body must be a string. Received: ".concat(bl(n),".")),this.body=n,this.name=s,this.locationOffset=l,this.locationOffset.line>0||Ts(0,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||Ts(0,"column in locationOffset is 1-indexed and must be positive.")}return qv(i,[{key:vd,get:function(){return"Source"}}]),i}();function $v(i){return Uv(i,Ed)}var Kv=Object.freeze({QUERY:"QUERY",MUTATION:"MUTATION",SUBSCRIPTION:"SUBSCRIPTION",FIELD:"FIELD",FRAGMENT_DEFINITION:"FRAGMENT_DEFINITION",FRAGMENT_SPREAD:"FRAGMENT_SPREAD",INLINE_FRAGMENT:"INLINE_FRAGMENT",VARIABLE_DEFINITION:"VARIABLE_DEFINITION",SCHEMA:"SCHEMA",SCALAR:"SCALAR",OBJECT:"OBJECT",FIELD_DEFINITION:"FIELD_DEFINITION",ARGUMENT_DEFINITION:"ARGUMENT_DEFINITION",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",ENUM_VALUE:"ENUM_VALUE",INPUT_OBJECT:"INPUT_OBJECT",INPUT_FIELD_DEFINITION:"INPUT_FIELD_DEFINITION"});function Zv(i){var n=i.split(/\r\n|[\n\r]/g),s=Jv(i);if(s!==0)for(var l=1;l<n.length;l++)n[l]=n[l].slice(s);for(var u=0;u<n.length&&jc(n[u]);)++u;for(var f=n.length;f>u&&jc(n[f-1]);)--f;return n.slice(u,f).join(`
`)}function jc(i){for(var n=0;n<i.length;++n)if(i[n]!==" "&&i[n]!=="	")return!1;return!0}function Jv(i){for(var n,s=!0,l=!0,u=0,f=null,v=0;v<i.length;++v)switch(i.charCodeAt(v)){case 13:i.charCodeAt(v+1)===10&&++v;case 10:s=!1,l=!0,u=0;break;case 9:case 32:++u;break;default:l&&!s&&(f===null||u<f)&&(f=u),l=!1}return(n=f)!==null&&n!==void 0?n:0}function Qv(i){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"",s=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1,l=i.indexOf(`
`)===-1,u=i[0]===" "||i[0]==="	",f=i[i.length-1]==='"',v=i[i.length-1]==="\\",b=!l||f||v||s,k="";return b&&!(l&&u)&&(k+=`
`+n),k+=n?i.replace(/\n/g,`
`+n):i,b&&(k+=`
`),'"""'+k.replace(/"""/g,'\\"""')+'"""'}var eb=function(){function i(s){var l=new ot(ie.SOF,0,0,0,0,null);this.source=s,this.lastToken=l,this.token=l,this.line=1,this.lineStart=0}var n=i.prototype;return n.advance=function(){this.lastToken=this.token;var l=this.token=this.lookahead();return l},n.lookahead=function(){var l=this.token;if(l.kind!==ie.EOF)do{var u;l=(u=l.next)!==null&&u!==void 0?u:l.next=ib(this,l)}while(l.kind===ie.COMMENT);return l},i}();function tb(i){return i===ie.BANG||i===ie.DOLLAR||i===ie.AMP||i===ie.PAREN_L||i===ie.PAREN_R||i===ie.SPREAD||i===ie.COLON||i===ie.EQUALS||i===ie.AT||i===ie.BRACKET_L||i===ie.BRACKET_R||i===ie.BRACE_L||i===ie.PIPE||i===ie.BRACE_R}function an(i){return isNaN(i)?ie.EOF:i<127?JSON.stringify(String.fromCharCode(i)):'"\\u'.concat(("00"+i.toString(16).toUpperCase()).slice(-4),'"')}function ib(i,n){for(var s=i.source,l=s.body,u=l.length,f=n.end;f<u;){var v=l.charCodeAt(f),b=i.line,k=1+f-i.lineStart;switch(v){case 65279:case 9:case 32:case 44:++f;continue;case 10:++f,++i.line,i.lineStart=f;continue;case 13:l.charCodeAt(f+1)===10?f+=2:++f,++i.line,i.lineStart=f;continue;case 33:return new ot(ie.BANG,f,f+1,b,k,n);case 35:return rb(s,f,b,k,n);case 36:return new ot(ie.DOLLAR,f,f+1,b,k,n);case 38:return new ot(ie.AMP,f,f+1,b,k,n);case 40:return new ot(ie.PAREN_L,f,f+1,b,k,n);case 41:return new ot(ie.PAREN_R,f,f+1,b,k,n);case 46:if(l.charCodeAt(f+1)===46&&l.charCodeAt(f+2)===46)return new ot(ie.SPREAD,f,f+3,b,k,n);break;case 58:return new ot(ie.COLON,f,f+1,b,k,n);case 61:return new ot(ie.EQUALS,f,f+1,b,k,n);case 64:return new ot(ie.AT,f,f+1,b,k,n);case 91:return new ot(ie.BRACKET_L,f,f+1,b,k,n);case 93:return new ot(ie.BRACKET_R,f,f+1,b,k,n);case 123:return new ot(ie.BRACE_L,f,f+1,b,k,n);case 124:return new ot(ie.PIPE,f,f+1,b,k,n);case 125:return new ot(ie.BRACE_R,f,f+1,b,k,n);case 34:return l.charCodeAt(f+1)===34&&l.charCodeAt(f+2)===34?ob(s,f,b,k,n,i):sb(s,f,b,k,n);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return ab(s,f,v,b,k,n);case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return cb(s,f,b,k,n)}throw Ft(s,f,nb(v))}var S=i.line,I=1+f-i.lineStart;return new ot(ie.EOF,u,u,S,I,n)}function nb(i){return i<32&&i!==9&&i!==10&&i!==13?"Cannot contain the invalid character ".concat(an(i),"."):i===39?`Unexpected single quote character ('), did you mean to use a double quote (")?`:"Cannot parse the unexpected character ".concat(an(i),".")}function rb(i,n,s,l,u){var f=i.body,v,b=n;do v=f.charCodeAt(++b);while(!isNaN(v)&&(v>31||v===9));return new ot(ie.COMMENT,n,b,s,l,u,f.slice(n+1,b))}function ab(i,n,s,l,u,f){var v=i.body,b=s,k=n,S=!1;if(b===45&&(b=v.charCodeAt(++k)),b===48){if(b=v.charCodeAt(++k),b>=48&&b<=57)throw Ft(i,k,"Invalid number, unexpected digit after 0: ".concat(an(b),"."))}else k=Ps(i,k,b),b=v.charCodeAt(k);if(b===46&&(S=!0,b=v.charCodeAt(++k),k=Ps(i,k,b),b=v.charCodeAt(k)),(b===69||b===101)&&(S=!0,b=v.charCodeAt(++k),(b===43||b===45)&&(b=v.charCodeAt(++k)),k=Ps(i,k,b),b=v.charCodeAt(k)),b===46||hb(b))throw Ft(i,k,"Invalid number, expected digit but got: ".concat(an(b),"."));return new ot(S?ie.FLOAT:ie.INT,n,k,l,u,f,v.slice(n,k))}function Ps(i,n,s){var l=i.body,u=n,f=s;if(f>=48&&f<=57){do f=l.charCodeAt(++u);while(f>=48&&f<=57);return u}throw Ft(i,u,"Invalid number, expected digit but got: ".concat(an(f),"."))}function sb(i,n,s,l,u){for(var f=i.body,v=n+1,b=v,k=0,S="";v<f.length&&!isNaN(k=f.charCodeAt(v))&&k!==10&&k!==13;){if(k===34)return S+=f.slice(b,v),new ot(ie.STRING,n,v+1,s,l,u,S);if(k<32&&k!==9)throw Ft(i,v,"Invalid character within String: ".concat(an(k),"."));if(++v,k===92){switch(S+=f.slice(b,v-1),k=f.charCodeAt(v),k){case 34:S+='"';break;case 47:S+="/";break;case 92:S+="\\";break;case 98:S+="\b";break;case 102:S+="\f";break;case 110:S+=`
`;break;case 114:S+="\r";break;case 116:S+="	";break;case 117:{var I=lb(f.charCodeAt(v+1),f.charCodeAt(v+2),f.charCodeAt(v+3),f.charCodeAt(v+4));if(I<0){var N=f.slice(v+1,v+5);throw Ft(i,v,"Invalid character escape sequence: \\u".concat(N,"."))}S+=String.fromCharCode(I),v+=4;break}default:throw Ft(i,v,"Invalid character escape sequence: \\".concat(String.fromCharCode(k),"."))}++v,b=v}}throw Ft(i,v,"Unterminated string.")}function ob(i,n,s,l,u,f){for(var v=i.body,b=n+3,k=b,S=0,I="";b<v.length&&!isNaN(S=v.charCodeAt(b));){if(S===34&&v.charCodeAt(b+1)===34&&v.charCodeAt(b+2)===34)return I+=v.slice(k,b),new ot(ie.BLOCK_STRING,n,b+3,s,l,u,Zv(I));if(S<32&&S!==9&&S!==10&&S!==13)throw Ft(i,b,"Invalid character within String: ".concat(an(S),"."));S===10?(++b,++f.line,f.lineStart=b):S===13?(v.charCodeAt(b+1)===10?b+=2:++b,++f.line,f.lineStart=b):S===92&&v.charCodeAt(b+1)===34&&v.charCodeAt(b+2)===34&&v.charCodeAt(b+3)===34?(I+=v.slice(k,b)+'"""',b+=4,k=b):++b}throw Ft(i,b,"Unterminated string.")}function lb(i,n,s,l){return Qr(i)<<12|Qr(n)<<8|Qr(s)<<4|Qr(l)}function Qr(i){return i>=48&&i<=57?i-48:i>=65&&i<=70?i-55:i>=97&&i<=102?i-87:-1}function cb(i,n,s,l,u){for(var f=i.body,v=f.length,b=n+1,k=0;b!==v&&!isNaN(k=f.charCodeAt(b))&&(k===95||k>=48&&k<=57||k>=65&&k<=90||k>=97&&k<=122);)++b;return new ot(ie.NAME,n,b,s,l,u,f.slice(n,b))}function hb(i){return i===95||i>=65&&i<=90||i>=97&&i<=122}function Td(i,n){var s=new ub(i,n);return s.parseDocument()}var ub=function(){function i(s,l){var u=$v(s)?s:new Ed(s);this._lexer=new eb(u),this._options=l}var n=i.prototype;return n.parseName=function(){var l=this.expectToken(ie.NAME);return{kind:we.NAME,value:l.value,loc:this.loc(l)}},n.parseDocument=function(){var l=this._lexer.token;return{kind:we.DOCUMENT,definitions:this.many(ie.SOF,this.parseDefinition,ie.EOF),loc:this.loc(l)}},n.parseDefinition=function(){if(this.peek(ie.NAME))switch(this._lexer.token.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"schema":case"scalar":case"type":case"interface":case"union":case"enum":case"input":case"directive":return this.parseTypeSystemDefinition();case"extend":return this.parseTypeSystemExtension()}else{if(this.peek(ie.BRACE_L))return this.parseOperationDefinition();if(this.peekDescription())return this.parseTypeSystemDefinition()}throw this.unexpected()},n.parseOperationDefinition=function(){var l=this._lexer.token;if(this.peek(ie.BRACE_L))return{kind:we.OPERATION_DEFINITION,operation:"query",name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet(),loc:this.loc(l)};var u=this.parseOperationType(),f;return this.peek(ie.NAME)&&(f=this.parseName()),{kind:we.OPERATION_DEFINITION,operation:u,name:f,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(l)}},n.parseOperationType=function(){var l=this.expectToken(ie.NAME);switch(l.value){case"query":return"query";case"mutation":return"mutation";case"subscription":return"subscription"}throw this.unexpected(l)},n.parseVariableDefinitions=function(){return this.optionalMany(ie.PAREN_L,this.parseVariableDefinition,ie.PAREN_R)},n.parseVariableDefinition=function(){var l=this._lexer.token;return{kind:we.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(ie.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(ie.EQUALS)?this.parseValueLiteral(!0):void 0,directives:this.parseDirectives(!0),loc:this.loc(l)}},n.parseVariable=function(){var l=this._lexer.token;return this.expectToken(ie.DOLLAR),{kind:we.VARIABLE,name:this.parseName(),loc:this.loc(l)}},n.parseSelectionSet=function(){var l=this._lexer.token;return{kind:we.SELECTION_SET,selections:this.many(ie.BRACE_L,this.parseSelection,ie.BRACE_R),loc:this.loc(l)}},n.parseSelection=function(){return this.peek(ie.SPREAD)?this.parseFragment():this.parseField()},n.parseField=function(){var l=this._lexer.token,u=this.parseName(),f,v;return this.expectOptionalToken(ie.COLON)?(f=u,v=this.parseName()):v=u,{kind:we.FIELD,alias:f,name:v,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(ie.BRACE_L)?this.parseSelectionSet():void 0,loc:this.loc(l)}},n.parseArguments=function(l){var u=l?this.parseConstArgument:this.parseArgument;return this.optionalMany(ie.PAREN_L,u,ie.PAREN_R)},n.parseArgument=function(){var l=this._lexer.token,u=this.parseName();return this.expectToken(ie.COLON),{kind:we.ARGUMENT,name:u,value:this.parseValueLiteral(!1),loc:this.loc(l)}},n.parseConstArgument=function(){var l=this._lexer.token;return{kind:we.ARGUMENT,name:this.parseName(),value:(this.expectToken(ie.COLON),this.parseValueLiteral(!0)),loc:this.loc(l)}},n.parseFragment=function(){var l=this._lexer.token;this.expectToken(ie.SPREAD);var u=this.expectOptionalKeyword("on");return!u&&this.peek(ie.NAME)?{kind:we.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1),loc:this.loc(l)}:{kind:we.INLINE_FRAGMENT,typeCondition:u?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(l)}},n.parseFragmentDefinition=function(){var l,u=this._lexer.token;return this.expectKeyword("fragment"),((l=this._options)===null||l===void 0?void 0:l.experimentalFragmentVariables)===!0?{kind:we.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(u)}:{kind:we.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(u)}},n.parseFragmentName=function(){if(this._lexer.token.value==="on")throw this.unexpected();return this.parseName()},n.parseValueLiteral=function(l){var u=this._lexer.token;switch(u.kind){case ie.BRACKET_L:return this.parseList(l);case ie.BRACE_L:return this.parseObject(l);case ie.INT:return this._lexer.advance(),{kind:we.INT,value:u.value,loc:this.loc(u)};case ie.FLOAT:return this._lexer.advance(),{kind:we.FLOAT,value:u.value,loc:this.loc(u)};case ie.STRING:case ie.BLOCK_STRING:return this.parseStringLiteral();case ie.NAME:switch(this._lexer.advance(),u.value){case"true":return{kind:we.BOOLEAN,value:!0,loc:this.loc(u)};case"false":return{kind:we.BOOLEAN,value:!1,loc:this.loc(u)};case"null":return{kind:we.NULL,loc:this.loc(u)};default:return{kind:we.ENUM,value:u.value,loc:this.loc(u)}}case ie.DOLLAR:if(!l)return this.parseVariable();break}throw this.unexpected()},n.parseStringLiteral=function(){var l=this._lexer.token;return this._lexer.advance(),{kind:we.STRING,value:l.value,block:l.kind===ie.BLOCK_STRING,loc:this.loc(l)}},n.parseList=function(l){var u=this,f=this._lexer.token,v=function(){return u.parseValueLiteral(l)};return{kind:we.LIST,values:this.any(ie.BRACKET_L,v,ie.BRACKET_R),loc:this.loc(f)}},n.parseObject=function(l){var u=this,f=this._lexer.token,v=function(){return u.parseObjectField(l)};return{kind:we.OBJECT,fields:this.any(ie.BRACE_L,v,ie.BRACE_R),loc:this.loc(f)}},n.parseObjectField=function(l){var u=this._lexer.token,f=this.parseName();return this.expectToken(ie.COLON),{kind:we.OBJECT_FIELD,name:f,value:this.parseValueLiteral(l),loc:this.loc(u)}},n.parseDirectives=function(l){for(var u=[];this.peek(ie.AT);)u.push(this.parseDirective(l));return u},n.parseDirective=function(l){var u=this._lexer.token;return this.expectToken(ie.AT),{kind:we.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(l),loc:this.loc(u)}},n.parseTypeReference=function(){var l=this._lexer.token,u;return this.expectOptionalToken(ie.BRACKET_L)?(u=this.parseTypeReference(),this.expectToken(ie.BRACKET_R),u={kind:we.LIST_TYPE,type:u,loc:this.loc(l)}):u=this.parseNamedType(),this.expectOptionalToken(ie.BANG)?{kind:we.NON_NULL_TYPE,type:u,loc:this.loc(l)}:u},n.parseNamedType=function(){var l=this._lexer.token;return{kind:we.NAMED_TYPE,name:this.parseName(),loc:this.loc(l)}},n.parseTypeSystemDefinition=function(){var l=this.peekDescription()?this._lexer.lookahead():this._lexer.token;if(l.kind===ie.NAME)switch(l.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}throw this.unexpected(l)},n.peekDescription=function(){return this.peek(ie.STRING)||this.peek(ie.BLOCK_STRING)},n.parseDescription=function(){if(this.peekDescription())return this.parseStringLiteral()},n.parseSchemaDefinition=function(){var l=this._lexer.token,u=this.parseDescription();this.expectKeyword("schema");var f=this.parseDirectives(!0),v=this.many(ie.BRACE_L,this.parseOperationTypeDefinition,ie.BRACE_R);return{kind:we.SCHEMA_DEFINITION,description:u,directives:f,operationTypes:v,loc:this.loc(l)}},n.parseOperationTypeDefinition=function(){var l=this._lexer.token,u=this.parseOperationType();this.expectToken(ie.COLON);var f=this.parseNamedType();return{kind:we.OPERATION_TYPE_DEFINITION,operation:u,type:f,loc:this.loc(l)}},n.parseScalarTypeDefinition=function(){var l=this._lexer.token,u=this.parseDescription();this.expectKeyword("scalar");var f=this.parseName(),v=this.parseDirectives(!0);return{kind:we.SCALAR_TYPE_DEFINITION,description:u,name:f,directives:v,loc:this.loc(l)}},n.parseObjectTypeDefinition=function(){var l=this._lexer.token,u=this.parseDescription();this.expectKeyword("type");var f=this.parseName(),v=this.parseImplementsInterfaces(),b=this.parseDirectives(!0),k=this.parseFieldsDefinition();return{kind:we.OBJECT_TYPE_DEFINITION,description:u,name:f,interfaces:v,directives:b,fields:k,loc:this.loc(l)}},n.parseImplementsInterfaces=function(){var l;if(!this.expectOptionalKeyword("implements"))return[];if(((l=this._options)===null||l===void 0?void 0:l.allowLegacySDLImplementsInterfaces)===!0){var u=[];this.expectOptionalToken(ie.AMP);do u.push(this.parseNamedType());while(this.expectOptionalToken(ie.AMP)||this.peek(ie.NAME));return u}return this.delimitedMany(ie.AMP,this.parseNamedType)},n.parseFieldsDefinition=function(){var l;return((l=this._options)===null||l===void 0?void 0:l.allowLegacySDLEmptyFields)===!0&&this.peek(ie.BRACE_L)&&this._lexer.lookahead().kind===ie.BRACE_R?(this._lexer.advance(),this._lexer.advance(),[]):this.optionalMany(ie.BRACE_L,this.parseFieldDefinition,ie.BRACE_R)},n.parseFieldDefinition=function(){var l=this._lexer.token,u=this.parseDescription(),f=this.parseName(),v=this.parseArgumentDefs();this.expectToken(ie.COLON);var b=this.parseTypeReference(),k=this.parseDirectives(!0);return{kind:we.FIELD_DEFINITION,description:u,name:f,arguments:v,type:b,directives:k,loc:this.loc(l)}},n.parseArgumentDefs=function(){return this.optionalMany(ie.PAREN_L,this.parseInputValueDef,ie.PAREN_R)},n.parseInputValueDef=function(){var l=this._lexer.token,u=this.parseDescription(),f=this.parseName();this.expectToken(ie.COLON);var v=this.parseTypeReference(),b;this.expectOptionalToken(ie.EQUALS)&&(b=this.parseValueLiteral(!0));var k=this.parseDirectives(!0);return{kind:we.INPUT_VALUE_DEFINITION,description:u,name:f,type:v,defaultValue:b,directives:k,loc:this.loc(l)}},n.parseInterfaceTypeDefinition=function(){var l=this._lexer.token,u=this.parseDescription();this.expectKeyword("interface");var f=this.parseName(),v=this.parseImplementsInterfaces(),b=this.parseDirectives(!0),k=this.parseFieldsDefinition();return{kind:we.INTERFACE_TYPE_DEFINITION,description:u,name:f,interfaces:v,directives:b,fields:k,loc:this.loc(l)}},n.parseUnionTypeDefinition=function(){var l=this._lexer.token,u=this.parseDescription();this.expectKeyword("union");var f=this.parseName(),v=this.parseDirectives(!0),b=this.parseUnionMemberTypes();return{kind:we.UNION_TYPE_DEFINITION,description:u,name:f,directives:v,types:b,loc:this.loc(l)}},n.parseUnionMemberTypes=function(){return this.expectOptionalToken(ie.EQUALS)?this.delimitedMany(ie.PIPE,this.parseNamedType):[]},n.parseEnumTypeDefinition=function(){var l=this._lexer.token,u=this.parseDescription();this.expectKeyword("enum");var f=this.parseName(),v=this.parseDirectives(!0),b=this.parseEnumValuesDefinition();return{kind:we.ENUM_TYPE_DEFINITION,description:u,name:f,directives:v,values:b,loc:this.loc(l)}},n.parseEnumValuesDefinition=function(){return this.optionalMany(ie.BRACE_L,this.parseEnumValueDefinition,ie.BRACE_R)},n.parseEnumValueDefinition=function(){var l=this._lexer.token,u=this.parseDescription(),f=this.parseName(),v=this.parseDirectives(!0);return{kind:we.ENUM_VALUE_DEFINITION,description:u,name:f,directives:v,loc:this.loc(l)}},n.parseInputObjectTypeDefinition=function(){var l=this._lexer.token,u=this.parseDescription();this.expectKeyword("input");var f=this.parseName(),v=this.parseDirectives(!0),b=this.parseInputFieldsDefinition();return{kind:we.INPUT_OBJECT_TYPE_DEFINITION,description:u,name:f,directives:v,fields:b,loc:this.loc(l)}},n.parseInputFieldsDefinition=function(){return this.optionalMany(ie.BRACE_L,this.parseInputValueDef,ie.BRACE_R)},n.parseTypeSystemExtension=function(){var l=this._lexer.lookahead();if(l.kind===ie.NAME)switch(l.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(l)},n.parseSchemaExtension=function(){var l=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");var u=this.parseDirectives(!0),f=this.optionalMany(ie.BRACE_L,this.parseOperationTypeDefinition,ie.BRACE_R);if(u.length===0&&f.length===0)throw this.unexpected();return{kind:we.SCHEMA_EXTENSION,directives:u,operationTypes:f,loc:this.loc(l)}},n.parseScalarTypeExtension=function(){var l=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");var u=this.parseName(),f=this.parseDirectives(!0);if(f.length===0)throw this.unexpected();return{kind:we.SCALAR_TYPE_EXTENSION,name:u,directives:f,loc:this.loc(l)}},n.parseObjectTypeExtension=function(){var l=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");var u=this.parseName(),f=this.parseImplementsInterfaces(),v=this.parseDirectives(!0),b=this.parseFieldsDefinition();if(f.length===0&&v.length===0&&b.length===0)throw this.unexpected();return{kind:we.OBJECT_TYPE_EXTENSION,name:u,interfaces:f,directives:v,fields:b,loc:this.loc(l)}},n.parseInterfaceTypeExtension=function(){var l=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");var u=this.parseName(),f=this.parseImplementsInterfaces(),v=this.parseDirectives(!0),b=this.parseFieldsDefinition();if(f.length===0&&v.length===0&&b.length===0)throw this.unexpected();return{kind:we.INTERFACE_TYPE_EXTENSION,name:u,interfaces:f,directives:v,fields:b,loc:this.loc(l)}},n.parseUnionTypeExtension=function(){var l=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");var u=this.parseName(),f=this.parseDirectives(!0),v=this.parseUnionMemberTypes();if(f.length===0&&v.length===0)throw this.unexpected();return{kind:we.UNION_TYPE_EXTENSION,name:u,directives:f,types:v,loc:this.loc(l)}},n.parseEnumTypeExtension=function(){var l=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");var u=this.parseName(),f=this.parseDirectives(!0),v=this.parseEnumValuesDefinition();if(f.length===0&&v.length===0)throw this.unexpected();return{kind:we.ENUM_TYPE_EXTENSION,name:u,directives:f,values:v,loc:this.loc(l)}},n.parseInputObjectTypeExtension=function(){var l=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");var u=this.parseName(),f=this.parseDirectives(!0),v=this.parseInputFieldsDefinition();if(f.length===0&&v.length===0)throw this.unexpected();return{kind:we.INPUT_OBJECT_TYPE_EXTENSION,name:u,directives:f,fields:v,loc:this.loc(l)}},n.parseDirectiveDefinition=function(){var l=this._lexer.token,u=this.parseDescription();this.expectKeyword("directive"),this.expectToken(ie.AT);var f=this.parseName(),v=this.parseArgumentDefs(),b=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");var k=this.parseDirectiveLocations();return{kind:we.DIRECTIVE_DEFINITION,description:u,name:f,arguments:v,repeatable:b,locations:k,loc:this.loc(l)}},n.parseDirectiveLocations=function(){return this.delimitedMany(ie.PIPE,this.parseDirectiveLocation)},n.parseDirectiveLocation=function(){var l=this._lexer.token,u=this.parseName();if(Kv[u.value]!==void 0)return u;throw this.unexpected(l)},n.loc=function(l){var u;if(((u=this._options)===null||u===void 0?void 0:u.noLocation)!==!0)return new Sd(l,this._lexer.lastToken,this._lexer.source)},n.peek=function(l){return this._lexer.token.kind===l},n.expectToken=function(l){var u=this._lexer.token;if(u.kind===l)return this._lexer.advance(),u;throw Ft(this._lexer.source,u.start,"Expected ".concat(Pd(l),", found ").concat(Ls(u),"."))},n.expectOptionalToken=function(l){var u=this._lexer.token;if(u.kind===l)return this._lexer.advance(),u},n.expectKeyword=function(l){var u=this._lexer.token;if(u.kind===ie.NAME&&u.value===l)this._lexer.advance();else throw Ft(this._lexer.source,u.start,'Expected "'.concat(l,'", found ').concat(Ls(u),"."))},n.expectOptionalKeyword=function(l){var u=this._lexer.token;return u.kind===ie.NAME&&u.value===l?(this._lexer.advance(),!0):!1},n.unexpected=function(l){var u=l!=null?l:this._lexer.token;return Ft(this._lexer.source,u.start,"Unexpected ".concat(Ls(u),"."))},n.any=function(l,u,f){this.expectToken(l);for(var v=[];!this.expectOptionalToken(f);)v.push(u.call(this));return v},n.optionalMany=function(l,u,f){if(this.expectOptionalToken(l)){var v=[];do v.push(u.call(this));while(!this.expectOptionalToken(f));return v}return[]},n.many=function(l,u,f){this.expectToken(l);var v=[];do v.push(u.call(this));while(!this.expectOptionalToken(f));return v},n.delimitedMany=function(l,u){this.expectOptionalToken(l);var f=[];do f.push(u.call(this));while(this.expectOptionalToken(l));return f},i}();function Ls(i){var n=i.value;return Pd(i.kind)+(n!=null?' "'.concat(n,'"'):"")}function Pd(i){return tb(i)?'"'.concat(i,'"'):i}var db={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},fb=Object.freeze({});function Ld(i,n){var s=arguments.length>2&&arguments[2]!==void 0?arguments[2]:db,l=void 0,u=Array.isArray(i),f=[i],v=-1,b=[],k=void 0,S=void 0,I=void 0,N=[],O=[],z=i;do{v++;var j=v===f.length,K=j&&b.length!==0;if(j){if(S=O.length===0?void 0:N[N.length-1],k=I,I=O.pop(),K){if(u)k=k.slice();else{for(var B={},Y=0,P=Object.keys(k);Y<P.length;Y++){var q=P[Y];B[q]=k[q]}k=B}for(var H=0,X=0;X<b.length;X++){var Z=b[X][0],U=b[X][1];u&&(Z-=H),u&&U===null?(k.splice(Z,1),H++):k[Z]=U}}v=l.index,f=l.keys,b=l.edits,u=l.inArray,l=l.prev}else{if(S=I?u?v:f[v]:void 0,k=I?I[S]:z,k==null)continue;I&&N.push(S)}var te=void 0;if(!Array.isArray(k)){if(!Wc(k))throw new Error("Invalid AST Node: ".concat(bl(k),"."));var le=pb(n,k.kind,j);if(le){if(te=le.call(n,k,S,I,N,O),te===fb)break;if(te===!1){if(!j){N.pop();continue}}else if(te!==void 0&&(b.push([S,te]),!j))if(Wc(te))k=te;else{N.pop();continue}}}if(te===void 0&&K&&b.push([S,k]),j)N.pop();else{var pe;l={inArray:u,index:v,keys:f,edits:b,prev:l},u=Array.isArray(k),f=u?k:(pe=s[k.kind])!==null&&pe!==void 0?pe:[],v=-1,b=[],I&&O.push(I),I=k}}while(l!==void 0);return b.length!==0&&(z=b[b.length-1][1]),z}function pb(i,n,s){var l=i[n];if(l){if(!s&&typeof l=="function")return l;var u=s?l.leave:l.enter;if(typeof u=="function")return u}else{var f=s?i.leave:i.enter;if(f){if(typeof f=="function")return f;var v=f[n];if(typeof v=="function")return v}}}function gb(i,n,s){return i.reduce(function(l,u){return l[n(u)]=s(u),l},Object.create(null))}function Id(i){return Ld(i,{leave:mb})}var xb=80,mb={Name:function(n){return n.value},Variable:function(n){return"$"+n.name},Document:function(n){return ke(n.definitions,`

`)+`
`},OperationDefinition:function(n){var s=n.operation,l=n.name,u=rt("(",ke(n.variableDefinitions,", "),")"),f=ke(n.directives," "),v=n.selectionSet;return!l&&!f&&!u&&s==="query"?v:ke([s,ke([l,u]),f,v]," ")},VariableDefinition:function(n){var s=n.variable,l=n.type,u=n.defaultValue,f=n.directives;return s+": "+l+rt(" = ",u)+rt(" ",ke(f," "))},SelectionSet:function(n){var s=n.selections;return qt(s)},Field:function(n){var s=n.alias,l=n.name,u=n.arguments,f=n.directives,v=n.selectionSet,b=rt("",s,": ")+l,k=b+rt("(",ke(u,", "),")");return k.length>xb&&(k=b+rt(`(
`,la(ke(u,`
`)),`
)`)),ke([k,ke(f," "),v]," ")},Argument:function(n){var s=n.name,l=n.value;return s+": "+l},FragmentSpread:function(n){var s=n.name,l=n.directives;return"..."+s+rt(" ",ke(l," "))},InlineFragment:function(n){var s=n.typeCondition,l=n.directives,u=n.selectionSet;return ke(["...",rt("on ",s),ke(l," "),u]," ")},FragmentDefinition:function(n){var s=n.name,l=n.typeCondition,u=n.variableDefinitions,f=n.directives,v=n.selectionSet;return"fragment ".concat(s).concat(rt("(",ke(u,", "),")")," ")+"on ".concat(l," ").concat(rt("",ke(f," ")," "))+v},IntValue:function(n){var s=n.value;return s},FloatValue:function(n){var s=n.value;return s},StringValue:function(n,s){var l=n.value,u=n.block;return u?Qv(l,s==="description"?"":"  "):JSON.stringify(l)},BooleanValue:function(n){var s=n.value;return s?"true":"false"},NullValue:function(){return"null"},EnumValue:function(n){var s=n.value;return s},ListValue:function(n){var s=n.values;return"["+ke(s,", ")+"]"},ObjectValue:function(n){var s=n.fields;return"{"+ke(s,", ")+"}"},ObjectField:function(n){var s=n.name,l=n.value;return s+": "+l},Directive:function(n){var s=n.name,l=n.arguments;return"@"+s+rt("(",ke(l,", "),")")},NamedType:function(n){var s=n.name;return s},ListType:function(n){var s=n.type;return"["+s+"]"},NonNullType:function(n){var s=n.type;return s+"!"},SchemaDefinition:Ut(function(i){var n=i.directives,s=i.operationTypes;return ke(["schema",ke(n," "),qt(s)]," ")}),OperationTypeDefinition:function(n){var s=n.operation,l=n.type;return s+": "+l},ScalarTypeDefinition:Ut(function(i){var n=i.name,s=i.directives;return ke(["scalar",n,ke(s," ")]," ")}),ObjectTypeDefinition:Ut(function(i){var n=i.name,s=i.interfaces,l=i.directives,u=i.fields;return ke(["type",n,rt("implements ",ke(s," & ")),ke(l," "),qt(u)]," ")}),FieldDefinition:Ut(function(i){var n=i.name,s=i.arguments,l=i.type,u=i.directives;return n+(Gc(s)?rt(`(
`,la(ke(s,`
`)),`
)`):rt("(",ke(s,", "),")"))+": "+l+rt(" ",ke(u," "))}),InputValueDefinition:Ut(function(i){var n=i.name,s=i.type,l=i.defaultValue,u=i.directives;return ke([n+": "+s,rt("= ",l),ke(u," ")]," ")}),InterfaceTypeDefinition:Ut(function(i){var n=i.name,s=i.interfaces,l=i.directives,u=i.fields;return ke(["interface",n,rt("implements ",ke(s," & ")),ke(l," "),qt(u)]," ")}),UnionTypeDefinition:Ut(function(i){var n=i.name,s=i.directives,l=i.types;return ke(["union",n,ke(s," "),l&&l.length!==0?"= "+ke(l," | "):""]," ")}),EnumTypeDefinition:Ut(function(i){var n=i.name,s=i.directives,l=i.values;return ke(["enum",n,ke(s," "),qt(l)]," ")}),EnumValueDefinition:Ut(function(i){var n=i.name,s=i.directives;return ke([n,ke(s," ")]," ")}),InputObjectTypeDefinition:Ut(function(i){var n=i.name,s=i.directives,l=i.fields;return ke(["input",n,ke(s," "),qt(l)]," ")}),DirectiveDefinition:Ut(function(i){var n=i.name,s=i.arguments,l=i.repeatable,u=i.locations;return"directive @"+n+(Gc(s)?rt(`(
`,la(ke(s,`
`)),`
)`):rt("(",ke(s,", "),")"))+(l?" repeatable":"")+" on "+ke(u," | ")}),SchemaExtension:function(n){var s=n.directives,l=n.operationTypes;return ke(["extend schema",ke(s," "),qt(l)]," ")},ScalarTypeExtension:function(n){var s=n.name,l=n.directives;return ke(["extend scalar",s,ke(l," ")]," ")},ObjectTypeExtension:function(n){var s=n.name,l=n.interfaces,u=n.directives,f=n.fields;return ke(["extend type",s,rt("implements ",ke(l," & ")),ke(u," "),qt(f)]," ")},InterfaceTypeExtension:function(n){var s=n.name,l=n.interfaces,u=n.directives,f=n.fields;return ke(["extend interface",s,rt("implements ",ke(l," & ")),ke(u," "),qt(f)]," ")},UnionTypeExtension:function(n){var s=n.name,l=n.directives,u=n.types;return ke(["extend union",s,ke(l," "),u&&u.length!==0?"= "+ke(u," | "):""]," ")},EnumTypeExtension:function(n){var s=n.name,l=n.directives,u=n.values;return ke(["extend enum",s,ke(l," "),qt(u)]," ")},InputObjectTypeExtension:function(n){var s=n.name,l=n.directives,u=n.fields;return ke(["extend input",s,ke(l," "),qt(u)]," ")}};function Ut(i){return function(n){return ke([n.description,i(n)],`
`)}}function ke(i){var n,s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"";return(n=i==null?void 0:i.filter(function(l){return l}).join(s))!==null&&n!==void 0?n:""}function qt(i){return rt(`{
`,la(ke(i,`
`)),`
}`)}function rt(i,n){var s=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"";return n!=null&&n!==""?i+n+s:""}function la(i){return rt("  ",i.replace(/\n/g,`
  `))}function vb(i){return i.indexOf(`
`)!==-1}function Gc(i){return i!=null&&i.some(vb)}function Nn(i,n){switch(i.kind){case we.NULL:return null;case we.INT:return parseInt(i.value,10);case we.FLOAT:return parseFloat(i.value);case we.STRING:case we.ENUM:case we.BOOLEAN:return i.value;case we.LIST:return i.values.map(function(s){return Nn(s,n)});case we.OBJECT:return gb(i.fields,function(s){return s.name.value},function(s){return Nn(s.value,n)});case we.VARIABLE:return n==null?void 0:n[i.name.value]}kd(0,"Unexpected value node: "+bl(i))}var ca=new Map,mo=new Map,_d=!0,Ta=!1;function Od(i){return i.replace(/[\s,]+/g," ").trim()}function bb(i){return Od(i.source.body.substring(i.start,i.end))}function yb(i){var n=new Set,s=[];return i.definitions.forEach(function(l){if(l.kind==="FragmentDefinition"){var u=l.name.value,f=bb(l.loc),v=mo.get(u);v&&!v.has(f)?_d&&console.warn("Warning: fragment with name "+u+` already exists.
graphql-tag enforces all fragment names across your application to be unique; read more about
this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names`):v||mo.set(u,v=new Set),v.add(f),n.has(f)||(n.add(f),s.push(l))}else s.push(l)}),Ea(Ea({},i),{definitions:s})}function wb(i){var n=new Set(i.definitions);n.forEach(function(l){l.loc&&delete l.loc,Object.keys(l).forEach(function(u){var f=l[u];f&&typeof f=="object"&&n.add(f)})});var s=i.loc;return s&&(delete s.startToken,delete s.endToken),i}function kb(i){var n=Od(i);if(!ca.has(n)){var s=Td(i,{experimentalFragmentVariables:Ta,allowLegacyFragmentVariables:Ta});if(!s||s.kind!=="Document")throw new Error("Not a valid GraphQL document.");ca.set(n,wb(yb(s)))}return ca.get(n)}function Rn(i){for(var n=[],s=1;s<arguments.length;s++)n[s-1]=arguments[s];typeof i=="string"&&(i=[i]);var l=i[0];return n.forEach(function(u,f){u&&u.kind==="Document"?l+=u.loc.source.body:l+=u,l+=i[f+1]}),kb(l)}function Ab(){ca.clear(),mo.clear()}function Sb(){_d=!1}function Cb(){Ta=!0}function Eb(){Ta=!1}var ir={gql:Rn,resetCaches:Ab,disableFragmentWarnings:Sb,enableExperimentalFragmentVariables:Cb,disableExperimentalFragmentVariables:Eb};(function(i){i.gql=ir.gql,i.resetCaches=ir.resetCaches,i.disableFragmentWarnings=ir.disableFragmentWarnings,i.enableExperimentalFragmentVariables=ir.enableExperimentalFragmentVariables,i.disableExperimentalFragmentVariables=ir.disableExperimentalFragmentVariables})(Rn||(Rn={}));Rn.default=Rn;var b0=Rn;function tt(i,n){return n.tag=i,n}function vt(){}function Pa(i){return function(n){var s=i.length;let l=!1,u=!1,f=!1,v=0;n(tt(0,[function(b){if(b)l=!0;else if(u)f=!0;else{for(u=f=!0;f&&!l;)v<s?(b=i[v],v=v+1|0,f=!1,n(tt(1,[b]))):(l=!0,n(0));u=!1}}]))}}function Tb(){}function Pb(i){i(0)}function La(i){let n=!1;i(tt(0,[function(s){s?n=!0:n||i(0)}]))}function Lb(i){return i(0)}function Fn(i){return function(n){return function(s){let l=vt,u=!1,f=[],v=!1;n(function(b){typeof b=="number"?v||(v=!0,f.length===0&&s(0)):b.tag?v||(u=!1,function(k){function S(O){typeof O=="number"?f.length!==0&&(f=f.filter(I),O=f.length===0,v&&O?s(0):!u&&O&&(u=!0,l(0))):O.tag?f.length!==0&&(s(tt(1,[O[0]])),N(0)):(N=O=O[0],f=f.concat(O),O(0))}function I(O){return O!==N}let N=vt;k.length===1?k(S):k.bind(null,S)}(i(b[0])),u||(u=!0,l(0))):l=b[0]}),s(tt(0,[function(b){b?(v||(v=!0,l(b)),f.forEach(function(k){return k(b)}),f=[]):(u||v?u=!1:(u=!0,l(0)),f.forEach(Lb))}]))}}}function Ib(i){return i}function Un(i){return function(n){return function(s){let l=!1;return n(function(u){if(typeof u=="number")l||(l=!0,s(u));else if(u.tag)l||(i(u[0]),s(u));else{var f=u[0];s(tt(0,[function(v){if(!l)return v&&(l=!0),f(v)}]))}})}}}function _b(i){i(0)}function Ob(i){return function(n){return function(s){function l(I){b&&(typeof I=="number"?(b=!1,S?s(I):f||(f=!0,u(0))):I.tag?(s(I),k?k=!1:v(0)):(v=I=I[0],k=!1,I(0)))}let u=vt,f=!1,v=vt,b=!1,k=!1,S=!1;n(function(I){typeof I=="number"?S||(S=!0,b||s(0)):I.tag?S||(b&&(v(1),v=vt),f?f=!1:(f=!0,u(0)),I=i(I[0]),b=!0,I(l)):u=I[0]}),s(tt(0,[function(I){if(I){if(S||(S=!0,u(1)),b)return b=!1,v(1)}else S||f||(f=!0,u(0)),b&&!k&&(k=!0,v(0))}]))}}}function Mb(i){return function(n){return function(s){let l=[],u=vt;return n(function(f){typeof f=="number"?Pa(l)(s):f.tag?(l.length>=i&&0<i&&l.shift(),l.push(f[0]),u(0)):(f=f[0],0>=i?(f(1),La(s)):(u=f,f(0)))})}}}function Ia(i){return function(n){let s=vt,l=!1;return n(function(u){typeof u=="number"?l=!0:u.tag?l||(i(u[0]),s(0)):(s=u=u[0],u(0))}),{unsubscribe:function(){if(!l)return l=!0,s(1)}}}}function Nb(){}function Rb(i){return function(n){return function(s){function l(S){typeof S=="number"?k||(k=!0,f(1),0<u.length&&s(tt(1,[u])),s(0)):S.tag?!k&&0<u.length&&(S=u,u=[],s(tt(1,[S]))):v=S[0]}let u=[],f=vt,v=vt,b=!1,k=!1;n(function(S){typeof S=="number"?k||(k=!0,v(1),0<u.length&&s(tt(1,[u])),s(0)):S.tag?k||(u.push(S[0]),b?b=!1:(b=!0,f(0),v(0))):(f=S[0],i(l))}),s(tt(0,[function(S){if(!k){if(S)return k=!0,f(1),v(1);if(!b)return b=!0,f(0),v(0)}}]))}}}function Qe(i){return function(n){return function(s){let l=vt;return n(function(u){typeof u=="number"?s(u):u.tag?i(u[0])?s(u):l(0):(l=u[0],s(u))})}}}function vo(i){return function(n){let s=!1;i.then(function(l){return s||(n(tt(1,[l])),n(0)),Promise.resolve(void 0)}),n(tt(0,[function(l){l&&(s=!0)}]))}}function bo(i){return function(n){let s=!1;n(tt(0,[function(l){l?s=!0:s||(s=!0,n(tt(1,[i])),n(0))}]))}}function Md(i){return function(n){let s=Tb,l=!1;s=i({next:function(u){l||n(tt(1,[u]))},complete:function(){l||(l=!0,n(0))}}),n(tt(0,[function(u){if(u&&!l)return l=!0,s()}]))}}function Nd(){let i=[],n=!1;return{source:function(s){function l(u){return u!==s}i=i.concat(s),s(tt(0,[function(u){u&&(i=i.filter(l))}]))},next:function(s){n||i.forEach(function(l){l(tt(1,[s]))})},complete:function(){n||(n=!0,i.forEach(Pb))}}}function Nt(i){return function(n){return function(s){return n(function(l){l=typeof l=="number"?0:l.tag?tt(1,[i(l[0])]):tt(0,[l[0]]),s(l)})}}}function si(i){return Fn(Ib)(Pa(i))}function yo(i){return function(n){return function(s){let l=!1;return n(function(u){if(typeof u=="number")return l?void 0:(l=!0,s(u),i());if(u.tag)l||s(u);else{var f=u[0];s(tt(0,[function(v){if(!l)return v?(l=!0,f(v),i()):f(v)}]))}})}}}function wo(i){return function(n){return function(s){return n(function(l){typeof l=="number"||l.tag?s(l):(s(l),i())})}}}function Fb(i){return Ia(Nb)(i)}function Kt(i){function n(f){typeof f=="number"?(s.forEach(_b),s=[]):f.tag?(u=!1,s.forEach(function(v){v(f)})):l=f[0]}let s=[],l=vt,u=!1;return function(f){function v(b){return b!==f}s=s.concat(f),s.length===1&&i(n),f(tt(0,[function(b){if(b){if(s=s.filter(v),s.length===0)return l(1)}else u||(u=!0,l(b))}]))}}function Db(i){return function(n){return function(s){function l(S){typeof S=="number"?v&&(k=!0,u(1)):S.tag?(v=!1,f(1)):(f=S=S[0],S(0))}let u=vt,f=vt,v=!0,b=!1,k=!1;n(function(S){typeof S=="number"?(v&&f(1),k=!0,s(0)):S.tag?v||k?b?b=!1:(b=!0,u(0),f(0)):(b=!1,s(S)):(u=S[0],i(l))}),s(tt(0,[function(S){if(!k)if(S){if(k=!0,u(1),v)return f(1)}else b||(b=!0,v&&f(0),u(0))}]))}}}function Dn(i){return function(n){return function(s){let l=!1,u=0,f=vt;n(function(v){typeof v=="number"?l||(l=!0,s(0)):v.tag?u<i&&!l&&(u=u+1|0,s(v),!l&&u>=i&&(l=!0,s(0),f(1))):(v=v[0],0>=i?(l=!0,s(0),v(1)):f=v)}),s(tt(0,[function(v){if(!l){if(v)return l=!0,f(1);if(u<i)return f(0)}}]))}}}function is(i){return function(n){return function(s){function l(b){typeof b!="number"&&(b.tag?(u=!0,f(1),s(0)):(v=b=b[0],b(0)))}let u=!1,f=vt,v=vt;n(function(b){typeof b=="number"?u||(u=!0,v(1),s(0)):b.tag?u||s(b):(f=b[0],i(l))}),s(tt(0,[function(b){if(!u)return b?(u=!0,f(1),v(1)):f(0)}]))}}}function ns(i){return new Promise(function(n){Mb(1)(i)(function(s){typeof s!="number"&&(s.tag?n(s[0]):s[0](0))})})}typeof Symbol=="function"&&(Symbol.observable||(Symbol.observable=Symbol("observable")));function zb(i){return typeof i=="string"?new go(i):typeof i=="object"&&i.message?new go(i.message,i.nodes,i.source,i.positions,i.path,i,i.extensions||{}):i}var yl=function(i){function n(s){var l=s.networkError,u=s.response,f=(s.graphQLErrors||[]).map(zb),v=function(k,S){var I="";return k!==void 0?I="[Network] "+k.message:(S!==void 0&&S.forEach(function(N){I+="[GraphQL] "+N.message+`
`}),I.trim())}(l,f);i.call(this,v),this.name="CombinedError",this.message=v,this.graphQLErrors=f,this.networkError=l,this.response=u}return i&&(n.__proto__=i),(n.prototype=Object.create(i&&i.prototype)).constructor=n,n.prototype.toString=function(){return this.message},n}(Error);function Rd(i,n){i|=0;for(var s=0,l=0|n.length;s<l;s++)i=(i<<5)+i+n.charCodeAt(s);return i}function Uc(i){return Rd(5381,i)>>>0}var ha=new Set,qc=new WeakMap;function or(i){if(i===null||ha.has(i))return"null";if(typeof i!="object")return JSON.stringify(i)||"";if(i.toJSON)return or(i.toJSON());if(Array.isArray(i)){for(var n="[",s=0,l=i.length;s<l;s++){s>0&&(n+=",");var u=or(i[s]);n+=u.length>0?u:"null"}return n+="]"}var f=Object.keys(i).sort();if(!f.length&&i.constructor&&i.constructor!==Object){var v=qc.get(i)||Math.random().toString(36).slice(2);return qc.set(i,v),'{"__key":"'+v+'"}'}ha.add(i);for(var b="{",k=0,S=f.length;k<S;k++){var I=f[k],N=or(i[I]);N&&(b.length>1&&(b+=","),b+=or(I)+":"+N)}return ha.delete(i),b+="}"}function zn(i){return ha.clear(),or(i)}var Xb=/("{3}[\s\S]*"{3}|"(?:\\.|[^"])*")/g,Hb=/([\s,]|#[^\n\r]+)+/g;function Yb(i,n){return n%2==0?i.replace(Hb," ").trim():i}function Is(i){var n=(typeof i!="string"?i.loc&&i.loc.source.body||Id(i):i).split(Xb).map(Yb).join("");if(typeof i!="string"){var s="definitions"in i&&Dd(i);s&&(n="# "+s+`
`+n),i.loc||(i.loc={start:0,end:n.length,source:{body:n,name:"gql",locationOffset:{line:1,column:1}}})}return n}var _s=new Map;function Fd(i){var n,s;return typeof i=="string"?(n=Uc(Is(i)),s=_s.get(n)||Td(i,{noLocation:!0})):(n=i.__key||Uc(Is(i)),s=_s.get(n)||i),s.loc||Is(s),s.__key=n,_s.set(n,s),s}function fi(i,n){n||(n={});var s=Fd(i);return{key:Rd(s.__key,zn(n))>>>0,query:s,variables:n}}function Dd(i){for(var n=0,s=i.definitions.length;n<s;n++){var l=i.definitions[n];if(l.kind===we.OPERATION_DEFINITION&&l.name)return l.name.value}}function Bb(i){for(var n=0,s=i.definitions.length;n<s;n++){var l=i.definitions[n];if(l.kind===we.OPERATION_DEFINITION)return l.operation}}function ut(){return(ut=Object.assign||function(i){for(var n=1;n<arguments.length;n++){var s=arguments[n];for(var l in s)Object.prototype.hasOwnProperty.call(s,l)&&(i[l]=s[l])}return i}).apply(this,arguments)}function Os(i,n,s){if(!("data"in n)&&!("errors"in n)||"path"in n)throw new Error("No Content");return{operation:i,data:n.data,error:Array.isArray(n.errors)?new yl({graphQLErrors:n.errors,response:s}):void 0,extensions:typeof n.extensions=="object"&&n.extensions||void 0,hasNext:!!n.hasNext}}function Wb(i,n,s){var l=ut({},i);if(l.hasNext=!!n.hasNext,!("path"in n))return"data"in n&&(l.data=n.data),l;Array.isArray(n.errors)&&(l.error=new yl({graphQLErrors:l.error?l.error.graphQLErrors.concat(n.errors):n.errors,response:s}));for(var u=l.data=ut({},l.data),f=0,v;f<n.path.length;)u=u[v=n.path[f++]]=Array.isArray(u[v])?[].concat(u[v]):ut({},u[v]);return ut(u,n.data),l}function Vb(i,n,s){return{operation:i,data:void 0,error:new yl({networkError:n,response:s}),extensions:void 0}}function zd(i){return i.kind==="query"&&!!i.context.preferGetMethod}function Xd(i){return{query:Id(i.query),operationName:Dd(i.query),variables:i.variables||void 0,extensions:void 0}}function ko(i,n){var s=zd(i),l=i.context.url;if(!s||!n)return l;var u=[];return n.operationName&&u.push("operationName="+encodeURIComponent(n.operationName)),n.query&&u.push("query="+encodeURIComponent(n.query.replace(/#[^\n\r]+/g," ").trim())),n.variables&&u.push("variables="+encodeURIComponent(zn(n.variables))),n.extensions&&u.push("extensions="+encodeURIComponent(zn(n.extensions))),l+"?"+u.join("&")}function Ao(i,n){var s=zd(i),l=typeof i.context.fetchOptions=="function"?i.context.fetchOptions():i.context.fetchOptions||{};return ut({},l,{body:!s&&n?JSON.stringify(n):void 0,method:s?"GET":"POST",headers:s?l.headers:ut({},{"content-type":"application/json"},l.headers)})}var Ms=typeof Symbol!="undefined"?Symbol.asyncIterator:null,jb=typeof TextDecoder!="undefined"?new TextDecoder:null,Gb=/content-type:[^\r\n]*application\/json/i,Ub=/boundary="?([^=";]+)"?/i;function Hd(i,n,s){var l=s.redirect==="manual"?400:300,u=i.context.fetch;return Md(function(f){var v=f.next,b=f.complete,k=typeof AbortController!="undefined"?new AbortController:null;k&&(s.signal=k.signal);var S=!1;function I(j,K,B){var Y=B.headers&&B.headers.get("Content-Type")||"";if(!/multipart\/mixed/i.test(Y))return B.json().then(function(ne){var Ae=Os(K,ne,B);S=!0,j(Ae)});var P="---",q=Y.match(Ub);q&&(P="--"+q[1]);var H,X=function(){};if(Ms&&B[Ms]){var Z=B[Ms]();H=Z.next.bind(Z)}else if("body"in B&&B.body){var U=B.body.getReader();X=U.cancel.bind(U),H=U.read.bind(U)}else throw new TypeError("Streaming requests unsupported");var te="",le=!0,pe=null,ve=null;return H().then(function ne(Ae){if(Ae.done)S=!0;else{var he=function(st){return st.constructor.name==="Buffer"?st.toString():jb.decode(st)}(Ae.value),Re=he.indexOf(P);for(Re>-1?Re+=te.length:Re=te.indexOf(P),te+=he;Re>-1;){var Fe=te.slice(0,Re),Me=te.slice(Re+P.length);if(le)le=!1;else{var Ne=Fe.indexOf(`\r
\r
`)+4,Be=Fe.slice(0,Ne),Yt=Fe.slice(Ne,Fe.lastIndexOf(`\r
`)),nt=void 0;if(Gb.test(Be))try{nt=JSON.parse(Yt),pe=ve=ve?Wb(ve,nt,B):Os(K,nt,B)}catch{}if(Me.slice(0,2)==="--"||nt&&!nt.hasNext){if(!ve)return j(Os(K,{},B));break}}Re=(te=Me).indexOf(P)}}if(pe&&(j(pe),pe=null),!Ae.done&&(!ve||ve.hasNext))return H().then(ne)}).finally(X)}var N=!1,O=!1,z;return Promise.resolve().then(function(){if(!N)return(u||fetch)(n,s)}).then(function(j){if(!!j)return O=(z=j).status<200||z.status>=l,I(v,i,z)}).then(b).catch(function(j){if(S)throw j;if(j.name!=="AbortError"){var K=Vb(i,O?new Error(z.statusText):j,z);v(K),b()}}),function(){N=!0,k&&k.abort()}})}function So(i,n){if(Array.isArray(i))for(var s=0;s<i.length;s++)So(i[s],n);else if(typeof i=="object"&&i!==null)for(var l in i)l==="__typename"&&typeof i[l]=="string"?n[i[l]]=0:So(i[l],n);return n}function qb(i){return Object.keys(So(i,{}))}var $c=function(i){if(i.selectionSet&&!i.selectionSet.selections.some(function(n){return n.kind===we.FIELD&&n.name.value==="__typename"&&!n.alias}))return ut({},i,{selectionSet:ut({},i.selectionSet,{selections:i.selectionSet.selections.concat([{kind:we.FIELD,name:{kind:we.NAME,value:"__typename"}}])})})},Kc=new Map;function qn(i){var n=Fd(i),s=Kc.get(n.__key);return s||(s=Ld(n,{Field:$c,InlineFragment:$c}),Object.defineProperty(s,"__key",{value:n.__key,enumerable:!1}),Kc.set(n.__key,s)),s}function Co(i){return!i||typeof i!="object"?i:Object.keys(i).reduce(function(n,s){var l=i[s];return s==="__typename"?Object.defineProperty(n,"__typename",{enumerable:!1,value:l}):Array.isArray(l)?n[s]=l.map(Co):l&&typeof l=="object"&&"__typename"in l?n[s]=Co(l):n[s]=l,n},Array.isArray(i)?[]:{})}function Zc(i){return i.toPromise=function(){return ns(Dn(1)(Qe(function(n){return!n.stale&&!n.hasNext})(i)))},i}function yi(i,n,s){return s||(s=n.context),{key:n.key,query:n.query,variables:n.variables,kind:i,context:s}}function Jc(i,n){return yi(i.kind,i,ut({},i.context,{meta:ut({},i.context.meta,n)}))}function Yd(){}function Ns(i){var n=i.kind;return n!=="mutation"&&n!=="query"}function $b(i){var n=i.forward,s=i.client;i.dispatchDebug;var l=new Map,u=Object.create(null);function f(b){var k=yi(b.kind,b);return k.query=qn(b.query),k}function v(b){var k=b.context.requestPolicy;return b.kind==="query"&&k!=="network-only"&&(k==="cache-only"||l.has(b.key))}return function(b){var k=Kt(b),S=Nt(function(N){var O=l.get(N.key),z=ut({},O,{operation:Jc(N,{cacheOutcome:O?"hit":"miss"})});return N.context.requestPolicy==="cache-and-network"&&(z.stale=!0,Qc(s,N)),z})(Qe(function(N){return!Ns(N)&&v(N)})(k)),I=Un(function(N){var O=N.operation;if(!!O){var z=qb(N.data).concat(O.context.additionalTypenames||[]);if(N.operation.kind==="mutation"){for(var j=new Set,K=0;K<z.length;K++){var B=z[K],Y=u[B]||(u[B]=new Set);Y.forEach(function(H){j.add(H)}),Y.clear()}j.forEach(function(H){l.has(H)&&(O=l.get(H).operation,l.delete(H),Qc(s,O))})}else if(O.kind==="query"&&N.data){l.set(O.key,N);for(var P=0;P<z.length;P++){var q=z[P];(u[q]||(u[q]=new Set)).add(O.key)}}}})(n(Qe(function(N){return N.kind!=="query"||N.context.requestPolicy!=="cache-only"})(Nt(function(N){return Jc(N,{cacheOutcome:"miss"})})(si([Nt(f)(Qe(function(N){return!Ns(N)&&!v(N)})(k)),Qe(function(N){return Ns(N)})(k)])))));return si([S,I])}}function Qc(i,n){return i.reexecuteOperation(yi(n.kind,n,ut({},n.context,{requestPolicy:"network-only"})))}function Kb(i){var n=i.forward;i.dispatchDebug;var s=new Set;function l(f){var v=f.key,b=f.kind;if(b==="teardown")return s.delete(v),!0;if(b!=="query"&&b!=="subscription")return!0;var k=s.has(v);return s.add(v),!k}function u(f){f.hasNext||s.delete(f.operation.key)}return function(f){var v=Qe(l)(f);return Un(u)(n(v))}}function Zb(i){var n=i.forward;return i.dispatchDebug,function(s){var l=Kt(s),u=Fn(function(v){var b=v.key,k=Qe(function(O){return O.kind==="teardown"&&O.key===b})(l),S=Xd(v),I=ko(v,S),N=Ao(v,S);return Un(function(O){O.data||O.error})(is(k)(Hd(v,I,N)))})(Qe(function(v){return v.kind==="query"||v.kind==="mutation"})(l)),f=n(Qe(function(v){return v.kind!=="query"&&v.kind!=="mutation"})(l));return si([u,f])}}function Bd(i){return i.dispatchDebug,function(n){return Qe(function(){return!1})(Un(function(s){if(s.kind!=="teardown"&&!1)var l})(n))}}Bd({dispatchDebug:Yd});function Jb(i){return function(n){var s=n.client;return n.dispatchDebug,i.reduceRight(function(l,u){return u({client:s,forward:l,dispatchDebug:function(v){}})},n.forward)}}var Qb=[Kb,$b,Zb],eh=function i(n){var s=new Map,l=new Map,u=[],f=Nd(),v=f.source,b=f.next,k=!1;function S(B){for(k=!0,B&&b(B);B=u.shift();)b(B);k=!1}function I(B){var Y=Qe(function(P){return P.operation.kind===B.kind&&P.operation.key===B.key&&(!P.operation.context._instance||P.operation.context._instance===B.context._instance)})(K);return O.maskTypename&&(Y=Nt(function(P){return ut({},P,{data:Co(P.data)})})(Y)),B.kind==="mutation"?Dn(1)(wo(function(){return S(B)})(Y)):Kt(yo(function(){s.delete(B.key),l.delete(B.key);for(var P=u.length-1;P>=0;P--)u[P].key===B.key&&u.splice(P,1);S(yi("teardown",B,B.context))})(Un(function(P){s.set(B.key,P)})(Ob(function(P){return B.kind!=="query"||P.stale?bo(P):si([bo(P),Nt(function(){return ut({},P,{stale:!0})})(Dn(1)(Qe(function(q){return q.kind==="query"&&q.key===B.key&&q.context.requestPolicy!=="cache-only"})(v)))])})(is(Qe(function(P){return P.kind==="teardown"&&P.key===B.key})(v))(Y)))))}var N=this instanceof i?this:Object.create(i.prototype),O=ut(N,{url:n.url,fetchOptions:n.fetchOptions,fetch:n.fetch,suspense:!!n.suspense,requestPolicy:n.requestPolicy||"cache-first",preferGetMethod:!!n.preferGetMethod,maskTypename:!!n.maskTypename,operations$:v,reexecuteOperation:function(Y){(Y.kind==="mutation"||l.has(Y.key))&&(u.push(Y),k||Promise.resolve().then(S))},createOperationContext:function(Y){return Y||(Y={}),ut({},{_instance:void 0,url:O.url,fetchOptions:O.fetchOptions,fetch:O.fetch,preferGetMethod:O.preferGetMethod},Y,{suspense:Y.suspense||Y.suspense!==!1&&O.suspense,requestPolicy:Y.requestPolicy||O.requestPolicy})},createRequestOperation:function(Y,P,q){Bb(P.query);var H=O.createOperationContext(q);return Y==="mutation"&&(H._instance=[]),yi(Y,P,H)},executeRequestOperation:function(Y){return Y.kind==="mutation"?I(Y):Md(function(P){var q=l.get(Y.key);q||l.set(Y.key,q=I(Y));var H=Y.context.requestPolicy==="cache-and-network"||Y.context.requestPolicy==="network-only";return Ia(P.next)(yo(P.complete)(wo(function(){var X=s.get(Y.key);if(Y.kind==="subscription")return S(Y);H&&S(Y),X!=null&&X===s.get(Y.key)?P.next(H?ut({},X,{stale:!0}):X):H||S(Y)})(q))).unsubscribe})},executeQuery:function(Y,P){var q=O.createRequestOperation("query",Y,P);return O.executeRequestOperation(q)},executeSubscription:function(Y,P){var q=O.createRequestOperation("subscription",Y,P);return O.executeRequestOperation(q)},executeMutation:function(Y,P){var q=O.createRequestOperation("mutation",Y,P);return O.executeRequestOperation(q)},query:function(Y,P,q){return(!q||typeof q.suspense!="boolean")&&(q=ut({},q,{suspense:!1})),Zc(O.executeQuery(fi(Y,P),q))},readQuery:function(Y,P,q){var H=null;return Ia(function(X){H=X})(O.query(Y,P,q)).unsubscribe(),H},subscription:function(Y,P,q){return O.executeSubscription(fi(Y,P),q)},mutation:function(Y,P,q){return Zc(O.executeMutation(fi(Y,P),q))}}),z=Yd,j=Jb(n.exchanges!==void 0?n.exchanges:Qb),K=Kt(j({client:O,dispatchDebug:z,forward:Bd({dispatchDebug:z})})(v));return Fb(K),O};function ua(){return(ua=Object.assign||function(i){for(var n=1;n<arguments.length;n++){var s=arguments[n];for(var l in s)Object.prototype.hasOwnProperty.call(s,l)&&(i[l]=s[l])}return i}).apply(this,arguments)}function y0(i,n){var s;Ke(n)?s=n:s=Ge(n instanceof eh?n:new eh(n)),i.provide("$urql",s)}function Wd(){var i=Lt("$urql");return i}function Eo(i){return i&&Ke(i)?i.value:i}var th={flush:"pre"};function w0(i){return ey(i)}function ey(i,n,s){n===void 0&&(n=Wd()),s===void 0&&(s=[]);var l=Pt(i),u=Ge(),f=Ge(!1),v=Ge(!1),b=Ge(),k=Ge(),S=Ge(),I=Ke(i.pause)?i.pause:Ge(!!i.pause),N=Ge(fi(l.query,Eo(l.variables))),O=Ge();s.push(ta(function(){var K=fi(l.query,Eo(l.variables));N.value.key!==K.key&&(N.value=K)},th)),s.push(ta(function(){O.value=I.value?void 0:n.value.executeQuery(N.value,ua({},{requestPolicy:l.requestPolicy},l.context))},th));var z={data:u,stale:f,error:b,operation:k,extensions:S,fetching:v,isPaused:I,executeQuery:function(B){return O.value=n.value.executeQuery(N.value,ua({},{requestPolicy:l.requestPolicy},l.context,B)),j},pause:function(){I.value=!0},resume:function(){I.value=!1}};s.push(ta(function(K){O.value?(v.value=!0,f.value=!1,K(Ia(function(B){u.value=B.data,f.value=!!B.stale,v.value=!1,b.value=B.error,k.value=B.operation,S.value=B.extensions})(yo(function(){v.value=!1,f.value=!1})(O.value)).unsubscribe)):(v.value=!1,f.value=!1)},{flush:"sync"}));var j=ua({},z,{then:function(B,Y){return(O.value?ns(Nt(function(){return z})(Dn(1)(O.value))):Promise.resolve(z)).then(B,Y)}});return j}function k0(i){return ty(i)}function ty(i,n){n===void 0&&(n=Wd());var s=Ge(),l=Ge(!1),u=Ge(!1),f=Ge(),v=Ge(),b=Ge();return{data:s,stale:l,fetching:u,error:f,operation:v,extensions:b,executeMutation:function(S,I){return u.value=!0,ns(Dn(1)(n.value.executeMutation(fi(i,Eo(S)),I||{}))).then(function(N){return s.value=N.data,l.value=!!N.stale,u.value=!1,f.value=N.error,v.value=N.operation,b.value=N.extensions,N})}}}var rs=(i,n)=>{const s=Pt(i);for(const l in i)Ka(n,l,()=>s[l],u=>{s[l]=u});return n};function iy(i,n=250,s){let l;function u(){const f=arguments,v=()=>{l=void 0,s!==!0&&i.apply(this,f)};clearTimeout(l),s===!0&&l===void 0&&i.apply(this,f),l=setTimeout(v,n)}return u.cancel=()=>{clearTimeout(l)},u}const Rs=["sm","md","lg","xl"],{passive:ih}=bi;var ny=rs({width:0,height:0,name:"xs",sizes:{sm:600,md:1024,lg:1440,xl:1920},lt:{sm:!0,md:!0,lg:!0,xl:!0},gt:{xs:!1,sm:!1,md:!1,lg:!1},xs:!0,sm:!1,md:!1,lg:!1,xl:!1},{setSizes:rn,setDebounce:rn,install({$q:i,onSSRHydrated:n}){if(i.screen=this,this.__installed===!0){i.config.screen!==void 0&&(i.config.screen.bodyClasses===!1?document.body.classList.remove(`screen--${this.name}`):this.__update(!0));return}const{visualViewport:s}=window,l=s||window,u=document.scrollingElement||document.documentElement,f=s===void 0||$t.is.mobile===!0?()=>[Math.max(window.innerWidth,u.clientWidth),Math.max(window.innerHeight,u.clientHeight)]:()=>[s.width*s.scale+window.innerWidth-u.clientWidth,s.height*s.scale+window.innerHeight-u.clientHeight],v=i.config.screen!==void 0&&i.config.screen.bodyClasses===!0;this.__update=N=>{const[O,z]=f();if(z!==this.height&&(this.height=z),O!==this.width)this.width=O;else if(N!==!0)return;let j=this.sizes;this.gt.xs=O>=j.sm,this.gt.sm=O>=j.md,this.gt.md=O>=j.lg,this.gt.lg=O>=j.xl,this.lt.sm=O<j.sm,this.lt.md=O<j.md,this.lt.lg=O<j.lg,this.lt.xl=O<j.xl,this.xs=this.lt.sm,this.sm=this.gt.xs===!0&&this.lt.md===!0,this.md=this.gt.sm===!0&&this.lt.lg===!0,this.lg=this.gt.md===!0&&this.lt.xl===!0,this.xl=this.gt.lg,j=this.xs===!0&&"xs"||this.sm===!0&&"sm"||this.md===!0&&"md"||this.lg===!0&&"lg"||"xl",j!==this.name&&(v===!0&&(document.body.classList.remove(`screen--${this.name}`),document.body.classList.add(`screen--${j}`)),this.name=j)};let b,k={},S=16;this.setSizes=N=>{Rs.forEach(O=>{N[O]!==void 0&&(k[O]=N[O])})},this.setDebounce=N=>{S=N};const I=()=>{const N=getComputedStyle(document.body);N.getPropertyValue("--q-size-sm")&&Rs.forEach(O=>{this.sizes[O]=parseInt(N.getPropertyValue(`--q-size-${O}`),10)}),this.setSizes=O=>{Rs.forEach(z=>{O[z]&&(this.sizes[z]=O[z])}),this.__update(!0)},this.setDebounce=O=>{b!==void 0&&l.removeEventListener("resize",b,ih),b=O>0?iy(this.__update,O):this.__update,l.addEventListener("resize",b,ih)},this.setDebounce(S),Object.keys(k).length>0?(this.setSizes(k),k=void 0):this.__update(),v===!0&&this.name==="xs"&&document.body.classList.add("screen--xs")};vi.value===!0?n.push(I):I()}});const mt=rs({isActive:!1,mode:!1},{__media:void 0,set(i){mt.mode=i,i==="auto"?(mt.__media===void 0&&(mt.__media=window.matchMedia("(prefers-color-scheme: dark)"),mt.__updateMedia=()=>{mt.set("auto")},mt.__media.addListener(mt.__updateMedia)),i=mt.__media.matches):mt.__media!==void 0&&(mt.__media.removeListener(mt.__updateMedia),mt.__media=void 0),mt.isActive=i===!0,document.body.classList.remove(`body--${i===!0?"light":"dark"}`),document.body.classList.add(`body--${i===!0?"dark":"light"}`)},toggle(){mt.set(mt.isActive===!1)},install({$q:i,onSSRHydrated:n,ssrContext:s}){const{dark:l}=i.config;if(i.dark=this,this.__installed===!0&&l===void 0)return;this.isActive=l===!0;const u=l!==void 0?l:!1;if(vi.value===!0){const f=b=>{this.__fromSSR=b},v=this.set;this.set=f,f(u),n.push(()=>{this.set=v,this.set(this.__fromSSR)})}else this.set(u)}}),Vd=()=>!0;function ry(i){return typeof i=="string"&&i!==""&&i!=="/"&&i!=="#/"}function ay(i){return i.startsWith("#")===!0&&(i=i.substr(1)),i.startsWith("/")===!1&&(i="/"+i),i.endsWith("/")===!0&&(i=i.substr(0,i.length-1)),"#"+i}function sy(i){if(i.backButtonExit===!1)return()=>!1;if(i.backButtonExit==="*")return Vd;const n=["#/"];return Array.isArray(i.backButtonExit)===!0&&n.push(...i.backButtonExit.filter(ry).map(ay)),()=>n.includes(window.location.hash)}var oy={__history:[],add:rn,remove:rn,install({$q:i}){if(this.__installed===!0)return;const{cordova:n,capacitor:s}=$t.is;if(n!==!0&&s!==!0)return;const l=i.config[n===!0?"cordova":"capacitor"];if(l!==void 0&&l.backButton===!1||s===!0&&(window.Capacitor===void 0||window.Capacitor.Plugins.App===void 0))return;this.add=v=>{v.condition===void 0&&(v.condition=Vd),this.__history.push(v)},this.remove=v=>{const b=this.__history.indexOf(v);b>=0&&this.__history.splice(b,1)};const u=sy(Object.assign({backButtonExit:!0},l)),f=()=>{if(this.__history.length){const v=this.__history[this.__history.length-1];v.condition()===!0&&(this.__history.pop(),v.handler())}else u()===!0?navigator.app.exitApp():window.history.back()};n===!0?document.addEventListener("deviceready",()=>{document.addEventListener("backbutton",f,!1)}):window.Capacitor.Plugins.App.addListener("backButton",f)}},nh={isoName:"en-US",nativeName:"English (US)",label:{clear:"Clear",ok:"OK",cancel:"Cancel",close:"Close",set:"Set",select:"Select",reset:"Reset",remove:"Remove",update:"Update",create:"Create",search:"Search",filter:"Filter",refresh:"Refresh"},date:{days:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),daysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),firstDayOfWeek:0,format24h:!1,pluralDay:"days"},table:{noData:"No data available",noResults:"No matching records found",loading:"Loading...",selectedRecords:i=>i===1?"1 record selected.":(i===0?"No":i)+" records selected.",recordsPerPage:"Records per page:",allRows:"All",pagination:(i,n,s)=>i+"-"+n+" of "+s,columns:"Columns"},editor:{url:"URL",bold:"Bold",italic:"Italic",strikethrough:"Strikethrough",underline:"Underline",unorderedList:"Unordered List",orderedList:"Ordered List",subscript:"Subscript",superscript:"Superscript",hyperlink:"Hyperlink",toggleFullscreen:"Toggle Fullscreen",quote:"Quote",left:"Left align",center:"Center align",right:"Right align",justify:"Justify align",print:"Print",outdent:"Decrease indentation",indent:"Increase indentation",removeFormat:"Remove formatting",formatting:"Formatting",fontSize:"Font Size",align:"Align",hr:"Insert Horizontal Rule",undo:"Undo",redo:"Redo",heading1:"Heading 1",heading2:"Heading 2",heading3:"Heading 3",heading4:"Heading 4",heading5:"Heading 5",heading6:"Heading 6",paragraph:"Paragraph",code:"Code",size1:"Very small",size2:"A bit small",size3:"Normal",size4:"Medium-large",size5:"Big",size6:"Very big",size7:"Maximum",defaultFont:"Default Font",viewSource:"View Source"},tree:{noNodes:"No nodes available",noResults:"No matching nodes found"}};function rh(){const i=Array.isArray(navigator.languages)===!0&&navigator.languages.length>0?navigator.languages[0]:navigator.language;if(typeof i=="string")return i.split(/[-_]/).map((n,s)=>s===0?n.toLowerCase():s>1||n.length<4?n.toUpperCase():n[0].toUpperCase()+n.slice(1).toLowerCase()).join("-")}const Oi=rs({__langPack:{}},{getLocale:rh,set(i=nh,n){const s=gs(dn({},i),{rtl:i.rtl===!0,getLocale:rh});{const l=document.documentElement;l.setAttribute("dir",s.rtl===!0?"rtl":"ltr"),l.setAttribute("lang",s.isoName),s.set=Oi.set,Object.assign(Oi.__langPack,s),Oi.props=s,Oi.isoName=s.isoName,Oi.nativeName=s.nativeName}},install({$q:i,lang:n,ssrContext:s}){i.lang=Oi.__langPack,this.__installed===!0?n!==void 0&&this.set(n):this.set(n||nh)}});function ly(i,n,s=document.body){if(typeof i!="string")throw new TypeError("Expected a string as propName");if(typeof n!="string")throw new TypeError("Expected a string as value");if(!(s instanceof Element))throw new TypeError("Expected a DOM element");s.style.setProperty(`--q-${i}`,n)}let jd=!1;function cy(i){jd=i.isComposing===!0}function hy(i){return jd===!0||i!==Object(i)||i.isComposing===!0||i.qKeyEvent===!0}function A0(i,n){return hy(i)===!0?!1:[].concat(n).includes(i.keyCode)}function uy(i){if(i.ios===!0)return"ios";if(i.android===!0)return"android"}function dy({is:i,has:n,within:s},l){const u=[i.desktop===!0?"desktop":"mobile",`${n.touch===!1?"no-":""}touch`];if(i.mobile===!0){const f=uy(i);f!==void 0&&u.push("platform-"+f)}if(i.nativeMobile===!0){const f=i.nativeMobileWrapper;u.push(f),u.push("native-mobile"),i.ios===!0&&(l[f]===void 0||l[f].iosStatusBarPadding!==!1)&&u.push("q-ios-padding")}else i.electron===!0?u.push("electron"):i.bex===!0&&u.push("bex");return s.iframe===!0&&u.push("within-iframe"),u}function fy(){const i=document.body.className;let n=i;Za!==void 0&&(n=n.replace("desktop","platform-ios mobile")),$t.has.touch===!0&&(n=n.replace("no-touch","touch")),$t.within.iframe===!0&&(n+=" within-iframe"),i!==n&&(document.body.className=n)}function py(i){for(const n in i)ly(n,i[n])}var gy={install(i){if(this.__installed!==!0){if(vi.value===!0)fy();else{const{$q:n}=i;n.config.brand!==void 0&&py(n.config.brand);const s=dy($t,n.config);document.body.classList.add.apply(document.body.classList,s)}$t.is.ios===!0&&document.body.addEventListener("touchstart",rn),window.addEventListener("keydown",cy,!0)}}},xy={name:"material-icons",type:{positive:"check_circle",negative:"warning",info:"info",warning:"priority_high"},arrow:{up:"arrow_upward",right:"arrow_forward",down:"arrow_downward",left:"arrow_back",dropdown:"arrow_drop_down"},chevron:{left:"chevron_left",right:"chevron_right"},colorPicker:{spectrum:"gradient",tune:"tune",palette:"style"},pullToRefresh:{icon:"refresh"},carousel:{left:"chevron_left",right:"chevron_right",up:"keyboard_arrow_up",down:"keyboard_arrow_down",navigationIcon:"lens"},chip:{remove:"cancel",selected:"check"},datetime:{arrowLeft:"chevron_left",arrowRight:"chevron_right",now:"access_time",today:"today"},editor:{bold:"format_bold",italic:"format_italic",strikethrough:"strikethrough_s",underline:"format_underlined",unorderedList:"format_list_bulleted",orderedList:"format_list_numbered",subscript:"vertical_align_bottom",superscript:"vertical_align_top",hyperlink:"link",toggleFullscreen:"fullscreen",quote:"format_quote",left:"format_align_left",center:"format_align_center",right:"format_align_right",justify:"format_align_justify",print:"print",outdent:"format_indent_decrease",indent:"format_indent_increase",removeFormat:"format_clear",formatting:"text_format",fontSize:"format_size",align:"format_align_left",hr:"remove",undo:"undo",redo:"redo",heading:"format_size",code:"code",size:"format_size",font:"font_download",viewSource:"code"},expansionItem:{icon:"keyboard_arrow_down",denseIcon:"arrow_drop_down"},fab:{icon:"add",activeIcon:"close"},field:{clear:"cancel",error:"error"},pagination:{first:"first_page",prev:"keyboard_arrow_left",next:"keyboard_arrow_right",last:"last_page"},rating:{icon:"grade"},stepper:{done:"check",active:"edit",error:"warning"},tabs:{left:"chevron_left",right:"chevron_right",up:"keyboard_arrow_up",down:"keyboard_arrow_down"},table:{arrowUp:"arrow_upward",warning:"warning",firstPage:"first_page",prevPage:"chevron_left",nextPage:"chevron_right",lastPage:"last_page"},tree:{icon:"play_arrow"},uploader:{done:"done",clear:"clear",add:"add_box",upload:"cloud_upload",removeQueue:"clear_all",removeUploaded:"done_all"}};const _a=rs({iconMapFn:null,__icons:{}},{set(i,n){const s=gs(dn({},i),{rtl:i.rtl===!0});s.set=_a.set,Object.assign(_a.__icons,s)},install({$q:i,iconSet:n,ssrContext:s}){i.config.iconMapFn!==void 0&&(this.iconMapFn=i.config.iconMapFn),i.iconSet=this.__icons,Ka(i,"iconMapFn",()=>this.iconMapFn,l=>{this.iconMapFn=l}),this.__installed===!0?n!==void 0&&this.set(n):this.set(n||xy)}}),ah={};let Gd=!1;function my(){Gd=!0}const vy=typeof Map=="function",by=typeof Set=="function",yy=typeof ArrayBuffer=="function";function Fs(i,n){if(i===n)return!0;if(i!==null&&n!==null&&typeof i=="object"&&typeof n=="object"){if(i.constructor!==n.constructor)return!1;let s,l;if(i.constructor===Array){if(s=i.length,s!==n.length)return!1;for(l=s;l--!==0;)if(Fs(i[l],n[l])!==!0)return!1;return!0}if(vy===!0&&i.constructor===Map){if(i.size!==n.size)return!1;for(l=i.entries().next();l.done!==!0;){if(n.has(l.value[0])!==!0)return!1;l=l.next()}for(l=i.entries().next();l.done!==!0;){if(Fs(l.value[1],n.get(l.value[0]))!==!0)return!1;l=l.next()}return!0}if(by===!0&&i.constructor===Set){if(i.size!==n.size)return!1;for(l=i.entries().next();l.done!==!0;){if(n.has(l.value[0])!==!0)return!1;l=l.next()}return!0}if(yy===!0&&i.buffer!=null&&i.buffer.constructor===ArrayBuffer){if(s=i.length,s!==n.length)return!1;for(l=s;l--!==0;)if(i[l]!==n[l])return!1;return!0}if(i.constructor===RegExp)return i.source===n.source&&i.flags===n.flags;if(i.valueOf!==Object.prototype.valueOf)return i.valueOf()===n.valueOf();if(i.toString!==Object.prototype.toString)return i.toString()===n.toString();const u=Object.keys(i).filter(f=>i[f]!==void 0);if(s=u.length,s!==Object.keys(n).filter(f=>n[f]!==void 0).length)return!1;for(l=s;l--!==0;){const f=u[l];if(Fs(i[f],n[f])!==!0)return!1}return!0}return i!==i&&n!==n}function sh(i){return i!==null&&typeof i=="object"&&Array.isArray(i)!==!0}function S0(i){return Object.prototype.toString.call(i)==="[object Date]"}function C0(i){return typeof i=="number"&&isFinite(i)}const oh=[ro,gy,mt,ny,oy,Oi,_a];function lh(i,n){n.forEach(s=>{s.install(i),s.__installed=!0})}function wy(i,n,s){i.config.globalProperties.$q=s.$q,i.provide(xm,s.$q),lh(s,oh),n.components!==void 0&&Object.values(n.components).forEach(l=>{sh(l)===!0&&l.name!==void 0&&i.component(l.name,l)}),n.directives!==void 0&&Object.values(n.directives).forEach(l=>{sh(l)===!0&&l.name!==void 0&&i.directive(l.name,l)}),n.plugins!==void 0&&lh(s,Object.values(n.plugins).filter(l=>typeof l.install=="function"&&oh.includes(l)===!1)),vi.value===!0&&(s.$q.onSSRHydrated=()=>{s.onSSRHydrated.forEach(l=>{l()}),s.$q.onSSRHydrated=()=>{}})}var ky=function(i,n={}){const s={version:"2.6.2"};Gd===!1?(n.config!==void 0&&Object.assign(ah,n.config),s.config=dn({},ah),my()):s.config=n.config||{},wy(i,n,{parentApp:i,$q:s,lang:n.lang,iconSet:n.iconSet,onSSRHydrated:[]})},E0={version:"2.6.2",install:ky,lang:Oi,iconSet:_a};function Ud(){return(Ud=Object.assign||function(i){for(var n=1;n<arguments.length;n++){var s=arguments[n];for(var l in s)Object.prototype.hasOwnProperty.call(s,l)&&(i[l]=s[l])}return i}).apply(this,arguments)}function Ds(i,n){return yi(i.kind,i,Ud({},i.context,{authAttempt:n}))}function T0(i){var n=i.addAuthToOperation,s=i.getAuth,l=i.didAuthError,u=i.willAuthError;return function(f){var v=f.client,b=f.forward,k=new Map,S=Nd(),I=S.source,N=S.next,O=null;return function(z){function j(U,te,le){var pe=v.createRequestOperation("mutation",fi(U,te),le);return ns(Dn(1)(Qe(function(ve){return ve.operation.key===pe.key})(wo(function(){return N(pe)})(Z))))}function K(U){O=U,B=void 0,k.forEach(N),k.clear()}var B=Promise.resolve().then(function(){return s({authState:O,mutate:j})}).then(K);function Y(U){U=Ds(U,!0),k.set(U.key,U),B||(B=s({authState:O,mutate:j}).then(K).catch(function(){return K(null)}))}var P=Kt(z),q=Qe(function(U){return U.kind==="teardown"})(P),H=Qe(function(U){return U.kind!=="teardown"})(P),X=Nt(function(U){return n({operation:U,authState:O})})(si([I,Fn(function(U){if(k.has(U.key))return La;if(!B&&u&&u({operation:U,authState:O}))return Y(U),La;if(!B)return bo(Ds(U,!1));var te=Qe(function(le){return le.kind==="teardown"&&le.key===U.key})(P);return is(te)(Nt(function(){return Ds(U,!1)})(vo(B)))})(H)])),Z=Kt(b(si([X,q])));return Qe(function(U){var te=U.error,le=U.operation;return te&&l&&l({error:te,authState:O})&&!le.context.authAttempt?(Y(le),!1):!0})(Z)}}}function Xn(){return(Xn=Object.assign||function(i){for(var n=1;n<arguments.length;n++){var s=arguments[n];for(var l in s)Object.prototype.hasOwnProperty.call(s,l)&&(i[l]=s[l])}return i}).apply(this,arguments)}function It(i){return i.name.value}function qd(i){return i.typeCondition.name.value}function wl(i){return i.alias?i.alias.value:It(i)}function jt(i){return i.selectionSet?i.selectionSet.selections:[]}function $d(i){return i.typeCondition?It(i.typeCondition):null}function Kd(i){return i.kind===we.FIELD}function Ay(i){return i.kind===we.INLINE_FRAGMENT}function kl(i,n){var s={},l=0;if(i.arguments&&i.arguments.length)for(var u=0,f=i.arguments.length;u<f;u++){var v=i.arguments[u],b=Nn(v.value,n);b!=null&&(s[It(v)]=b,l++)}return l>0?s:null}function Sy(i,n){if(!(!n||!i.variableDefinitions)){for(var s={},l=0,u=i.variableDefinitions.length;l<u;l++){var f=It(i.variableDefinitions[l].variable);s[f]=n[f]}return s}}function Zd(i,n){var s={};if(!n)return s;if(i.variableDefinitions)for(var l=0,u=i.variableDefinitions.length;l<u;l++){var f=i.variableDefinitions[l],v=It(f.variable);s[v]=n[v]===void 0&&f.defaultValue?Nn(f.defaultValue,n):n[v]}for(var b in n)b in s||(s[b]=n[b]);return s}var Cy=`
https://bit.ly/2XbVrpR#`;function $n(i,n,s){if(!i){var l=n||"Minfied Error #"+s+`
`,u=new Error(l+Cy+s);throw u.name="Graphcache Error",u}}function Al(i){for(var n=0;n<i.definitions.length;n++)if(i.definitions[n].kind===we.OPERATION_DEFINITION)return i.definitions[n];$n(!1,"",1)}function as(i){for(var n={},s=0;s<i.definitions.length;s++){var l=i.definitions[s];l.kind===we.FRAGMENT_DEFINITION&&(n[It(l)]=l)}return n}function Ey(i,n){for(var s=0;i.directives&&s<i.directives.length;s++){var l=i.directives[s],u=It(l);if((u==="include"||u==="skip")&&l.arguments&&l.arguments[0]&&It(l.arguments[0])==="if"){var f=Nn(l.arguments[0].value,n);return u==="include"?!!f:!f}}return!0}function Ty(i,n){for(var s=0;i.directives&&s<i.directives.length;s++){var l=i.directives[s];if(It(l)==="defer"){for(var u=0;l.arguments&&u<l.arguments.length;u++){var f=l.arguments[s];if(It(f)==="if")return!!Nn(f.value,n)}return!0}}return!1}function ch(i,n,s){var l=Qd(i,n,s);return!!l&&l.type.kind!=="NON_NULL"}function Jd(i,n,s){var l=Qd(i,n,s);if(!l)return!1;var u=l.type.kind==="NON_NULL"?l.type.ofType:l.type;return u.kind==="LIST"&&u.ofType.kind!=="NON_NULL"}function Py(i,n,s){if(!s)return!1;var l=$d(n);return!l||s===l?!0:i.types[l]&&i.types[l].kind==="OBJECT"?l===s:(function(f,v){$n(f.types[v]&&(f.types[v].kind==="INTERFACE"||f.types[v].kind==="UNION"),"",5)}(i,l),ef(i,s),i.isSubType(l,s))}function Qd(i,n,s){if(!(s.indexOf("__")===0||n.indexOf("__")===0)){ef(i,n);var l=i.types[n].fields[s];return l}}function ef(i,n){$n(i.types[n]&&i.types[n].kind==="OBJECT","",3)}function un(i,n){return n?i+"("+zn(n)+")":i}function Hn(i,n){return i+"."+n}function Ly(i){var n=i.indexOf("(");return n>-1?{fieldKey:i,fieldName:i.slice(0,n),arguments:JSON.parse(i.slice(n+1,-1))}:{fieldKey:i,fieldName:i,arguments:null}}function tf(i){var n=i.indexOf(".");return{entityKey:i.slice(0,n).replace(/%2e/g,"."),fieldKey:i.slice(n+1)}}function Jt(){return Object.create(null)}var Pr=null,Oa=null,sn=null,Ye=null,pi=null,kt=null,Qi=!1;function hh(){return{optimistic:Jt(),base:new Map}}function Kn(i){var n;if(i){if(Pr.has(i))return i;n=Oa.get(i)||Xn({},i),Oa.set(i,n)}else n={};return Pr.add(n),n}function zs(i){return!!i&&Pr.has(i)}function Yn(i,n,s,l){Pr=new Set,Oa=new Map,sn=i,Ye=n,pi=Jt(),Qi=!!l,s?l||n.optimisticOrder.length>0?(!l&&!n.commutativeKeys.has(s)?da(n,s):l&&n.commutativeKeys.delete(s),kt=s,function(f,v){f.optimisticOrder.indexOf(v)===-1&&f.optimisticOrder.unshift(v),f.refLock[v]||(f.refLock[v]=Jt(),f.links.optimistic[v]=new Map,f.records.optimistic[v]=new Map)}(n,s)):(kt=null,lf(n,s)):kt=null}function Bn(){var i=Ye,n=kt;if(Qi=!1,kt=null,n&&i.optimisticOrder.indexOf(n)>-1)for(var s=i.optimisticOrder.length;--s>=0&&i.refLock[i.optimisticOrder[s]]&&i.commutativeKeys.has(i.optimisticOrder[s])&&!i.deferredKeys.has(i.optimisticOrder[s]);)_y(i.optimisticOrder[s]);Pr=null,Oa=null,sn=null,Ye=null,pi=null,i.defer||(i.defer=!0,Promise.resolve().then(function(){Yn("read",i,null),function(){Ye.gc.forEach(function(u,f,v){if((Ye.refCount[u]||0)>0){v.delete(u);return}for(var b in Ye.refLock){var k=Ye.refLock[b];if((k[u]||0)>0)return;delete k[u]}delete Ye.refCount[u],v.delete(u),Ye.records.base.delete(u);var S=Ye.links.base.get(u);if(S){Ye.links.base.delete(u);for(var I in S)Ma(v,Ye.refCount,S[I],-1)}})}(),function(){if(Ye.storage){Qi=!0,sn="read";var u=Jt();Ye.persist.forEach(function(f){var v=tf(f),b=v.entityKey,k=v.fieldKey,S;(S=Xr(b,k))!==void 0?u[f]=":"+zn(S):(S=Lr(b,k))!==void 0?u[f]=zn(S):u[f]=void 0}),Qi=!1,Ye.storage.writeData(u),Ye.persist.clear()}}(),Bn(),i.defer=!1}))}function uh(i,n,s){n&&!s&&i.deferredKeys.delete(n),Yn("read",i,n,s),Bn()}function Iy(){return $n(sn!==null,"",2),sn}function nf(){return $n(pi!==null,"",2),pi}function rf(i,n,s,l){var u=kt?i.optimistic[kt]:i.base,f=u.get(n);f===void 0&&u.set(n,f=Jt()),l===void 0&&!kt?delete f[s]:f[s]=l}function af(i,n,s){for(var l,u=!Qi&&sn==="read"&&kt&&Ye.commutativeKeys.has(kt),f=0,v=Ye.optimisticOrder.length;f<v;f++){var b=Ye.optimisticOrder[f],k=i.optimistic[b];if(u=u&&b!==kt,k&&(!u||!Ye.commutativeKeys.has(b))&&(!Qi||sn==="write"||Ye.commutativeKeys.has(b))&&(l=k.get(n))!==void 0&&s in l)return l[s]}return(l=i.base.get(n))!==void 0?l[s]:void 0}function dh(i,n,s,l){var u=n[s]!==void 0?n[s]:0,f=n[s]=u+l|0;i!==void 0&&(f<=0?i.add(s):u<=0&&f>0&&i.delete(s))}function Ma(i,n,s,l){if(typeof s=="string")dh(i,n,s,l);else if(Array.isArray(s))for(var u=0,f=s.length;u<f;u++)Array.isArray(s[u])?Ma(i,n,s[u],l):s[u]&&dh(i,n,s[u],l)}function fh(i,n,s){if(s!==void 0)for(var l in s)n.has(l)||(i.push(Ly(l)),n.add(l))}function ph(i,n,s,l){fh(i,n,l.base.get(s));for(var u=0,f=Ye.optimisticOrder.length;u<f;u++){var v=l.optimistic[Ye.optimisticOrder[u]];v!==void 0&&fh(i,n,v.get(s))}}function zr(i,n){n!=="__typename"&&(i!==Ye.queryRootKey?pi[i]=!0:n!==void 0&&(pi[Hn(i,n)]=!0))}function sf(i,n){!Qi&&Ye.storage&&Ye.persist.add(function(l,u){return l.replace(/\./g,"%2e")+"."+u}(i,n))}function Lr(i,n){return zr(i,n),af(Ye.records,i,n)}function Xr(i,n){return zr(i,n),af(Ye.links,i,n)}function Ir(i,n,s){zr(i,n),sf(i,n),rf(Ye.records,i,n,s)}function Hr(i,n,s){var l=Ye,u,f,v;kt?(u=l.refLock[kt]||(l.refLock[kt]=Jt()),f=l.links.optimistic[kt]):(u=l.refCount,f=l.links.base,v=l.gc);var b=f&&f.get(i),k=b&&b[n];zr(i,n),sf(i,n),rf(l.links,i,n,s),Ma(v,u,k,-1),Ma(v,u,s,1)}function da(i,n,s){var l=i.optimisticOrder.indexOf(n);l===-1?i.optimisticOrder.unshift(n):i.commutativeKeys.has(n)||(of(i,n),i.optimisticOrder.splice(l,1),i.optimisticOrder.unshift(n)),s?i.deferredKeys.add(n):i.deferredKeys.delete(n),i.commutativeKeys.add(n)}function of(i,n){i.refLock[n]&&(delete i.refLock[n],delete i.records.optimistic[n],delete i.links.optimistic[n],i.deferredKeys.delete(n))}function lf(i,n){var s=i.optimisticOrder.indexOf(n);s>-1&&(i.optimisticOrder.splice(s,1),i.commutativeKeys.delete(n)),of(i,n)}function _y(i){var n=pi;pi=Jt();var s=Ye.links.optimistic[i];s&&s.forEach(function(u,f){for(var v in u)Hr(f,v,u[v])});var l=Ye.records.optimistic[i];l&&l.forEach(function(u,f){for(var v in u)Ir(f,v,u[v])}),pi=n,lf(Ye,i)}function cf(i){var n=Ye.links,s=Ye.records,l=[],u=new Set;return zr(i),ph(l,u,i,n),ph(l,u,i,s),l}var fa={current:null},bn={current:!1};function ss(i){return i.__internal.path.length>0&&i.__internal.errorMap?i.__internal.errorMap[i.__internal.path.join(".")]:void 0}function os(i,n,s,l,u,f,v){var b={store:i,variables:n,fragments:s,parent:{__typename:l},parentTypeName:l,parentKey:u,parentFieldKey:"",fieldName:"",error:void 0,partial:!1,optimistic:!!f,__internal:{path:[],errorMap:void 0}};if(v&&v.graphQLErrors)for(var k=0;k<v.graphQLErrors.length;k++){var S=v.graphQLErrors[k];S.path&&S.path.length&&(b.__internal.errorMap||(b.__internal.errorMap=Object.create(null)),b.__internal.errorMap[S.path.join(".")]=S)}return b}function To(i,n,s,l,u,f){fa.current=i,i.parent=n,i.parentTypeName=s,i.parentKey=l,i.parentFieldKey=u,i.fieldName=f,i.error=ss(i)}function Oy(i,n,s,l){if(!n)return!1;var u=$d(i);return!u||n===u?!0:!jt(i).some(function(f){if(!Kd(f))return!1;var v=un(It(f),kl(f,l));return!function(k,S){return Lr(k,S)!==void 0||Xr(k,S)!==void 0}(s,v)})}function ls(i,n,s,l){var u=!1,f,v=0;return function(){if(!bn.current&&u&&(bn.current=u),f){var k=f();if(k!=null)return k;f=void 0,u=!1}for(;v<s.length;){var S=s[v++];if(Ey(S,l.variables)){if(Kd(S))return S;var I=Ay(S)?S:l.fragments[It(S)];if(I!==void 0&&(l.store.schema?Py(l.store.schema,I,i):Oy(I,i,n,l.variables)))return u=!!Ty(S,l.variables),!bn.current&&u&&(bn.current=u),(f=ls(i,n,jt(I),l))()}else continue}}}function pa(i){return i==null?null:i}function Po(i,n){if(n==null)return n;if(Array.isArray(n)){for(var s=new Array(n.length),l=0,u=s.length;l<u;l++)s[l]=Po(i,n[l]);return s}var f=i.keyOfEntity(n);return f}function My(i,n,s,l,u){Yn("write",i.data,u||null);var f=Sl(i,n,s,l);return Bn(),f}function Sl(i,n,s,l,u){var f=Al(n.query),v={data:s,dependencies:nf()},b=i.rootFields[f.operation],k=os(i,Zd(f,n.variables),as(n.query),b,b,!!u,l);return Cl(k,b,jt(f),s),v}function Cl(i,n,s,l){var u=n===i.store.rootFields.query,f=!u&&!!i.store.rootNames[n],v=f||u?n:l.__typename;if(v)!f&&!u&&n&&Ir(n,"__typename",v);else return;for(var b=ls(v,n||v,s,i),k;k=b();){var S=It(k),I=kl(k,i.variables),N=un(S,I),O=wl(k),z=l[O];if(!(S==="__typename"||z===void 0&&bn.current)){if(i.__internal.path.push(O),i.optimistic&&f){var j=i.store.optimisticMutations[S];if(!j)continue;To(i,l,v,v,N,S),z=l[O]=pa(j(I||{},i.store,i))}if(k.selectionSet)if(n&&!f){var K=Hn(n,N);Hr(n||v,N,Lo(i,jt(k),pa(z),K))}else Lo(i,jt(k),pa(z));else n&&!f&&Ir(n||v,N,z!==null||!ss(i)?z:void 0);if(f){var B=i.store.updates[v][S];B&&(To(i,l,v,v,Hn(v,N),S),l[S]=z,B(l,I||{},i.store,i))}i.__internal.path.pop()}}}function Lo(i,n,s,l){if(Array.isArray(s)){for(var u=new Array(s.length),f=0,v=s.length;f<v;f++){i.__internal.path.push(f);var b=l?Hn(l,""+f):void 0,k=Lo(i,n,s[f],b);u[f]=k,i.__internal.path.pop()}return u}else if(s===null)return ss(i)?void 0:null;var S=i.store.keyOfEntity(s);s.__typename;var I=S||l;return Cl(i,I,n,s),I||null}function oi(i){var n,s;this.keyOfField=un,this.resolveFieldByKey=this.resolve,i||(i={}),this.resolvers=i.resolvers||{},this.optimisticMutations=i.optimistic||{},this.keys=i.keys||{};var l="Query",u="Mutation",f="Subscription";if(i.schema){var v=function(k){var S=k.__schema,I={};function N(Y){for(var P={},q=0;q<Y.length;q++)P[Y[q].name]=Y[q];return P}function O(Y){switch(Y.kind){case"OBJECT":case"INTERFACE":return{name:Y.name,kind:Y.kind,interfaces:N(Y.interfaces||[]),fields:N(Y.fields.map(function(P){return{name:P.name,type:P.type,args:N(P.args)}}))};case"UNION":return{name:Y.name,kind:Y.kind,types:N(Y.possibleTypes||[])}}}var z={query:S.queryType?S.queryType.name:null,mutation:S.mutationType?S.mutationType.name:null,subscription:S.subscriptionType?S.subscriptionType.name:null,types:void 0,isSubType:function(P,q){var H=I[P],X=I[q];return!H||!X?!1:H.kind==="UNION"?!!H.types[q]:H.kind!=="OBJECT"&&X.kind==="OBJECT"?!!X.interfaces[P]:P===q}};if(S.types){z.types=I;for(var j=0;j<S.types.length;j++){var K=S.types[j];if(K&&K.name){var B=O(K);B&&(I[K.name]=B)}}}return z}(i.schema);l=v.query||l,u=v.mutation||u,f=v.subscription||f,v.types&&(this.schema=v)}this.updates=((n={})[u]=i.updates&&i.updates.Mutation||{},n[f]=i.updates&&i.updates.Subscription||{},n),this.rootFields={query:l,mutation:u,subscription:f},this.rootNames=((s={})[l]="query",s[u]="mutation",s[f]="subscription",s),this.data=function(k){return{defer:!1,gc:new Set,persist:new Set,queryRootKey:k,refCount:Jt(),refLock:Jt(),links:hh(),records:hh(),deferredKeys:new Set,commutativeKeys:new Set,optimisticOrder:[],storage:null}}(l),this.schema}oi.prototype.keyOfEntity=function(n){if(fa.current&&n===fa.current.parent)return fa.current.parentKey;if(n==null||typeof n=="string")return n||null;if(!n.__typename)return null;if(this.rootNames[n.__typename])return n.__typename;var s;return this.keys[n.__typename]?s=this.keys[n.__typename](n):n.id!=null?s=""+n.id:n._id!=null&&(s=""+n._id),s?n.__typename+":"+s:null};oi.prototype.resolve=function(n,s,l){var u=un(s,l),f=this.keyOfEntity(n);if(!f)return null;var v=Lr(f,u);return v!==void 0?v:Xr(f,u)||null};oi.prototype.invalidate=function(n,s,l){var u=this.keyOfEntity(n);$n(u,"",19),function(v,b,k){for(var S=b?[{fieldKey:un(b,k)}]:cf(v),I=0,N=S.length;I<N;I++){var O=S[I].fieldKey;Xr(v,O)!==void 0?Hr(v,O,void 0):Ir(v,O,void 0)}}(u,s,l)};oi.prototype.inspectFields=function(n){var s=this.keyOfEntity(n);return s?cf(s):[]};oi.prototype.updateQuery=function(n,s){var l=fi(n.query,n.variables);l.query=qn(l.query);var u=s(this.readQuery(l));u!==null&&Sl(this,l,u)};oi.prototype.readQuery=function(n){var s=fi(n.query,n.variables);return s.query=qn(s.query),hf(this,s).data};oi.prototype.readFragment=function(n,s,l){return function(f,v,b,k){var S=as(v),I=Object.keys(S),N=S[I[0]];if(!N)return null;var O=qd(N);typeof b!="string"&&!b.__typename&&(b.__typename=O);var z=f.keyOfEntity(b);if(!z)return null;var j=Wn(os(f,k||{},S,O,z),z,jt(N),Kn())||null;return j}(this,qn(n),s,l)};oi.prototype.writeFragment=function(n,s,l){(function(f,v,b,k){var S=as(v),I=S[Object.keys(S)[0]];if(!!I){var N=qd(I),O=Xn({},{__typename:N},b),z=f.keyOfEntity(O);!z||Cl(os(f,k||{},S,N,z,void 0),z,jt(I),O)}})(this,qn(n),s,l)};oi.prototype.link=function(n,s,l,u){var f=u!==void 0?l:null,v=u!==void 0?u:l,b=Po(this,n);typeof b=="string"&&Hr(b,un(s,f),Po(this,v))};function gh(i,n,s,l,u){Yn("read",i.data,u);var f=hf(i,n,s,l);return Bn(),f}function hf(i,n,s,l){var u=Al(n.query),f=i.rootFields[u.operation],v=jt(u),b=os(i,Zd(u,n.variables),as(n.query),f,f,!1,l);s||(s=Kn());var k=f!==b.store.rootFields.query?uf(b,f,v,s):Wn(b,f,v,s);return{dependencies:nf(),partial:b.partial||!k,data:k||null}}function uf(i,n,s,l){if(typeof(i.store.rootNames[n]?n:l.__typename)!="string")return l;for(var u=ls(n,n,s,i),f,v=!1,b=Kn(l);f=u();){var k=wl(f),S=l[k];i.__internal.path.push(k);var I=void 0;f.selectionSet&&S!==null?I=df(i,jt(f),pa(S)):I=S,v=v||I!==S,I!==void 0&&(b[k]=I),i.__internal.path.pop()}return v?b:l}function df(i,n,s){if(Array.isArray(s)){for(var l=new Array(s.length),u=!1,f=0,v=s.length;f<v;f++)i.__internal.path.push(f),l[f]=df(i,n,s[f]),u=u||l[f]!==s[f],i.__internal.path.pop();return u?l:s}else if(s===null)return null;var b=i.store.keyOfEntity(s);return b!==null?Wn(i,b,n,s)||null:uf(i,s.__typename,n,s)}function Wn(i,n,s,l,u){var f=i.store,v=n===f.rootFields.query,b=u&&f.keyOfEntity(u)||n,k=v?n:Lr(b,"__typename")||u&&u.__typename;if(typeof k=="string"&&!(u&&k!==u.__typename)){for(var S=ls(k,b,s,i),I=!1,N=!1,O=k!==l.__typename,z,j=Kn(l);(z=S())!==void 0;){var K=It(z),B=kl(z,i.variables),Y=wl(z),P=un(K,B),q=Hn(b,P),H=Lr(b,P),X=u?u[K]:void 0,Z=f.resolvers[k];i.__internal.path.push(Y);var U=void 0;if(K==="__typename")U=k;else if(X!==void 0&&z.selectionSet===void 0)U=X;else if(Iy()==="read"&&Z&&typeof Z[K]=="function"){if(To(i,j,k,b,q,K),H!==void 0&&(j[Y]=H),U=Z[K](j,B||{},f,i),z.selectionSet&&(U=Io(i,k,K,q,jt(z),j[Y]!==void 0?j[Y]:l[Y],U,zs(l))),f.schema&&U===null&&!ch(f.schema,k,K))return}else if(!z.selectionSet)U=H;else if(X!==void 0)U=Io(i,k,K,q,jt(z),j[Y]!==void 0?j[Y]:l[Y],X,zs(l));else{var te=Xr(b,P);te!==void 0?U=ff(i,te,k,K,jt(z),j[Y]!==void 0?j[Y]:l[Y],zs(l)):typeof H=="object"&&H!==null&&(U=H)}if(U===void 0&&bn.current)I=!0;else if(U===void 0&&(f.schema&&ch(f.schema,k,K)||ss(i)))N=!0,U=null;else if(U===void 0){i.__internal.path.pop();return}else I=I||K!=="__typename";i.__internal.path.pop(),O=O||U!==l[Y],U!==void 0&&(j[Y]=U)}return i.partial=i.partial||N,v&&N&&!I?void 0:O?j:l}}function Io(i,n,s,l,u,f,v,b){if(Array.isArray(v)){for(var k=i.store,S=k.schema?Jd(k.schema,n,s):!1,I=new Array(v.length),N=!Array.isArray(f)||v.length!==f.length,O=0,z=v.length;O<z;O++){i.__internal.path.push(O);var j=Io(i,n,s,Hn(l,""+O),u,f!=null?f[O]:void 0,v[O],b);if(i.__internal.path.pop(),j===void 0&&!S)return;i.partial=i.partial||j===void 0&&S,I[O]=j!=null?j:null,N=N||I[O]!==f[O]}return N?I:f}else{if(v==null)return v;if(b&&f===null)return null;if(function(Y){return typeof Y=="string"||typeof Y=="object"&&typeof Y.__typename=="string"}(v)){var K=f||Kn();return typeof v=="string"?Wn(i,v,u,K):Wn(i,l,u,K,v)}else return}}function ff(i,n,s,l,u,f,v){if(Array.isArray(n)){for(var b=i.store,k=b.schema?Jd(b.schema,s,l):!1,S=new Array(n.length),I=!Array.isArray(f)||S.length!==f.length,N=0,O=n.length;N<O;N++){i.__internal.path.push(N);var z=ff(i,n[N],s,l,u,f!=null?f[N]:void 0,v);if(i.__internal.path.pop(),z===void 0&&!k)return;i.partial=i.partial||z===void 0&&k,S[N]=z||null,I=I||S[N]!==f[N]}return I?S:f}else if(n===null||f===null&&v)return null;return Wn(i,n,u,f||Kn())}function xh(i,n){return yi(i.kind,i,Xn({},i.context,{meta:Xn({},i.context.meta,{cacheOutcome:n})}))}function mh(i,n){return yi(i.kind,i,Xn({},i.context,{requestPolicy:n}))}function P0(i){return function(n){var s=n.forward,l=n.client;n.dispatchDebug;var u=new oi(i),f;i&&i.storage&&(f=i.storage.readData().then(function(H){(function(Z,U,te){Yn("write",Z,null);for(var le in te){var pe=te[le];if(pe!==void 0){var ve=tf(le),ne=ve.entityKey,Ae=ve.fieldKey;pe[0]===":"?Hr(ne,Ae,JSON.parse(pe.slice(1))):Ir(ne,Ae,JSON.parse(pe))}}Bn(),Z.storage=U})(u.data,i.storage,H)}));var v=new Map,b=[],k=new Map,S=new Map,I=Jt(),N=new Set,O=Jt();function z(H){for(var X in H)if(I[X])return!0;return!1}function j(H,X){if(X)for(var Z in X){var U=O[Z];if(U){O[Z]=[];for(var te=0,le=U.length;te<le;te++)H.add(U[te])}}}function K(H,X){X.forEach(function(Z){if(Z!==H.key){var U=k.get(Z);if(U){k.delete(Z);var te="cache-first";N.has(Z)&&(N.delete(Z),te="cache-and-network"),l.reexecuteOperation(mh(U,te))}}})}function B(H){if(H.kind==="query")da(u.data,H.key);else if(H.kind==="teardown")k.delete(H.key),S.delete(H.key),uh(u.data,H.key);else if(H.kind==="mutation"&&H.context.requestPolicy!=="network-only"){var X=function(le,pe,ve){Yn("write",le.data,ve,!0);var ne=Sl(le,pe,{},void 0,!0);return Bn(),ne}(u,H,H.key).dependencies;if(!function(le){for(var pe in le)return!1;return!0}(X)){for(var Z in X)I[Z]=!0;v.set(H.key,X);var U=new Set;j(U,X),K(H,U)}}return yi(H.kind,{key:H.key,query:qn(H.query),variables:H.variables?Sy(Al(H.query),H.variables):H.variables},H.context)}function Y(H,X){for(var Z in X)(O[Z]||(O[Z]=[])).push(H.key),k.set(H.key,H)}function P(H){var X=gh(u,H,S.get(H.key)),Z=X.data?X.partial?"partial":"hit":"miss";return S.set(H.key,X.data),Y(H,X.dependencies),{outcome:Z,operation:H,data:X.data,dependencies:X.dependencies}}function q(H,X){var Z=H.operation,U=H.error,te=H.extensions,le=Z.key;Z.kind==="mutation"&&(j(X,v.get(le)),v.delete(le)),da(u.data,Z.key,H.hasNext);var pe,ve=H.data;if(ve){j(X,My(u,Z,ve,H.error,le).dependencies);var ne=gh(u,Z,Z.kind==="query"&&S.get(Z.key)||ve,H.error,le);ve=ne.data,Z.kind==="query"&&(j(X,pe=ne.dependencies),S.set(Z.key,H.data))}else uh(u.data,Z.key);return pe&&Y(H.operation,pe),{data:ve,error:U,extensions:te,operation:Z}}return function(H){var X=Kt(H),Z=f?Kt(si([Fn(Pa)(Rb(vo(f))(X)),Db(vo(f))(X)])):X,U=Kt(Nt(P)(Qe(function(he){return he.kind==="query"&&he.context.requestPolicy!=="network-only"})(Z))),te=Qe(function(he){return he.kind!=="query"||he.context.requestPolicy==="network-only"})(Z),le=Nt(function(he){return xh(he.operation,"miss")})(Qe(function(he){return he.outcome==="miss"&&he.operation.context.requestPolicy!=="cache-only"&&!z(he.dependencies)})(U)),pe=Nt(function(he){var Re=he.operation,Fe=he.outcome,Me=he.dependencies,Ne={operation:xh(Re,Fe),data:he.data,error:he.error,extensions:he.extensions};return(Re.context.requestPolicy==="cache-and-network"||Re.context.requestPolicy==="cache-first"&&Fe==="partial")&&(Ne.stale=!0,z(Me)?Re.context.requestPolicy==="cache-and-network"&&N.add(Re.key):l.reexecuteOperation(mh(Re,"network-only"))),Ne})(Qe(function(he){return he.outcome!=="miss"||he.operation.context.requestPolicy==="cache-only"})(U)),ve=Kt(s(Nt(B)(si([te,le])))),ne=Nt(function(he){var Re=new Set,Fe=q(he,Re);return K(he.operation,Re),Fe})(Qe(function(he){return!v.has(he.operation.key)})(ve)),Ae=Fn(function(he){if(b.push(he)<v.size)return La;for(var Re=0;Re<b.length;Re++)da(u.data,b[Re].operation.key);for(var Fe in I)delete I[Fe];for(var Me=[],Ne=new Set,Be;Be=b.shift();)Me.push(q(Be,Ne));return K(he.operation,Ne),Pa(Me)})(Qe(function(he){return v.has(he.operation.key)})(ve));return si([ne,Ae,pe])}}}function Ny(i){return i&&i.__esModule&&Object.prototype.hasOwnProperty.call(i,"default")?i.default:i}function Ry(i){if(i.__esModule)return i;var n=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(i).forEach(function(s){var l=Object.getOwnPropertyDescriptor(i,s);Object.defineProperty(n,s,l.get?l:{enumerable:!0,get:function(){return i[s]}})}),n}var Fy=class{constructor({uri:n,name:s,type:l}){this.uri=n,this.name=s,this.type=l}};const Dy=Fy;var zy=function(n){return typeof File!="undefined"&&n instanceof File||typeof Blob!="undefined"&&n instanceof Blob||n instanceof Dy};const Xy=zy;var Hy=function(n,s="",l=Xy){const u=new Map,f=new Map;function v(b,k,S){let I=b;if(l(b)){I=null;const N=u.get(b);N?N.push(k):u.set(b,[k])}else{const N=Array.isArray(b)||typeof FileList!="undefined"&&b instanceof FileList,O=b&&b.constructor===Object;if(N||O){const z=f.has(b);if(z?I=f.get(b):(I=N?[]:{},f.set(b,I)),!S.has(b)){const j=k?`${k}.`:"",K=new Set(S).add(b);if(N){let B=0;for(const Y of b){const P=v(Y,j+B++,K);z||I.push(P)}}else for(const B in b){const Y=v(b[B],j+B,K);z||(I[B]=Y)}}}}return I}return{clone:v(n,s,new Set),files:u}},Yy=Hy;function pf(){return(pf=Object.assign||function(i){for(var n=1;n<arguments.length;n++){var s=arguments[n];for(var l in s)Object.prototype.hasOwnProperty.call(s,l)&&(i[l]=s[l])}return i}).apply(this,arguments)}function I0(i){var n=i.forward;return i.dispatchDebug,function(s){var l=Kt(s),u=Fn(function(v){var b=Qe(function(K){return K.kind==="teardown"&&K.key===v.key})(l),k=Yy(pf({},v.variables)),S=k.files,I=Xd({query:v.query,variables:k.clone}),N,O;if(S.size){N=ko(v),(O=Ao(v)).headers["content-type"]==="application/json"&&delete O.headers["content-type"],O.method="POST",O.body=new FormData,O.body.append("operations",JSON.stringify(I));var z={},j=0;S.forEach(function(K){z[++j]=K.map(function(B){return"variables."+B})}),O.body.append("map",JSON.stringify(z)),j=0,S.forEach(function(K,B){O.body.append(""+ ++j,B,B.name)})}else O=Ao(v,I),N=ko(v,I);return Un(function(K){K.data||K.error})(is(b)(Hd(v,N,O)))})(Qe(function(v){return v.kind==="query"||v.kind==="mutation"})(l)),f=n(Qe(function(v){return v.kind!=="query"&&v.kind!=="mutation"})(l));return si([u,f])}}var gf={exports:{}},By=Ry(nm),_o={exports:{}};/*!
 * ApexCharts v3.34.0
 * (c) 2018-2022 ApexCharts
 * Released under the MIT License.
 */(function(i,n){function s(_,e){var t=Object.keys(_);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(_);e&&(r=r.filter(function(a){return Object.getOwnPropertyDescriptor(_,a).enumerable})),t.push.apply(t,r)}return t}function l(_){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?s(Object(t),!0).forEach(function(r){k(_,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(_,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach(function(r){Object.defineProperty(_,r,Object.getOwnPropertyDescriptor(t,r))})}return _}function u(_){return(u=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(_)}function f(_,e){if(!(_ instanceof e))throw new TypeError("Cannot call a class as a function")}function v(_,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(_,r.key,r)}}function b(_,e,t){return e&&v(_.prototype,e),t&&v(_,t),_}function k(_,e,t){return e in _?Object.defineProperty(_,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):_[e]=t,_}function S(_,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function");_.prototype=Object.create(e&&e.prototype,{constructor:{value:_,writable:!0,configurable:!0}}),e&&N(_,e)}function I(_){return(I=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(_)}function N(_,e){return(N=Object.setPrototypeOf||function(t,r){return t.__proto__=r,t})(_,e)}function O(_,e){if(e&&(typeof e=="object"||typeof e=="function"))return e;if(e!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(t===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(_)}function z(_){var e=function(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}();return function(){var t,r=I(_);if(e){var a=I(this).constructor;t=Reflect.construct(r,arguments,a)}else t=r.apply(this,arguments);return O(this,t)}}function j(_,e){return function(t){if(Array.isArray(t))return t}(_)||function(t,r){var a=t==null?null:typeof Symbol!="undefined"&&t[Symbol.iterator]||t["@@iterator"];if(a!=null){var o,h,c=[],d=!0,p=!1;try{for(a=a.call(t);!(d=(o=a.next()).done)&&(c.push(o.value),!r||c.length!==r);d=!0);}catch(x){p=!0,h=x}finally{try{d||a.return==null||a.return()}finally{if(p)throw h}}return c}}(_,e)||B(_,e)||function(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()}function K(_){return function(e){if(Array.isArray(e))return Y(e)}(_)||function(e){if(typeof Symbol!="undefined"&&e[Symbol.iterator]!=null||e["@@iterator"]!=null)return Array.from(e)}(_)||B(_)||function(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()}function B(_,e){if(_){if(typeof _=="string")return Y(_,e);var t=Object.prototype.toString.call(_).slice(8,-1);return t==="Object"&&_.constructor&&(t=_.constructor.name),t==="Map"||t==="Set"?Array.from(_):t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Y(_,e):void 0}}function Y(_,e){(e==null||e>_.length)&&(e=_.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=_[t];return r}var P=function(){function _(){f(this,_)}return b(_,[{key:"shadeRGBColor",value:function(e,t){var r=t.split(","),a=e<0?0:255,o=e<0?-1*e:e,h=parseInt(r[0].slice(4),10),c=parseInt(r[1],10),d=parseInt(r[2],10);return"rgb("+(Math.round((a-h)*o)+h)+","+(Math.round((a-c)*o)+c)+","+(Math.round((a-d)*o)+d)+")"}},{key:"shadeHexColor",value:function(e,t){var r=parseInt(t.slice(1),16),a=e<0?0:255,o=e<0?-1*e:e,h=r>>16,c=r>>8&255,d=255&r;return"#"+(16777216+65536*(Math.round((a-h)*o)+h)+256*(Math.round((a-c)*o)+c)+(Math.round((a-d)*o)+d)).toString(16).slice(1)}},{key:"shadeColor",value:function(e,t){return _.isColorHex(t)?this.shadeHexColor(e,t):this.shadeRGBColor(e,t)}}],[{key:"bind",value:function(e,t){return function(){return e.apply(t,arguments)}}},{key:"isObject",value:function(e){return e&&u(e)==="object"&&!Array.isArray(e)&&e!=null}},{key:"is",value:function(e,t){return Object.prototype.toString.call(t)==="[object "+e+"]"}},{key:"listToArray",value:function(e){var t,r=[];for(t=0;t<e.length;t++)r[t]=e[t];return r}},{key:"extend",value:function(e,t){var r=this;typeof Object.assign!="function"&&(Object.assign=function(o){if(o==null)throw new TypeError("Cannot convert undefined or null to object");for(var h=Object(o),c=1;c<arguments.length;c++){var d=arguments[c];if(d!=null)for(var p in d)d.hasOwnProperty(p)&&(h[p]=d[p])}return h});var a=Object.assign({},e);return this.isObject(e)&&this.isObject(t)&&Object.keys(t).forEach(function(o){r.isObject(t[o])&&o in e?a[o]=r.extend(e[o],t[o]):Object.assign(a,k({},o,t[o]))}),a}},{key:"extendArray",value:function(e,t){var r=[];return e.map(function(a){r.push(_.extend(t,a))}),e=r}},{key:"monthMod",value:function(e){return e%12}},{key:"clone",value:function(e){if(_.is("Array",e)){for(var t=[],r=0;r<e.length;r++)t[r]=this.clone(e[r]);return t}if(_.is("Null",e))return null;if(_.is("Date",e))return e;if(u(e)==="object"){var a={};for(var o in e)e.hasOwnProperty(o)&&(a[o]=this.clone(e[o]));return a}return e}},{key:"log10",value:function(e){return Math.log(e)/Math.LN10}},{key:"roundToBase10",value:function(e){return Math.pow(10,Math.floor(Math.log10(e)))}},{key:"roundToBase",value:function(e,t){return Math.pow(t,Math.floor(Math.log(e)/Math.log(t)))}},{key:"parseNumber",value:function(e){return e===null?e:parseFloat(e)}},{key:"randomId",value:function(){return(Math.random()+1).toString(36).substring(4)}},{key:"noExponents",value:function(e){var t=String(e).split(/[eE]/);if(t.length===1)return t[0];var r="",a=e<0?"-":"",o=t[0].replace(".",""),h=Number(t[1])+1;if(h<0){for(r=a+"0.";h++;)r+="0";return r+o.replace(/^-/,"")}for(h-=o.length;h--;)r+="0";return o+r}},{key:"getDimensions",value:function(e){var t=getComputedStyle(e,null),r=e.clientHeight,a=e.clientWidth;return r-=parseFloat(t.paddingTop)+parseFloat(t.paddingBottom),[a-=parseFloat(t.paddingLeft)+parseFloat(t.paddingRight),r]}},{key:"getBoundingClientRect",value:function(e){var t=e.getBoundingClientRect();return{top:t.top,right:t.right,bottom:t.bottom,left:t.left,width:e.clientWidth,height:e.clientHeight,x:t.left,y:t.top}}},{key:"getLargestStringFromArr",value:function(e){return e.reduce(function(t,r){return Array.isArray(r)&&(r=r.reduce(function(a,o){return a.length>o.length?a:o})),t.length>r.length?t:r},0)}},{key:"hexToRgba",value:function(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"#999999",t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:.6;e.substring(0,1)!=="#"&&(e="#999999");var r=e.replace("#","");r=r.match(new RegExp("(.{"+r.length/3+"})","g"));for(var a=0;a<r.length;a++)r[a]=parseInt(r[a].length===1?r[a]+r[a]:r[a],16);return t!==void 0&&r.push(t),"rgba("+r.join(",")+")"}},{key:"getOpacityFromRGBA",value:function(e){return parseFloat(e.replace(/^.*,(.+)\)/,"$1"))}},{key:"rgb2hex",value:function(e){return(e=e.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i))&&e.length===4?"#"+("0"+parseInt(e[1],10).toString(16)).slice(-2)+("0"+parseInt(e[2],10).toString(16)).slice(-2)+("0"+parseInt(e[3],10).toString(16)).slice(-2):""}},{key:"isColorHex",value:function(e){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(e)}},{key:"getPolygonPos",value:function(e,t){for(var r=[],a=2*Math.PI/t,o=0;o<t;o++){var h={};h.x=e*Math.sin(o*a),h.y=-e*Math.cos(o*a),r.push(h)}return r}},{key:"polarToCartesian",value:function(e,t,r,a){var o=(a-90)*Math.PI/180;return{x:e+r*Math.cos(o),y:t+r*Math.sin(o)}}},{key:"escapeString",value:function(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"x",r=e.toString().slice();return r=r.replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]/gi,t)}},{key:"negToZero",value:function(e){return e<0?0:e}},{key:"moveIndexInArray",value:function(e,t,r){if(r>=e.length)for(var a=r-e.length+1;a--;)e.push(void 0);return e.splice(r,0,e.splice(t,1)[0]),e}},{key:"extractNumber",value:function(e){return parseFloat(e.replace(/[^\d.]*/g,""))}},{key:"findAncestor",value:function(e,t){for(;(e=e.parentElement)&&!e.classList.contains(t););return e}},{key:"setELstyles",value:function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e.style.key=t[r])}},{key:"isNumber",value:function(e){return!isNaN(e)&&parseFloat(Number(e))===e&&!isNaN(parseInt(e,10))}},{key:"isFloat",value:function(e){return Number(e)===e&&e%1!=0}},{key:"isSafari",value:function(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)}},{key:"isFirefox",value:function(){return navigator.userAgent.toLowerCase().indexOf("firefox")>-1}},{key:"isIE11",value:function(){if(window.navigator.userAgent.indexOf("MSIE")!==-1||window.navigator.appVersion.indexOf("Trident/")>-1)return!0}},{key:"isIE",value:function(){var e=window.navigator.userAgent,t=e.indexOf("MSIE ");if(t>0)return parseInt(e.substring(t+5,e.indexOf(".",t)),10);if(e.indexOf("Trident/")>0){var r=e.indexOf("rv:");return parseInt(e.substring(r+3,e.indexOf(".",r)),10)}var a=e.indexOf("Edge/");return a>0&&parseInt(e.substring(a+5,e.indexOf(".",a)),10)}}]),_}(),q=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.setEasingFunctions()}return b(_,[{key:"setEasingFunctions",value:function(){var e;if(!this.w.globals.easing){switch(this.w.config.chart.animations.easing){case"linear":e="-";break;case"easein":e="<";break;case"easeout":e=">";break;case"easeinout":e="<>";break;case"swing":e=function(t){var r=1.70158;return(t-=1)*t*((r+1)*t+r)+1};break;case"bounce":e=function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375};break;case"elastic":e=function(t){return t===!!t?t:Math.pow(2,-10*t)*Math.sin((t-.075)*(2*Math.PI)/.3)+1};break;default:e="<>"}this.w.globals.easing=e}}},{key:"animateLine",value:function(e,t,r,a){e.attr(t).animate(a).attr(r)}},{key:"animateMarker",value:function(e,t,r,a,o,h){t||(t=0),e.attr({r:t,width:t,height:t}).animate(a,o).attr({r,width:r.width,height:r.height}).afterAll(function(){h()})}},{key:"animateCircle",value:function(e,t,r,a,o){e.attr({r:t.r,cx:t.cx,cy:t.cy}).animate(a,o).attr({r:r.r,cx:r.cx,cy:r.cy})}},{key:"animateRect",value:function(e,t,r,a,o){e.attr(t).animate(a).attr(r).afterAll(function(){return o()})}},{key:"animatePathsGradually",value:function(e){var t=e.el,r=e.realIndex,a=e.j,o=e.fill,h=e.pathFrom,c=e.pathTo,d=e.speed,p=e.delay,x=this.w,m=0;x.config.chart.animations.animateGradually.enabled&&(m=x.config.chart.animations.animateGradually.delay),x.config.chart.animations.dynamicAnimation.enabled&&x.globals.dataChanged&&x.config.chart.type!=="bar"&&(m=0),this.morphSVG(t,r,a,x.config.chart.type!=="line"||x.globals.comboCharts?o:"stroke",h,c,d,p*m)}},{key:"showDelayedElements",value:function(){this.w.globals.delayedElements.forEach(function(e){e.el.classList.remove("apexcharts-element-hidden")})}},{key:"animationCompleted",value:function(e){var t=this.w;t.globals.animationEnded||(t.globals.animationEnded=!0,this.showDelayedElements(),typeof t.config.chart.events.animationEnd=="function"&&t.config.chart.events.animationEnd(this.ctx,{el:e,w:t}))}},{key:"morphSVG",value:function(e,t,r,a,o,h,c,d){var p=this,x=this.w;o||(o=e.attr("pathFrom")),h||(h=e.attr("pathTo"));var m=function(y){return x.config.chart.type==="radar"&&(c=1),"M 0 ".concat(x.globals.gridHeight)};(!o||o.indexOf("undefined")>-1||o.indexOf("NaN")>-1)&&(o=m()),(!h||h.indexOf("undefined")>-1||h.indexOf("NaN")>-1)&&(h=m()),x.globals.shouldAnimate||(c=1),e.plot(o).animate(1,x.globals.easing,d).plot(o).animate(c,x.globals.easing,d).plot(h).afterAll(function(){P.isNumber(r)?r===x.globals.series[x.globals.maxValsInArrayIndex].length-2&&x.globals.shouldAnimate&&p.animationCompleted(e):a!=="none"&&x.globals.shouldAnimate&&(!x.globals.comboCharts&&t===x.globals.series.length-1||x.globals.comboCharts)&&p.animationCompleted(e),p.showDelayedElements()})}}]),_}(),H=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"getDefaultFilter",value:function(e,t){var r=this.w;e.unfilter(!0),new window.SVG.Filter().size("120%","180%","-5%","-40%"),r.config.states.normal.filter!=="none"?this.applyFilter(e,t,r.config.states.normal.filter.type,r.config.states.normal.filter.value):r.config.chart.dropShadow.enabled&&this.dropShadow(e,r.config.chart.dropShadow,t)}},{key:"addNormalFilter",value:function(e,t){var r=this.w;r.config.chart.dropShadow.enabled&&!e.node.classList.contains("apexcharts-marker")&&this.dropShadow(e,r.config.chart.dropShadow,t)}},{key:"addLightenFilter",value:function(e,t,r){var a=this,o=this.w,h=r.intensity;e.unfilter(!0),new window.SVG.Filter,e.filter(function(c){var d=o.config.chart.dropShadow;(d.enabled?a.addShadow(c,t,d):c).componentTransfer({rgb:{type:"linear",slope:1.5,intercept:h}})}),e.filterer.node.setAttribute("filterUnits","userSpaceOnUse"),this._scaleFilterSize(e.filterer.node)}},{key:"addDarkenFilter",value:function(e,t,r){var a=this,o=this.w,h=r.intensity;e.unfilter(!0),new window.SVG.Filter,e.filter(function(c){var d=o.config.chart.dropShadow;(d.enabled?a.addShadow(c,t,d):c).componentTransfer({rgb:{type:"linear",slope:h}})}),e.filterer.node.setAttribute("filterUnits","userSpaceOnUse"),this._scaleFilterSize(e.filterer.node)}},{key:"applyFilter",value:function(e,t,r){var a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:.5;switch(r){case"none":this.addNormalFilter(e,t);break;case"lighten":this.addLightenFilter(e,t,{intensity:a});break;case"darken":this.addDarkenFilter(e,t,{intensity:a})}}},{key:"addShadow",value:function(e,t,r){var a=r.blur,o=r.top,h=r.left,c=r.color,d=r.opacity,p=e.flood(Array.isArray(c)?c[t]:c,d).composite(e.sourceAlpha,"in").offset(h,o).gaussianBlur(a).merge(e.source);return e.blend(e.source,p)}},{key:"dropShadow",value:function(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0,a=t.top,o=t.left,h=t.blur,c=t.color,d=t.opacity,p=t.noUserSpaceOnUse,x=this.w;return e.unfilter(!0),P.isIE()&&x.config.chart.type==="radialBar"||(c=Array.isArray(c)?c[r]:c,e.filter(function(m){var y=null;y=P.isSafari()||P.isFirefox()||P.isIE()?m.flood(c,d).composite(m.sourceAlpha,"in").offset(o,a).gaussianBlur(h):m.flood(c,d).composite(m.sourceAlpha,"in").offset(o,a).gaussianBlur(h).merge(m.source),m.blend(m.source,y)}),p||e.filterer.node.setAttribute("filterUnits","userSpaceOnUse"),this._scaleFilterSize(e.filterer.node)),e}},{key:"setSelectionFilter",value:function(e,t,r){var a=this.w;if(a.globals.selectedDataPoints[t]!==void 0&&a.globals.selectedDataPoints[t].indexOf(r)>-1){e.node.setAttribute("selected",!0);var o=a.config.states.active.filter;o!=="none"&&this.applyFilter(e,t,o.type,o.value)}}},{key:"_scaleFilterSize",value:function(e){(function(t){for(var r in t)t.hasOwnProperty(r)&&e.setAttribute(r,t[r])})({width:"200%",height:"200%",x:"-50%",y:"-50%"})}}]),_}(),X=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"drawLine",value:function(e,t,r,a){var o=arguments.length>4&&arguments[4]!==void 0?arguments[4]:"#a8a8a8",h=arguments.length>5&&arguments[5]!==void 0?arguments[5]:0,c=arguments.length>6&&arguments[6]!==void 0?arguments[6]:null,d=arguments.length>7&&arguments[7]!==void 0?arguments[7]:"butt",p=this.w,x=p.globals.dom.Paper.line().attr({x1:e,y1:t,x2:r,y2:a,stroke:o,"stroke-dasharray":h,"stroke-width":c,"stroke-linecap":d});return x}},{key:"drawRect",value:function(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0,a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,o=arguments.length>4&&arguments[4]!==void 0?arguments[4]:0,h=arguments.length>5&&arguments[5]!==void 0?arguments[5]:"#fefefe",c=arguments.length>6&&arguments[6]!==void 0?arguments[6]:1,d=arguments.length>7&&arguments[7]!==void 0?arguments[7]:null,p=arguments.length>8&&arguments[8]!==void 0?arguments[8]:null,x=arguments.length>9&&arguments[9]!==void 0?arguments[9]:0,m=this.w,y=m.globals.dom.Paper.rect();return y.attr({x:e,y:t,width:r>0?r:0,height:a>0?a:0,rx:o,ry:o,opacity:c,"stroke-width":d!==null?d:0,stroke:p!==null?p:"none","stroke-dasharray":x}),y.node.setAttribute("fill",h),y}},{key:"drawPolygon",value:function(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"#e1e1e1",r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1,a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:"none",o=this.w,h=o.globals.dom.Paper.polygon(e).attr({fill:a,stroke:t,"stroke-width":r});return h}},{key:"drawCircle",value:function(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null,r=this.w;e<0&&(e=0);var a=r.globals.dom.Paper.circle(2*e);return t!==null&&a.attr(t),a}},{key:"drawPath",value:function(e){var t=e.d,r=t===void 0?"":t,a=e.stroke,o=a===void 0?"#a8a8a8":a,h=e.strokeWidth,c=h===void 0?1:h,d=e.fill,p=e.fillOpacity,x=p===void 0?1:p,m=e.strokeOpacity,y=m===void 0?1:m,A=e.classes,E=e.strokeLinecap,C=E===void 0?null:E,L=e.strokeDashArray,R=L===void 0?0:L,F=this.w;return C===null&&(C=F.config.stroke.lineCap),(r.indexOf("undefined")>-1||r.indexOf("NaN")>-1)&&(r="M 0 ".concat(F.globals.gridHeight)),F.globals.dom.Paper.path(r).attr({fill:d,"fill-opacity":x,stroke:o,"stroke-opacity":y,"stroke-linecap":C,"stroke-width":c,"stroke-dasharray":R,class:A})}},{key:"group",value:function(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null,t=this.w,r=t.globals.dom.Paper.group();return e!==null&&r.attr(e),r}},{key:"move",value:function(e,t){var r=["M",e,t].join(" ");return r}},{key:"line",value:function(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null,a=null;return r===null?a=["L",e,t].join(" "):r==="H"?a=["H",e].join(" "):r==="V"&&(a=["V",t].join(" ")),a}},{key:"curve",value:function(e,t,r,a,o,h){var c=["C",e,t,r,a,o,h].join(" ");return c}},{key:"quadraticCurve",value:function(e,t,r,a){return["Q",e,t,r,a].join(" ")}},{key:"arc",value:function(e,t,r,a,o,h,c){var d=arguments.length>7&&arguments[7]!==void 0&&arguments[7],p="A";d&&(p="a");var x=[p,e,t,r,a,o,h,c].join(" ");return x}},{key:"renderPaths",value:function(e){var t,r=e.j,a=e.realIndex,o=e.pathFrom,h=e.pathTo,c=e.stroke,d=e.strokeWidth,p=e.strokeLinecap,x=e.fill,m=e.animationDelay,y=e.initialSpeed,A=e.dataChangeSpeed,E=e.className,C=e.shouldClipToGrid,L=C===void 0||C,R=e.bindEventsOnPaths,F=R===void 0||R,D=e.drawShadow,g=D===void 0||D,w=this.w,T=new H(this.ctx),M=new q(this.ctx),V=this.w.config.chart.animations.enabled,J=V&&this.w.config.chart.animations.dynamicAnimation.enabled,G=!!(V&&!w.globals.resized||J&&w.globals.dataChanged&&w.globals.shouldAnimate);G?t=o:(t=h,w.globals.animationEnded=!0);var oe=w.config.stroke.dashArray,re=0;re=Array.isArray(oe)?oe[a]:w.config.stroke.dashArray;var ge=this.drawPath({d:t,stroke:c,strokeWidth:d,fill:x,fillOpacity:1,classes:E,strokeLinecap:p,strokeDashArray:re});if(ge.attr("index",a),L&&ge.attr({"clip-path":"url(#gridRectMask".concat(w.globals.cuid,")")}),w.config.states.normal.filter.type!=="none")T.getDefaultFilter(ge,a);else if(w.config.chart.dropShadow.enabled&&g&&(!w.config.chart.dropShadow.enabledOnSeries||w.config.chart.dropShadow.enabledOnSeries&&w.config.chart.dropShadow.enabledOnSeries.indexOf(a)!==-1)){var Pe=w.config.chart.dropShadow;T.dropShadow(ge,Pe,a)}F&&(ge.node.addEventListener("mouseenter",this.pathMouseEnter.bind(this,ge)),ge.node.addEventListener("mouseleave",this.pathMouseLeave.bind(this,ge)),ge.node.addEventListener("mousedown",this.pathMouseDown.bind(this,ge))),ge.attr({pathTo:h,pathFrom:o});var et={el:ge,j:r,realIndex:a,pathFrom:o,pathTo:h,fill:x,strokeWidth:d,delay:m};return!V||w.globals.resized||w.globals.dataChanged?!w.globals.resized&&w.globals.dataChanged||M.showDelayedElements():M.animatePathsGradually(l(l({},et),{},{speed:y})),w.globals.dataChanged&&J&&G&&M.animatePathsGradually(l(l({},et),{},{speed:A})),ge}},{key:"drawPattern",value:function(e,t,r){var a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:"#a8a8a8",o=arguments.length>4&&arguments[4]!==void 0?arguments[4]:0,h=this.w,c=h.globals.dom.Paper.pattern(t,r,function(d){e==="horizontalLines"?d.line(0,0,r,0).stroke({color:a,width:o+1}):e==="verticalLines"?d.line(0,0,0,t).stroke({color:a,width:o+1}):e==="slantedLines"?d.line(0,0,t,r).stroke({color:a,width:o}):e==="squares"?d.rect(t,r).fill("none").stroke({color:a,width:o}):e==="circles"&&d.circle(t).fill("none").stroke({color:a,width:o})});return c}},{key:"drawGradient",value:function(e,t,r,a,o){var h,c=arguments.length>5&&arguments[5]!==void 0?arguments[5]:null,d=arguments.length>6&&arguments[6]!==void 0?arguments[6]:null,p=arguments.length>7&&arguments[7]!==void 0?arguments[7]:null,x=arguments.length>8&&arguments[8]!==void 0?arguments[8]:0,m=this.w;t.length<9&&t.indexOf("#")===0&&(t=P.hexToRgba(t,a)),r.length<9&&r.indexOf("#")===0&&(r=P.hexToRgba(r,o));var y=0,A=1,E=1,C=null;d!==null&&(y=d[0]!==void 0?d[0]/100:0,A=d[1]!==void 0?d[1]/100:1,E=d[2]!==void 0?d[2]/100:1,C=d[3]!==void 0?d[3]/100:null);var L=!(m.config.chart.type!=="donut"&&m.config.chart.type!=="pie"&&m.config.chart.type!=="polarArea"&&m.config.chart.type!=="bubble");if(h=p===null||p.length===0?m.globals.dom.Paper.gradient(L?"radial":"linear",function(D){D.at(y,t,a),D.at(A,r,o),D.at(E,r,o),C!==null&&D.at(C,t,a)}):m.globals.dom.Paper.gradient(L?"radial":"linear",function(D){(Array.isArray(p[x])?p[x]:p).forEach(function(g){D.at(g.offset/100,g.color,g.opacity)})}),L){var R=m.globals.gridWidth/2,F=m.globals.gridHeight/2;m.config.chart.type!=="bubble"?h.attr({gradientUnits:"userSpaceOnUse",cx:R,cy:F,r:c}):h.attr({cx:.5,cy:.5,r:.8,fx:.2,fy:.2})}else e==="vertical"?h.from(0,0).to(0,1):e==="diagonal"?h.from(0,0).to(1,1):e==="horizontal"?h.from(0,1).to(1,1):e==="diagonal2"&&h.from(1,0).to(0,1);return h}},{key:"drawText",value:function(e){var t,r=e.x,a=e.y,o=e.text,h=e.textAnchor,c=e.fontSize,d=e.fontFamily,p=e.fontWeight,x=e.foreColor,m=e.opacity,y=e.cssClass,A=y===void 0?"":y,E=e.isPlainText,C=E===void 0||E,L=this.w;return o===void 0&&(o=""),h||(h="start"),x&&x.length||(x=L.config.chart.foreColor),d=d||L.config.chart.fontFamily,p=p||"regular",(t=Array.isArray(o)?L.globals.dom.Paper.text(function(R){for(var F=0;F<o.length;F++)F===0?R.tspan(o[F]):R.tspan(o[F]).newLine()}):C?L.globals.dom.Paper.plain(o):L.globals.dom.Paper.text(function(R){return R.tspan(o)})).attr({x:r,y:a,"text-anchor":h,"dominant-baseline":"auto","font-size":c,"font-family":d,"font-weight":p,fill:x,class:"apexcharts-text "+A}),t.node.style.fontFamily=d,t.node.style.opacity=m,t}},{key:"drawMarker",value:function(e,t,r){e=e||0;var a=r.pSize||0,o=null;if(r.shape==="square"||r.shape==="rect"){var h=r.pRadius===void 0?a/2:r.pRadius;t!==null&&a||(a=0,h=0);var c=1.2*a+h,d=this.drawRect(c,c,c,c,h);d.attr({x:e-c/2,y:t-c/2,cx:e,cy:t,class:r.class?r.class:"",fill:r.pointFillColor,"fill-opacity":r.pointFillOpacity?r.pointFillOpacity:1,stroke:r.pointStrokeColor,"stroke-width":r.pointStrokeWidth?r.pointStrokeWidth:0,"stroke-opacity":r.pointStrokeOpacity?r.pointStrokeOpacity:1}),o=d}else r.shape!=="circle"&&r.shape||(P.isNumber(t)||(a=0,t=0),o=this.drawCircle(a,{cx:e,cy:t,class:r.class?r.class:"",stroke:r.pointStrokeColor,fill:r.pointFillColor,"fill-opacity":r.pointFillOpacity?r.pointFillOpacity:1,"stroke-width":r.pointStrokeWidth?r.pointStrokeWidth:0,"stroke-opacity":r.pointStrokeOpacity?r.pointStrokeOpacity:1}));return o}},{key:"pathMouseEnter",value:function(e,t){var r=this.w,a=new H(this.ctx),o=parseInt(e.node.getAttribute("index"),10),h=parseInt(e.node.getAttribute("j"),10);if(typeof r.config.chart.events.dataPointMouseEnter=="function"&&r.config.chart.events.dataPointMouseEnter(t,this.ctx,{seriesIndex:o,dataPointIndex:h,w:r}),this.ctx.events.fireEvent("dataPointMouseEnter",[t,this.ctx,{seriesIndex:o,dataPointIndex:h,w:r}]),(r.config.states.active.filter.type==="none"||e.node.getAttribute("selected")!=="true")&&r.config.states.hover.filter.type!=="none"&&!r.globals.isTouchDevice){var c=r.config.states.hover.filter;a.applyFilter(e,o,c.type,c.value)}}},{key:"pathMouseLeave",value:function(e,t){var r=this.w,a=new H(this.ctx),o=parseInt(e.node.getAttribute("index"),10),h=parseInt(e.node.getAttribute("j"),10);typeof r.config.chart.events.dataPointMouseLeave=="function"&&r.config.chart.events.dataPointMouseLeave(t,this.ctx,{seriesIndex:o,dataPointIndex:h,w:r}),this.ctx.events.fireEvent("dataPointMouseLeave",[t,this.ctx,{seriesIndex:o,dataPointIndex:h,w:r}]),r.config.states.active.filter.type!=="none"&&e.node.getAttribute("selected")==="true"||r.config.states.hover.filter.type!=="none"&&a.getDefaultFilter(e,o)}},{key:"pathMouseDown",value:function(e,t){var r=this.w,a=new H(this.ctx),o=parseInt(e.node.getAttribute("index"),10),h=parseInt(e.node.getAttribute("j"),10),c="false";if(e.node.getAttribute("selected")==="true"){if(e.node.setAttribute("selected","false"),r.globals.selectedDataPoints[o].indexOf(h)>-1){var d=r.globals.selectedDataPoints[o].indexOf(h);r.globals.selectedDataPoints[o].splice(d,1)}}else{if(!r.config.states.active.allowMultipleDataPointsSelection&&r.globals.selectedDataPoints.length>0){r.globals.selectedDataPoints=[];var p=r.globals.dom.Paper.select(".apexcharts-series path").members,x=r.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members,m=function(A){Array.prototype.forEach.call(A,function(E){E.node.setAttribute("selected","false"),a.getDefaultFilter(E,o)})};m(p),m(x)}e.node.setAttribute("selected","true"),c="true",r.globals.selectedDataPoints[o]===void 0&&(r.globals.selectedDataPoints[o]=[]),r.globals.selectedDataPoints[o].push(h)}if(c==="true"){var y=r.config.states.active.filter;y!=="none"&&a.applyFilter(e,o,y.type,y.value)}else r.config.states.active.filter.type!=="none"&&a.getDefaultFilter(e,o);typeof r.config.chart.events.dataPointSelection=="function"&&r.config.chart.events.dataPointSelection(t,this.ctx,{selectedDataPoints:r.globals.selectedDataPoints,seriesIndex:o,dataPointIndex:h,w:r}),t&&this.ctx.events.fireEvent("dataPointSelection",[t,this.ctx,{selectedDataPoints:r.globals.selectedDataPoints,seriesIndex:o,dataPointIndex:h,w:r}])}},{key:"rotateAroundCenter",value:function(e){var t={};return e&&typeof e.getBBox=="function"&&(t=e.getBBox()),{x:t.x+t.width/2,y:t.y+t.height/2}}},{key:"getTextRects",value:function(e,t,r,a){var o=!(arguments.length>4&&arguments[4]!==void 0)||arguments[4],h=this.w,c=this.drawText({x:-200,y:-200,text:e,textAnchor:"start",fontSize:t,fontFamily:r,foreColor:"#fff",opacity:0});a&&c.attr("transform",a),h.globals.dom.Paper.add(c);var d=c.bbox();return o||(d=c.node.getBoundingClientRect()),c.remove(),{width:d.width,height:d.height}}},{key:"placeTextWithEllipsis",value:function(e,t,r){if(typeof e.getComputedTextLength=="function"&&(e.textContent=t,t.length>0&&e.getComputedTextLength()>=r/1.1)){for(var a=t.length-3;a>0;a-=3)if(e.getSubStringLength(0,a)<=r/1.1)return void(e.textContent=t.substring(0,a)+"...");e.textContent="."}}}],[{key:"setAttrs",value:function(e,t){for(var r in t)t.hasOwnProperty(r)&&e.setAttribute(r,t[r])}}]),_}(),Z=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"getStackedSeriesTotals",value:function(){var e=this.w,t=[];if(e.globals.series.length===0)return t;for(var r=0;r<e.globals.series[e.globals.maxValsInArrayIndex].length;r++){for(var a=0,o=0;o<e.globals.series.length;o++)e.globals.series[o][r]!==void 0&&(a+=e.globals.series[o][r]);t.push(a)}return e.globals.stackedSeriesTotals=t,t}},{key:"getSeriesTotalByIndex",value:function(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null;return e===null?this.w.config.series.reduce(function(t,r){return t+r},0):this.w.globals.series[e].reduce(function(t,r){return t+r},0)}},{key:"isSeriesNull",value:function(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null;return(e===null?this.w.config.series.filter(function(t){return t!==null}):this.w.config.series[e].data.filter(function(t){return t!==null})).length===0}},{key:"seriesHaveSameValues",value:function(e){return this.w.globals.series[e].every(function(t,r,a){return t===a[0]})}},{key:"getCategoryLabels",value:function(e){var t=this.w,r=e.slice();return t.config.xaxis.convertedCatToNumeric&&(r=e.map(function(a,o){return t.config.xaxis.labels.formatter(a-t.globals.minX+1)})),r}},{key:"getLargestSeries",value:function(){var e=this.w;e.globals.maxValsInArrayIndex=e.globals.series.map(function(t){return t.length}).indexOf(Math.max.apply(Math,e.globals.series.map(function(t){return t.length})))}},{key:"getLargestMarkerSize",value:function(){var e=this.w,t=0;return e.globals.markers.size.forEach(function(r){t=Math.max(t,r)}),e.config.markers.discrete&&e.config.markers.discrete.length&&e.config.markers.discrete.forEach(function(r){t=Math.max(t,r.size)}),t>0&&(t+=e.config.markers.hover.sizeOffset+1),e.globals.markers.largestSize=t,t}},{key:"getSeriesTotals",value:function(){var e=this.w;e.globals.seriesTotals=e.globals.series.map(function(t,r){var a=0;if(Array.isArray(t))for(var o=0;o<t.length;o++)a+=t[o];else a+=t;return a})}},{key:"getSeriesTotalsXRange",value:function(e,t){var r=this.w;return r.globals.series.map(function(a,o){for(var h=0,c=0;c<a.length;c++)r.globals.seriesX[o][c]>e&&r.globals.seriesX[o][c]<t&&(h+=a[c]);return h})}},{key:"getPercentSeries",value:function(){var e=this.w;e.globals.seriesPercent=e.globals.series.map(function(t,r){var a=[];if(Array.isArray(t))for(var o=0;o<t.length;o++){var h=e.globals.stackedSeriesTotals[o],c=0;h&&(c=100*t[o]/h),a.push(c)}else{var d=100*t/e.globals.seriesTotals.reduce(function(p,x){return p+x},0);a.push(d)}return a})}},{key:"getCalculatedRatios",value:function(){var e,t,r,a,o=this.w.globals,h=[],c=0,d=[],p=.1,x=0;if(o.yRange=[],o.isMultipleYAxis)for(var m=0;m<o.minYArr.length;m++)o.yRange.push(Math.abs(o.minYArr[m]-o.maxYArr[m])),d.push(0);else o.yRange.push(Math.abs(o.minY-o.maxY));o.xRange=Math.abs(o.maxX-o.minX),o.zRange=Math.abs(o.maxZ-o.minZ);for(var y=0;y<o.yRange.length;y++)h.push(o.yRange[y]/o.gridHeight);if(t=o.xRange/o.gridWidth,r=Math.abs(o.initialMaxX-o.initialMinX)/o.gridWidth,e=o.yRange/o.gridWidth,a=o.xRange/o.gridHeight,(c=o.zRange/o.gridHeight*16)||(c=1),o.minY!==Number.MIN_VALUE&&Math.abs(o.minY)!==0&&(o.hasNegs=!0),o.isMultipleYAxis){d=[];for(var A=0;A<h.length;A++)d.push(-o.minYArr[A]/h[A])}else d.push(-o.minY/h[0]),o.minY!==Number.MIN_VALUE&&Math.abs(o.minY)!==0&&(p=-o.minY/e,x=o.minX/t);return{yRatio:h,invertedYRatio:e,zRatio:c,xRatio:t,initialXRatio:r,invertedXRatio:a,baseLineInvertedY:p,baseLineY:d,baseLineX:x}}},{key:"getLogSeries",value:function(e){var t=this,r=this.w;return r.globals.seriesLog=e.map(function(a,o){return r.config.yaxis[o]&&r.config.yaxis[o].logarithmic?a.map(function(h){return h===null?null:t.getLogVal(r.config.yaxis[o].logBase,h,o)}):a}),r.globals.invalidLogScale?e:r.globals.seriesLog}},{key:"getBaseLog",value:function(e,t){return Math.log(t)/Math.log(e)}},{key:"getLogVal",value:function(e,t,r){if(t===0)return 0;var a=this.w,o=a.globals.minYArr[r]===0?-1:this.getBaseLog(e,a.globals.minYArr[r]),h=(a.globals.maxYArr[r]===0?0:this.getBaseLog(e,a.globals.maxYArr[r]))-o;return t<1?t/h:(this.getBaseLog(e,t)-o)/h}},{key:"getLogYRatios",value:function(e){var t=this,r=this.w,a=this.w.globals;return a.yLogRatio=e.slice(),a.logYRange=a.yRange.map(function(o,h){if(r.config.yaxis[h]&&t.w.config.yaxis[h].logarithmic){var c,d=-Number.MAX_VALUE,p=Number.MIN_VALUE;return a.seriesLog.forEach(function(x,m){x.forEach(function(y){r.config.yaxis[m]&&r.config.yaxis[m].logarithmic&&(d=Math.max(y,d),p=Math.min(y,p))})}),c=Math.pow(a.yRange[h],Math.abs(p-d)/a.yRange[h]),a.yLogRatio[h]=c/a.gridHeight,c}}),a.invalidLogScale?e.slice():a.yLogRatio}}],[{key:"checkComboSeries",value:function(e){var t=!1,r=0,a=0;return e.length&&e[0].type!==void 0&&e.forEach(function(o){o.type!=="bar"&&o.type!=="column"&&o.type!=="candlestick"&&o.type!=="boxPlot"||r++,o.type!==void 0&&a++}),a>0&&(t=!0),{comboBarCount:r,comboCharts:t}}},{key:"extendArrayProps",value:function(e,t,r){return t.yaxis&&(t=e.extendYAxis(t,r)),t.annotations&&(t.annotations.yaxis&&(t=e.extendYAxisAnnotations(t)),t.annotations.xaxis&&(t=e.extendXAxisAnnotations(t)),t.annotations.points&&(t=e.extendPointAnnotations(t))),t}}]),_}(),U=function(){function _(e){f(this,_),this.w=e.w,this.annoCtx=e}return b(_,[{key:"setOrientations",value:function(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null,r=this.w;if(e.label.orientation==="vertical"){var a=t!==null?t:0,o=r.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a,"']"));if(o!==null){var h=o.getBoundingClientRect();o.setAttribute("x",parseFloat(o.getAttribute("x"))-h.height+4),e.label.position==="top"?o.setAttribute("y",parseFloat(o.getAttribute("y"))+h.width):o.setAttribute("y",parseFloat(o.getAttribute("y"))-h.width);var c=this.annoCtx.graphics.rotateAroundCenter(o),d=c.x,p=c.y;o.setAttribute("transform","rotate(-90 ".concat(d," ").concat(p,")"))}}}},{key:"addBackgroundToAnno",value:function(e,t){var r=this.w;if(!e||t.label.text===void 0||t.label.text!==void 0&&!String(t.label.text).trim())return null;var a=r.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(),o=e.getBoundingClientRect(),h=t.label.style.padding.left,c=t.label.style.padding.right,d=t.label.style.padding.top,p=t.label.style.padding.bottom;t.label.orientation==="vertical"&&(d=t.label.style.padding.left,p=t.label.style.padding.right,h=t.label.style.padding.top,c=t.label.style.padding.bottom);var x=o.left-a.left-h,m=o.top-a.top-d,y=this.annoCtx.graphics.drawRect(x-r.globals.barPadForNumericAxis,m,o.width+h+c,o.height+d+p,t.label.borderRadius,t.label.style.background,1,t.label.borderWidth,t.label.borderColor,0);return t.id&&y.node.classList.add(t.id),y}},{key:"annotationsBackground",value:function(){var e=this,t=this.w,r=function(a,o,h){var c=t.globals.dom.baseEl.querySelector(".apexcharts-".concat(h,"-annotations .apexcharts-").concat(h,"-annotation-label[rel='").concat(o,"']"));if(c){var d=c.parentNode,p=e.addBackgroundToAnno(c,a);p&&(d.insertBefore(p.node,c),a.label.mouseEnter&&p.node.addEventListener("mouseenter",a.label.mouseEnter.bind(e,a)),a.label.mouseLeave&&p.node.addEventListener("mouseleave",a.label.mouseLeave.bind(e,a)))}};t.config.annotations.xaxis.map(function(a,o){r(a,o,"xaxis")}),t.config.annotations.yaxis.map(function(a,o){r(a,o,"yaxis")}),t.config.annotations.points.map(function(a,o){r(a,o,"point")})}},{key:"getY1Y2",value:function(e,t){var r,a=e==="y1"?t.y:t.y2,o=this.w;if(this.annoCtx.invertAxis){var h=o.globals.labels.indexOf(a);o.config.xaxis.convertedCatToNumeric&&(h=o.globals.categoryLabels.indexOf(a));var c=o.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child("+(h+1)+")");c&&(r=parseFloat(c.getAttribute("y")))}else{var d;o.config.yaxis[t.yAxisIndex].logarithmic?d=(a=new Z(this.annoCtx.ctx).getLogVal(a,t.yAxisIndex))/o.globals.yLogRatio[t.yAxisIndex]:d=(a-o.globals.minYArr[t.yAxisIndex])/(o.globals.yRange[t.yAxisIndex]/o.globals.gridHeight),r=o.globals.gridHeight-d,o.config.yaxis[t.yAxisIndex]&&o.config.yaxis[t.yAxisIndex].reversed&&(r=d)}return r}},{key:"getX1X2",value:function(e,t){var r=this.w,a=this.annoCtx.invertAxis?r.globals.minY:r.globals.minX,o=this.annoCtx.invertAxis?r.globals.maxY:r.globals.maxX,h=this.annoCtx.invertAxis?r.globals.yRange[0]:r.globals.xRange,c=(t.x-a)/(h/r.globals.gridWidth);this.annoCtx.inversedReversedAxis&&(c=(o-t.x)/(h/r.globals.gridWidth)),r.config.xaxis.type!=="category"&&!r.config.xaxis.convertedCatToNumeric||this.annoCtx.invertAxis||r.globals.dataFormatXNumeric||(c=this.getStringX(t.x));var d=(t.x2-a)/(h/r.globals.gridWidth);return this.annoCtx.inversedReversedAxis&&(d=(o-t.x2)/(h/r.globals.gridWidth)),r.config.xaxis.type!=="category"&&!r.config.xaxis.convertedCatToNumeric||this.annoCtx.invertAxis||r.globals.dataFormatXNumeric||(d=this.getStringX(t.x2)),e==="x1"?c:d}},{key:"getStringX",value:function(e){var t=this.w,r=e;t.config.xaxis.convertedCatToNumeric&&t.globals.categoryLabels.length&&(e=t.globals.categoryLabels.indexOf(e)+1);var a=t.globals.labels.indexOf(e),o=t.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child("+(a+1)+")");return o&&(r=parseFloat(o.getAttribute("x"))),r}}]),_}(),te=function(){function _(e){f(this,_),this.w=e.w,this.annoCtx=e,this.invertAxis=this.annoCtx.invertAxis,this.helpers=new U(this.annoCtx)}return b(_,[{key:"addXaxisAnnotation",value:function(e,t,r){var a,o=this.w,h=this.helpers.getX1X2("x1",e),c=e.label.text,d=e.strokeDashArray;if(P.isNumber(h)){if(e.x2===null||e.x2===void 0){var p=this.annoCtx.graphics.drawLine(h+e.offsetX,0+e.offsetY,h+e.offsetX,o.globals.gridHeight+e.offsetY,e.borderColor,d,e.borderWidth);t.appendChild(p.node),e.id&&p.node.classList.add(e.id)}else{if((a=this.helpers.getX1X2("x2",e))<h){var x=h;h=a,a=x}var m=this.annoCtx.graphics.drawRect(h+e.offsetX,0+e.offsetY,a-h,o.globals.gridHeight+e.offsetY,0,e.fillColor,e.opacity,1,e.borderColor,d);m.node.classList.add("apexcharts-annotation-rect"),m.attr("clip-path","url(#gridRectMask".concat(o.globals.cuid,")")),t.appendChild(m.node),e.id&&m.node.classList.add(e.id)}var y=e.label.position==="top"?4:o.globals.gridHeight,A=this.annoCtx.graphics.getTextRects(c,parseFloat(e.label.style.fontSize)),E=this.annoCtx.graphics.drawText({x:h+e.label.offsetX,y:y+e.label.offsetY-(e.label.orientation==="vertical"?e.label.position==="top"?A.width/2-12:-A.width/2:0),text:c,textAnchor:e.label.textAnchor,fontSize:e.label.style.fontSize,fontFamily:e.label.style.fontFamily,fontWeight:e.label.style.fontWeight,foreColor:e.label.style.color,cssClass:"apexcharts-xaxis-annotation-label ".concat(e.label.style.cssClass," ").concat(e.id?e.id:"")});E.attr({rel:r}),t.appendChild(E.node),this.annoCtx.helpers.setOrientations(e,r)}}},{key:"drawXAxisAnnotations",value:function(){var e=this,t=this.w,r=this.annoCtx.graphics.group({class:"apexcharts-xaxis-annotations"});return t.config.annotations.xaxis.map(function(a,o){e.addXaxisAnnotation(a,r.node,o)}),r}}]),_}(),le=function(){function _(e){f(this,_),this.w=e.w,this.annoCtx=e,this.helpers=new U(this.annoCtx)}return b(_,[{key:"addYaxisAnnotation",value:function(e,t,r){var a,o=this.w,h=e.strokeDashArray,c=this.helpers.getY1Y2("y1",e),d=e.label.text;if(e.y2===null||e.y2===void 0){var p=this.annoCtx.graphics.drawLine(0+e.offsetX,c+e.offsetY,this._getYAxisAnnotationWidth(e),c+e.offsetY,e.borderColor,h,e.borderWidth);t.appendChild(p.node),e.id&&p.node.classList.add(e.id)}else{if((a=this.helpers.getY1Y2("y2",e))>c){var x=c;c=a,a=x}var m=this.annoCtx.graphics.drawRect(0+e.offsetX,a+e.offsetY,this._getYAxisAnnotationWidth(e),c-a,0,e.fillColor,e.opacity,1,e.borderColor,h);m.node.classList.add("apexcharts-annotation-rect"),m.attr("clip-path","url(#gridRectMask".concat(o.globals.cuid,")")),t.appendChild(m.node),e.id&&m.node.classList.add(e.id)}var y=e.label.position==="right"?o.globals.gridWidth:0,A=this.annoCtx.graphics.drawText({x:y+e.label.offsetX,y:(a!=null?a:c)+e.label.offsetY-3,text:d,textAnchor:e.label.textAnchor,fontSize:e.label.style.fontSize,fontFamily:e.label.style.fontFamily,fontWeight:e.label.style.fontWeight,foreColor:e.label.style.color,cssClass:"apexcharts-yaxis-annotation-label ".concat(e.label.style.cssClass," ").concat(e.id?e.id:"")});A.attr({rel:r}),t.appendChild(A.node)}},{key:"_getYAxisAnnotationWidth",value:function(e){var t=this.w;return t.globals.gridWidth,(e.width.indexOf("%")>-1?t.globals.gridWidth*parseInt(e.width,10)/100:parseInt(e.width,10))+e.offsetX}},{key:"drawYAxisAnnotations",value:function(){var e=this,t=this.w,r=this.annoCtx.graphics.group({class:"apexcharts-yaxis-annotations"});return t.config.annotations.yaxis.map(function(a,o){e.addYaxisAnnotation(a,r.node,o)}),r}}]),_}(),pe=function(){function _(e){f(this,_),this.w=e.w,this.annoCtx=e,this.helpers=new U(this.annoCtx)}return b(_,[{key:"addPointAnnotation",value:function(e,t,r){this.w;var a=this.helpers.getX1X2("x1",e),o=this.helpers.getY1Y2("y1",e);if(P.isNumber(a)){var h={pSize:e.marker.size,pointStrokeWidth:e.marker.strokeWidth,pointFillColor:e.marker.fillColor,pointStrokeColor:e.marker.strokeColor,shape:e.marker.shape,pRadius:e.marker.radius,class:"apexcharts-point-annotation-marker ".concat(e.marker.cssClass," ").concat(e.id?e.id:"")},c=this.annoCtx.graphics.drawMarker(a+e.marker.offsetX,o+e.marker.offsetY,h);t.appendChild(c.node);var d=e.label.text?e.label.text:"",p=this.annoCtx.graphics.drawText({x:a+e.label.offsetX,y:o+e.label.offsetY-e.marker.size-parseFloat(e.label.style.fontSize)/1.6,text:d,textAnchor:e.label.textAnchor,fontSize:e.label.style.fontSize,fontFamily:e.label.style.fontFamily,fontWeight:e.label.style.fontWeight,foreColor:e.label.style.color,cssClass:"apexcharts-point-annotation-label ".concat(e.label.style.cssClass," ").concat(e.id?e.id:"")});if(p.attr({rel:r}),t.appendChild(p.node),e.customSVG.SVG){var x=this.annoCtx.graphics.group({class:"apexcharts-point-annotations-custom-svg "+e.customSVG.cssClass});x.attr({transform:"translate(".concat(a+e.customSVG.offsetX,", ").concat(o+e.customSVG.offsetY,")")}),x.node.innerHTML=e.customSVG.SVG,t.appendChild(x.node)}if(e.image.path){var m=e.image.width?e.image.width:20,y=e.image.height?e.image.height:20;c=this.annoCtx.addImage({x:a+e.image.offsetX-m/2,y:o+e.image.offsetY-y/2,width:m,height:y,path:e.image.path,appendTo:".apexcharts-point-annotations"})}e.mouseEnter&&c.node.addEventListener("mouseenter",e.mouseEnter.bind(this,e)),e.mouseLeave&&c.node.addEventListener("mouseleave",e.mouseLeave.bind(this,e))}}},{key:"drawPointAnnotations",value:function(){var e=this,t=this.w,r=this.annoCtx.graphics.group({class:"apexcharts-point-annotations"});return t.config.annotations.points.map(function(a,o){e.addPointAnnotation(a,r.node,o)}),r}}]),_}(),ve={name:"en",options:{months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],toolbar:{exportToSVG:"Download SVG",exportToPNG:"Download PNG",exportToCSV:"Download CSV",menu:"Menu",selection:"Selection",selectionZoom:"Selection Zoom",zoomIn:"Zoom In",zoomOut:"Zoom Out",pan:"Panning",reset:"Reset Zoom"}}},ne=function(){function _(){f(this,_),this.yAxis={show:!0,showAlways:!1,showForNullSeries:!0,seriesName:void 0,opposite:!1,reversed:!1,logarithmic:!1,logBase:10,tickAmount:void 0,forceNiceScale:!1,max:void 0,min:void 0,floating:!1,decimalsInFloat:void 0,labels:{show:!0,minWidth:0,maxWidth:160,offsetX:0,offsetY:0,align:void 0,rotate:0,padding:20,style:{colors:[],fontSize:"11px",fontWeight:400,fontFamily:void 0,cssClass:""},formatter:void 0},axisBorder:{show:!1,color:"#e0e0e0",width:1,offsetX:0,offsetY:0},axisTicks:{show:!1,color:"#e0e0e0",width:6,offsetX:0,offsetY:0},title:{text:void 0,rotate:-90,offsetY:0,offsetX:0,style:{color:void 0,fontSize:"11px",fontWeight:900,fontFamily:void 0,cssClass:""}},tooltip:{enabled:!1,offsetX:0},crosshairs:{show:!0,position:"front",stroke:{color:"#b6b6b6",width:1,dashArray:0}}},this.pointAnnotation={id:void 0,x:0,y:null,yAxisIndex:0,seriesIndex:0,mouseEnter:void 0,mouseLeave:void 0,marker:{size:4,fillColor:"#fff",strokeWidth:2,strokeColor:"#333",shape:"circle",offsetX:0,offsetY:0,radius:2,cssClass:""},label:{borderColor:"#c2c2c2",borderWidth:1,borderRadius:2,text:void 0,textAnchor:"middle",offsetX:0,offsetY:0,mouseEnter:void 0,mouseLeave:void 0,style:{background:"#fff",color:void 0,fontSize:"11px",fontFamily:void 0,fontWeight:400,cssClass:"",padding:{left:5,right:5,top:2,bottom:2}}},customSVG:{SVG:void 0,cssClass:void 0,offsetX:0,offsetY:0},image:{path:void 0,width:20,height:20,offsetX:0,offsetY:0}},this.yAxisAnnotation={id:void 0,y:0,y2:null,strokeDashArray:1,fillColor:"#c2c2c2",borderColor:"#c2c2c2",borderWidth:1,opacity:.3,offsetX:0,offsetY:0,width:"100%",yAxisIndex:0,label:{borderColor:"#c2c2c2",borderWidth:1,borderRadius:2,text:void 0,textAnchor:"end",position:"right",offsetX:0,offsetY:-3,mouseEnter:void 0,mouseLeave:void 0,style:{background:"#fff",color:void 0,fontSize:"11px",fontFamily:void 0,fontWeight:400,cssClass:"",padding:{left:5,right:5,top:2,bottom:2}}}},this.xAxisAnnotation={id:void 0,x:0,x2:null,strokeDashArray:1,fillColor:"#c2c2c2",borderColor:"#c2c2c2",borderWidth:1,opacity:.3,offsetX:0,offsetY:0,label:{borderColor:"#c2c2c2",borderWidth:1,borderRadius:2,text:void 0,textAnchor:"middle",orientation:"vertical",position:"top",offsetX:0,offsetY:0,mouseEnter:void 0,mouseLeave:void 0,style:{background:"#fff",color:void 0,fontSize:"11px",fontFamily:void 0,fontWeight:400,cssClass:"",padding:{left:5,right:5,top:2,bottom:2}}}},this.text={x:0,y:0,text:"",textAnchor:"start",foreColor:void 0,fontSize:"13px",fontFamily:void 0,fontWeight:400,appendTo:".apexcharts-annotations",backgroundColor:"transparent",borderColor:"#c2c2c2",borderRadius:0,borderWidth:0,paddingLeft:4,paddingRight:4,paddingTop:2,paddingBottom:2}}return b(_,[{key:"init",value:function(){return{annotations:{position:"front",yaxis:[this.yAxisAnnotation],xaxis:[this.xAxisAnnotation],points:[this.pointAnnotation],texts:[],images:[],shapes:[]},chart:{animations:{enabled:!0,easing:"easeinout",speed:800,animateGradually:{delay:150,enabled:!0},dynamicAnimation:{enabled:!0,speed:350}},background:"transparent",locales:[ve],defaultLocale:"en",dropShadow:{enabled:!1,enabledOnSeries:void 0,top:2,left:2,blur:4,color:"#000",opacity:.35},events:{animationEnd:void 0,beforeMount:void 0,mounted:void 0,updated:void 0,click:void 0,mouseMove:void 0,mouseLeave:void 0,legendClick:void 0,markerClick:void 0,selection:void 0,dataPointSelection:void 0,dataPointMouseEnter:void 0,dataPointMouseLeave:void 0,beforeZoom:void 0,beforeResetZoom:void 0,zoomed:void 0,scrolled:void 0,brushScrolled:void 0},foreColor:"#373d3f",fontFamily:"Helvetica, Arial, sans-serif",height:"auto",parentHeightOffset:15,redrawOnParentResize:!0,redrawOnWindowResize:!0,id:void 0,group:void 0,offsetX:0,offsetY:0,selection:{enabled:!1,type:"x",fill:{color:"#24292e",opacity:.1},stroke:{width:1,color:"#24292e",opacity:.4,dashArray:3},xaxis:{min:void 0,max:void 0},yaxis:{min:void 0,max:void 0}},sparkline:{enabled:!1},brush:{enabled:!1,autoScaleYaxis:!0,target:void 0},stacked:!1,stackType:"normal",toolbar:{show:!0,offsetX:0,offsetY:0,tools:{download:!0,selection:!0,zoom:!0,zoomin:!0,zoomout:!0,pan:!0,reset:!0,customIcons:[]},export:{csv:{filename:void 0,columnDelimiter:",",headerCategory:"category",headerValue:"value",dateFormatter:function(e){return new Date(e).toDateString()}},png:{filename:void 0},svg:{filename:void 0}},autoSelected:"zoom"},type:"line",width:"100%",zoom:{enabled:!0,type:"x",autoScaleYaxis:!1,zoomedArea:{fill:{color:"#90CAF9",opacity:.4},stroke:{color:"#0D47A1",opacity:.4,width:1}}}},plotOptions:{area:{fillTo:"origin"},bar:{horizontal:!1,columnWidth:"70%",barHeight:"70%",distributed:!1,borderRadius:0,rangeBarOverlap:!0,rangeBarGroupRows:!1,colors:{ranges:[],backgroundBarColors:[],backgroundBarOpacity:1,backgroundBarRadius:0},dataLabels:{position:"top",maxItems:100,hideOverflowingLabels:!0,orientation:"horizontal"}},bubble:{minBubbleRadius:void 0,maxBubbleRadius:void 0},candlestick:{colors:{upward:"#00B746",downward:"#EF403C"},wick:{useFillColor:!0}},boxPlot:{colors:{upper:"#00E396",lower:"#008FFB"}},heatmap:{radius:2,enableShades:!0,shadeIntensity:.5,reverseNegativeShade:!1,distributed:!1,useFillColorAsStroke:!1,colorScale:{inverse:!1,ranges:[],min:void 0,max:void 0}},treemap:{enableShades:!0,shadeIntensity:.5,distributed:!1,reverseNegativeShade:!1,useFillColorAsStroke:!1,colorScale:{inverse:!1,ranges:[],min:void 0,max:void 0}},radialBar:{inverseOrder:!1,startAngle:0,endAngle:360,offsetX:0,offsetY:0,hollow:{margin:5,size:"50%",background:"transparent",image:void 0,imageWidth:150,imageHeight:150,imageOffsetX:0,imageOffsetY:0,imageClipped:!0,position:"front",dropShadow:{enabled:!1,top:0,left:0,blur:3,color:"#000",opacity:.5}},track:{show:!0,startAngle:void 0,endAngle:void 0,background:"#f2f2f2",strokeWidth:"97%",opacity:1,margin:5,dropShadow:{enabled:!1,top:0,left:0,blur:3,color:"#000",opacity:.5}},dataLabels:{show:!0,name:{show:!0,fontSize:"16px",fontFamily:void 0,fontWeight:600,color:void 0,offsetY:0,formatter:function(e){return e}},value:{show:!0,fontSize:"14px",fontFamily:void 0,fontWeight:400,color:void 0,offsetY:16,formatter:function(e){return e+"%"}},total:{show:!1,label:"Total",fontSize:"16px",fontWeight:600,fontFamily:void 0,color:void 0,formatter:function(e){return e.globals.seriesTotals.reduce(function(t,r){return t+r},0)/e.globals.series.length+"%"}}}},pie:{customScale:1,offsetX:0,offsetY:0,startAngle:0,endAngle:360,expandOnClick:!0,dataLabels:{offset:0,minAngleToShowLabel:10},donut:{size:"65%",background:"transparent",labels:{show:!1,name:{show:!0,fontSize:"16px",fontFamily:void 0,fontWeight:600,color:void 0,offsetY:-10,formatter:function(e){return e}},value:{show:!0,fontSize:"20px",fontFamily:void 0,fontWeight:400,color:void 0,offsetY:10,formatter:function(e){return e}},total:{show:!1,showAlways:!1,label:"Total",fontSize:"16px",fontWeight:400,fontFamily:void 0,color:void 0,formatter:function(e){return e.globals.seriesTotals.reduce(function(t,r){return t+r},0)}}}}},polarArea:{rings:{strokeWidth:1,strokeColor:"#e8e8e8"},spokes:{strokeWidth:1,connectorColors:"#e8e8e8"}},radar:{size:void 0,offsetX:0,offsetY:0,polygons:{strokeWidth:1,strokeColors:"#e8e8e8",connectorColors:"#e8e8e8",fill:{colors:void 0}}}},colors:void 0,dataLabels:{enabled:!0,enabledOnSeries:void 0,formatter:function(e){return e!==null?e:""},textAnchor:"middle",distributed:!1,offsetX:0,offsetY:0,style:{fontSize:"12px",fontFamily:void 0,fontWeight:600,colors:void 0},background:{enabled:!0,foreColor:"#fff",borderRadius:2,padding:4,opacity:.9,borderWidth:1,borderColor:"#fff",dropShadow:{enabled:!1,top:1,left:1,blur:1,color:"#000",opacity:.45}},dropShadow:{enabled:!1,top:1,left:1,blur:1,color:"#000",opacity:.45}},fill:{type:"solid",colors:void 0,opacity:.85,gradient:{shade:"dark",type:"horizontal",shadeIntensity:.5,gradientToColors:void 0,inverseColors:!0,opacityFrom:1,opacityTo:1,stops:[0,50,100],colorStops:[]},image:{src:[],width:void 0,height:void 0},pattern:{style:"squares",width:6,height:6,strokeWidth:2}},forecastDataPoints:{count:0,fillOpacity:.5,strokeWidth:void 0,dashArray:4},grid:{show:!0,borderColor:"#e0e0e0",strokeDashArray:0,position:"back",xaxis:{lines:{show:!1}},yaxis:{lines:{show:!0}},row:{colors:void 0,opacity:.5},column:{colors:void 0,opacity:.5},padding:{top:0,right:10,bottom:0,left:12}},labels:[],legend:{show:!0,showForSingleSeries:!1,showForNullSeries:!0,showForZeroSeries:!0,floating:!1,position:"bottom",horizontalAlign:"center",inverseOrder:!1,fontSize:"12px",fontFamily:void 0,fontWeight:400,width:void 0,height:void 0,formatter:void 0,tooltipHoverFormatter:void 0,offsetX:-20,offsetY:4,customLegendItems:[],labels:{colors:void 0,useSeriesColors:!1},markers:{width:12,height:12,strokeWidth:0,fillColors:void 0,strokeColor:"#fff",radius:12,customHTML:void 0,offsetX:0,offsetY:0,onClick:void 0},itemMargin:{horizontal:5,vertical:2},onItemClick:{toggleDataSeries:!0},onItemHover:{highlightDataSeries:!0}},markers:{discrete:[],size:0,colors:void 0,strokeColors:"#fff",strokeWidth:2,strokeOpacity:.9,strokeDashArray:0,fillOpacity:1,shape:"circle",width:8,height:8,radius:2,offsetX:0,offsetY:0,onClick:void 0,onDblClick:void 0,showNullDataPoints:!0,hover:{size:void 0,sizeOffset:3}},noData:{text:void 0,align:"center",verticalAlign:"middle",offsetX:0,offsetY:0,style:{color:void 0,fontSize:"14px",fontFamily:void 0}},responsive:[],series:void 0,states:{normal:{filter:{type:"none",value:0}},hover:{filter:{type:"lighten",value:.1}},active:{allowMultipleDataPointsSelection:!1,filter:{type:"darken",value:.5}}},title:{text:void 0,align:"left",margin:5,offsetX:0,offsetY:0,floating:!1,style:{fontSize:"14px",fontWeight:900,fontFamily:void 0,color:void 0}},subtitle:{text:void 0,align:"left",margin:5,offsetX:0,offsetY:30,floating:!1,style:{fontSize:"12px",fontWeight:400,fontFamily:void 0,color:void 0}},stroke:{show:!0,curve:"smooth",lineCap:"butt",width:2,colors:void 0,dashArray:0},tooltip:{enabled:!0,enabledOnSeries:void 0,shared:!0,followCursor:!1,intersect:!1,inverseOrder:!1,custom:void 0,fillSeriesColor:!1,theme:"light",cssClass:"",style:{fontSize:"12px",fontFamily:void 0},onDatasetHover:{highlightDataSeries:!1},x:{show:!0,format:"dd MMM",formatter:void 0},y:{formatter:void 0,title:{formatter:function(e){return e?e+": ":""}}},z:{formatter:void 0,title:"Size: "},marker:{show:!0,fillColors:void 0},items:{display:"flex"},fixed:{enabled:!1,position:"topRight",offsetX:0,offsetY:0}},xaxis:{type:"category",categories:[],convertedCatToNumeric:!1,offsetX:0,offsetY:0,overwriteCategories:void 0,labels:{show:!0,rotate:-45,rotateAlways:!1,hideOverlappingLabels:!0,trim:!1,minHeight:void 0,maxHeight:120,showDuplicates:!0,style:{colors:[],fontSize:"12px",fontWeight:400,fontFamily:void 0,cssClass:""},offsetX:0,offsetY:0,format:void 0,formatter:void 0,datetimeUTC:!0,datetimeFormatter:{year:"yyyy",month:"MMM 'yy",day:"dd MMM",hour:"HH:mm",minute:"HH:mm:ss",second:"HH:mm:ss"},group:{groups:[],style:{colors:[],fontSize:"12px",fontWeight:400,fontFamily:void 0,cssClass:""}}},axisBorder:{show:!0,color:"#e0e0e0",width:"100%",height:1,offsetX:0,offsetY:0},axisTicks:{show:!0,color:"#e0e0e0",height:6,offsetX:0,offsetY:0},tickAmount:void 0,tickPlacement:"on",min:void 0,max:void 0,range:void 0,floating:!1,decimalsInFloat:void 0,position:"bottom",title:{text:void 0,offsetX:0,offsetY:0,style:{color:void 0,fontSize:"12px",fontWeight:900,fontFamily:void 0,cssClass:""}},crosshairs:{show:!0,width:1,position:"back",opacity:.9,stroke:{color:"#b6b6b6",width:1,dashArray:3},fill:{type:"solid",color:"#B1B9C4",gradient:{colorFrom:"#D8E3F0",colorTo:"#BED1E6",stops:[0,100],opacityFrom:.4,opacityTo:.5}},dropShadow:{enabled:!1,left:0,top:0,blur:1,opacity:.4}},tooltip:{enabled:!0,offsetY:0,formatter:void 0,style:{fontSize:"12px",fontFamily:void 0}}},yaxis:this.yAxis,theme:{mode:"light",palette:"palette1",monochrome:{enabled:!1,color:"#008FFB",shadeTo:"light",shadeIntensity:.65}}}}}]),_}(),Ae=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.graphics=new X(this.ctx),this.w.globals.isBarHorizontal&&(this.invertAxis=!0),this.helpers=new U(this),this.xAxisAnnotations=new te(this),this.yAxisAnnotations=new le(this),this.pointsAnnotations=new pe(this),this.w.globals.isBarHorizontal&&this.w.config.yaxis[0].reversed&&(this.inversedReversedAxis=!0),this.xDivision=this.w.globals.gridWidth/this.w.globals.dataPoints}return b(_,[{key:"drawAxesAnnotations",value:function(){var e=this.w;if(e.globals.axisCharts){for(var t=this.yAxisAnnotations.drawYAxisAnnotations(),r=this.xAxisAnnotations.drawXAxisAnnotations(),a=this.pointsAnnotations.drawPointAnnotations(),o=e.config.chart.animations.enabled,h=[t,r,a],c=[r.node,t.node,a.node],d=0;d<3;d++)e.globals.dom.elGraphical.add(h[d]),!o||e.globals.resized||e.globals.dataChanged||e.config.chart.type!=="scatter"&&e.config.chart.type!=="bubble"&&e.globals.dataPoints>1&&c[d].classList.add("apexcharts-element-hidden"),e.globals.delayedElements.push({el:c[d],index:0});this.helpers.annotationsBackground()}}},{key:"drawImageAnnos",value:function(){var e=this;this.w.config.annotations.images.map(function(t,r){e.addImage(t,r)})}},{key:"drawTextAnnos",value:function(){var e=this;this.w.config.annotations.texts.map(function(t,r){e.addText(t,r)})}},{key:"addXaxisAnnotation",value:function(e,t,r){this.xAxisAnnotations.addXaxisAnnotation(e,t,r)}},{key:"addYaxisAnnotation",value:function(e,t,r){this.yAxisAnnotations.addYaxisAnnotation(e,t,r)}},{key:"addPointAnnotation",value:function(e,t,r){this.pointsAnnotations.addPointAnnotation(e,t,r)}},{key:"addText",value:function(e,t){var r=e.x,a=e.y,o=e.text,h=e.textAnchor,c=e.foreColor,d=e.fontSize,p=e.fontFamily,x=e.fontWeight,m=e.cssClass,y=e.backgroundColor,A=e.borderWidth,E=e.strokeDashArray,C=e.borderRadius,L=e.borderColor,R=e.appendTo,F=R===void 0?".apexcharts-annotations":R,D=e.paddingLeft,g=D===void 0?4:D,w=e.paddingRight,T=w===void 0?4:w,M=e.paddingBottom,V=M===void 0?2:M,J=e.paddingTop,G=J===void 0?2:J,oe=this.w,re=this.graphics.drawText({x:r,y:a,text:o,textAnchor:h||"start",fontSize:d||"12px",fontWeight:x||"regular",fontFamily:p||oe.config.chart.fontFamily,foreColor:c||oe.config.chart.foreColor,cssClass:m}),ge=oe.globals.dom.baseEl.querySelector(F);ge&&ge.appendChild(re.node);var Pe=re.bbox();if(o){var et=this.graphics.drawRect(Pe.x-g,Pe.y-G,Pe.width+g+T,Pe.height+V+G,C,y||"transparent",1,A,L,E);ge.insertBefore(et.node,re.node)}}},{key:"addImage",value:function(e,t){var r=this.w,a=e.path,o=e.x,h=o===void 0?0:o,c=e.y,d=c===void 0?0:c,p=e.width,x=p===void 0?20:p,m=e.height,y=m===void 0?20:m,A=e.appendTo,E=A===void 0?".apexcharts-annotations":A,C=r.globals.dom.Paper.image(a);C.size(x,y).move(h,d);var L=r.globals.dom.baseEl.querySelector(E);return L&&L.appendChild(C.node),C}},{key:"addXaxisAnnotationExternal",value:function(e,t,r){return this.addAnnotationExternal({params:e,pushToMemory:t,context:r,type:"xaxis",contextMethod:r.addXaxisAnnotation}),r}},{key:"addYaxisAnnotationExternal",value:function(e,t,r){return this.addAnnotationExternal({params:e,pushToMemory:t,context:r,type:"yaxis",contextMethod:r.addYaxisAnnotation}),r}},{key:"addPointAnnotationExternal",value:function(e,t,r){return this.invertAxis===void 0&&(this.invertAxis=r.w.globals.isBarHorizontal),this.addAnnotationExternal({params:e,pushToMemory:t,context:r,type:"point",contextMethod:r.addPointAnnotation}),r}},{key:"addAnnotationExternal",value:function(e){var t=e.params,r=e.pushToMemory,a=e.context,o=e.type,h=e.contextMethod,c=a,d=c.w,p=d.globals.dom.baseEl.querySelector(".apexcharts-".concat(o,"-annotations")),x=p.childNodes.length+1,m=new ne,y=Object.assign({},o==="xaxis"?m.xAxisAnnotation:o==="yaxis"?m.yAxisAnnotation:m.pointAnnotation),A=P.extend(y,t);switch(o){case"xaxis":this.addXaxisAnnotation(A,p,x);break;case"yaxis":this.addYaxisAnnotation(A,p,x);break;case"point":this.addPointAnnotation(A,p,x)}var E=d.globals.dom.baseEl.querySelector(".apexcharts-".concat(o,"-annotations .apexcharts-").concat(o,"-annotation-label[rel='").concat(x,"']")),C=this.helpers.addBackgroundToAnno(E,A);return C&&p.insertBefore(C.node,E),r&&d.globals.memory.methodsToExec.push({context:c,id:A.id?A.id:P.randomId(),method:h,label:"addAnnotation",params:t}),a}},{key:"clearAnnotations",value:function(e){var t=e.w,r=t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");t.globals.memory.methodsToExec.map(function(a,o){a.label!=="addText"&&a.label!=="addAnnotation"||t.globals.memory.methodsToExec.splice(o,1)}),r=P.listToArray(r),Array.prototype.forEach.call(r,function(a){for(;a.firstChild;)a.removeChild(a.firstChild)})}},{key:"removeAnnotation",value:function(e,t){var r=e.w,a=r.globals.dom.baseEl.querySelectorAll(".".concat(t));a&&(r.globals.memory.methodsToExec.map(function(o,h){o.id===t&&r.globals.memory.methodsToExec.splice(h,1)}),Array.prototype.forEach.call(a,function(o){o.parentElement.removeChild(o)}))}}]),_}(),he=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.opts=null,this.seriesIndex=0}return b(_,[{key:"clippedImgArea",value:function(e){var t=this.w,r=t.config,a=parseInt(t.globals.gridWidth,10),o=parseInt(t.globals.gridHeight,10),h=a>o?a:o,c=e.image,d=0,p=0;e.width===void 0&&e.height===void 0?r.fill.image.width!==void 0&&r.fill.image.height!==void 0?(d=r.fill.image.width+1,p=r.fill.image.height):(d=h+1,p=h):(d=e.width,p=e.height);var x=document.createElementNS(t.globals.SVGNS,"pattern");X.setAttrs(x,{id:e.patternID,patternUnits:e.patternUnits?e.patternUnits:"userSpaceOnUse",width:d+"px",height:p+"px"});var m=document.createElementNS(t.globals.SVGNS,"image");x.appendChild(m),m.setAttributeNS(window.SVG.xlink,"href",c),X.setAttrs(m,{x:0,y:0,preserveAspectRatio:"none",width:d+"px",height:p+"px"}),m.style.opacity=e.opacity,t.globals.dom.elDefs.node.appendChild(x)}},{key:"getSeriesIndex",value:function(e){var t=this.w;return(t.config.chart.type==="bar"||t.config.chart.type==="rangeBar")&&t.config.plotOptions.bar.distributed||t.config.chart.type==="heatmap"||t.config.chart.type==="treemap"?this.seriesIndex=e.seriesNumber:this.seriesIndex=e.seriesNumber%t.globals.series.length,this.seriesIndex}},{key:"fillPath",value:function(e){var t=this.w;this.opts=e;var r,a,o,h=this.w.config;this.seriesIndex=this.getSeriesIndex(e);var c=this.getFillColors()[this.seriesIndex];t.globals.seriesColors[this.seriesIndex]!==void 0&&(c=t.globals.seriesColors[this.seriesIndex]),typeof c=="function"&&(c=c({seriesIndex:this.seriesIndex,dataPointIndex:e.dataPointIndex,value:e.value,w:t}));var d=this.getFillType(this.seriesIndex),p=Array.isArray(h.fill.opacity)?h.fill.opacity[this.seriesIndex]:h.fill.opacity;e.color&&(c=e.color);var x=c;if(c.indexOf("rgb")===-1?c.length<9&&(x=P.hexToRgba(c,p)):c.indexOf("rgba")>-1&&(p=P.getOpacityFromRGBA(c)),e.opacity&&(p=e.opacity),d==="pattern"&&(a=this.handlePatternFill(a,c,p,x)),d==="gradient"&&(o=this.handleGradientFill(c,p,this.seriesIndex)),d==="image"){var m=h.fill.image.src,y=e.patternID?e.patternID:"";this.clippedImgArea({opacity:p,image:Array.isArray(m)?e.seriesNumber<m.length?m[e.seriesNumber]:m[0]:m,width:e.width?e.width:void 0,height:e.height?e.height:void 0,patternUnits:e.patternUnits,patternID:"pattern".concat(t.globals.cuid).concat(e.seriesNumber+1).concat(y)}),r="url(#pattern".concat(t.globals.cuid).concat(e.seriesNumber+1).concat(y,")")}else r=d==="gradient"?o:d==="pattern"?a:x;return e.solid&&(r=x),r}},{key:"getFillType",value:function(e){var t=this.w;return Array.isArray(t.config.fill.type)?t.config.fill.type[e]:t.config.fill.type}},{key:"getFillColors",value:function(){var e=this.w,t=e.config,r=this.opts,a=[];return e.globals.comboCharts?e.config.series[this.seriesIndex].type==="line"?Array.isArray(e.globals.stroke.colors)?a=e.globals.stroke.colors:a.push(e.globals.stroke.colors):Array.isArray(e.globals.fill.colors)?a=e.globals.fill.colors:a.push(e.globals.fill.colors):t.chart.type==="line"?Array.isArray(e.globals.stroke.colors)?a=e.globals.stroke.colors:a.push(e.globals.stroke.colors):Array.isArray(e.globals.fill.colors)?a=e.globals.fill.colors:a.push(e.globals.fill.colors),r.fillColors!==void 0&&(a=[],Array.isArray(r.fillColors)?a=r.fillColors.slice():a.push(r.fillColors)),a}},{key:"handlePatternFill",value:function(e,t,r,a){var o=this.w.config,h=this.opts,c=new X(this.ctx),d=o.fill.pattern.strokeWidth===void 0?Array.isArray(o.stroke.width)?o.stroke.width[this.seriesIndex]:o.stroke.width:Array.isArray(o.fill.pattern.strokeWidth)?o.fill.pattern.strokeWidth[this.seriesIndex]:o.fill.pattern.strokeWidth,p=t;return Array.isArray(o.fill.pattern.style)?e=o.fill.pattern.style[h.seriesNumber]!==void 0?c.drawPattern(o.fill.pattern.style[h.seriesNumber],o.fill.pattern.width,o.fill.pattern.height,p,d,r):a:e=c.drawPattern(o.fill.pattern.style,o.fill.pattern.width,o.fill.pattern.height,p,d,r),e}},{key:"handleGradientFill",value:function(e,t,r){var a,o=this.w.config,h=this.opts,c=new X(this.ctx),d=new P,p=o.fill.gradient.type,x=e,m=o.fill.gradient.opacityFrom===void 0?t:Array.isArray(o.fill.gradient.opacityFrom)?o.fill.gradient.opacityFrom[r]:o.fill.gradient.opacityFrom;x.indexOf("rgba")>-1&&(m=P.getOpacityFromRGBA(x));var y=o.fill.gradient.opacityTo===void 0?t:Array.isArray(o.fill.gradient.opacityTo)?o.fill.gradient.opacityTo[r]:o.fill.gradient.opacityTo;if(o.fill.gradient.gradientToColors===void 0||o.fill.gradient.gradientToColors.length===0)a=o.fill.gradient.shade==="dark"?d.shadeColor(-1*parseFloat(o.fill.gradient.shadeIntensity),e.indexOf("rgb")>-1?P.rgb2hex(e):e):d.shadeColor(parseFloat(o.fill.gradient.shadeIntensity),e.indexOf("rgb")>-1?P.rgb2hex(e):e);else if(o.fill.gradient.gradientToColors[h.seriesNumber]){var A=o.fill.gradient.gradientToColors[h.seriesNumber];a=A,A.indexOf("rgba")>-1&&(y=P.getOpacityFromRGBA(A))}else a=e;if(o.fill.gradient.inverseColors){var E=x;x=a,a=E}return x.indexOf("rgb")>-1&&(x=P.rgb2hex(x)),a.indexOf("rgb")>-1&&(a=P.rgb2hex(a)),c.drawGradient(p,x,a,m,y,h.size,o.fill.gradient.stops,o.fill.gradient.colorStops,r)}}]),_}(),Re=function(){function _(e,t){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"setGlobalMarkerSize",value:function(){var e=this.w;if(e.globals.markers.size=Array.isArray(e.config.markers.size)?e.config.markers.size:[e.config.markers.size],e.globals.markers.size.length>0){if(e.globals.markers.size.length<e.globals.series.length+1)for(var t=0;t<=e.globals.series.length;t++)e.globals.markers.size[t]===void 0&&e.globals.markers.size.push(e.globals.markers.size[0])}else e.globals.markers.size=e.config.series.map(function(r){return e.config.markers.size})}},{key:"plotChartMarkers",value:function(e,t,r,a){var o,h=arguments.length>4&&arguments[4]!==void 0&&arguments[4],c=this.w,d=t,p=e,x=null,m=new X(this.ctx),y=c.config.markers.discrete&&c.config.markers.discrete.length;if((c.globals.markers.size[t]>0||h||y)&&(x=m.group({class:h||y?"":"apexcharts-series-markers"})).attr("clip-path","url(#gridRectMarkerMask".concat(c.globals.cuid,")")),Array.isArray(p.x))for(var A=0;A<p.x.length;A++){var E=r;r===1&&A===0&&(E=0),r===1&&A===1&&(E=1);var C="apexcharts-marker";c.config.chart.type!=="line"&&c.config.chart.type!=="area"||c.globals.comboCharts||c.config.tooltip.intersect||(C+=" no-pointer-events");var L=Array.isArray(c.config.markers.size)?c.globals.markers.size[t]>0:c.config.markers.size>0;if(L||h||y){P.isNumber(p.y[A])?C+=" w".concat(P.randomId()):C="apexcharts-nullpoint";var R=this.getMarkerConfig({cssClass:C,seriesIndex:t,dataPointIndex:E});c.config.series[d].data[E]&&(c.config.series[d].data[E].fillColor&&(R.pointFillColor=c.config.series[d].data[E].fillColor),c.config.series[d].data[E].strokeColor&&(R.pointStrokeColor=c.config.series[d].data[E].strokeColor)),a&&(R.pSize=a),(o=m.drawMarker(p.x[A],p.y[A],R)).attr("rel",E),o.attr("j",E),o.attr("index",t),o.node.setAttribute("default-marker-size",R.pSize);var F=new H(this.ctx);F.setSelectionFilter(o,t,E),this.addEvents(o),x&&x.add(o)}else c.globals.pointsArray[t]===void 0&&(c.globals.pointsArray[t]=[]),c.globals.pointsArray[t].push([p.x[A],p.y[A]])}return x}},{key:"getMarkerConfig",value:function(e){var t=e.cssClass,r=e.seriesIndex,a=e.dataPointIndex,o=a===void 0?null:a,h=e.finishRadius,c=h===void 0?null:h,d=this.w,p=this.getMarkerStyle(r),x=d.globals.markers.size[r],m=d.config.markers;return o!==null&&m.discrete.length&&m.discrete.map(function(y){y.seriesIndex===r&&y.dataPointIndex===o&&(p.pointStrokeColor=y.strokeColor,p.pointFillColor=y.fillColor,x=y.size,p.pointShape=y.shape)}),{pSize:c===null?x:c,pRadius:m.radius,width:Array.isArray(m.width)?m.width[r]:m.width,height:Array.isArray(m.height)?m.height[r]:m.height,pointStrokeWidth:Array.isArray(m.strokeWidth)?m.strokeWidth[r]:m.strokeWidth,pointStrokeColor:p.pointStrokeColor,pointFillColor:p.pointFillColor,shape:p.pointShape||(Array.isArray(m.shape)?m.shape[r]:m.shape),class:t,pointStrokeOpacity:Array.isArray(m.strokeOpacity)?m.strokeOpacity[r]:m.strokeOpacity,pointStrokeDashArray:Array.isArray(m.strokeDashArray)?m.strokeDashArray[r]:m.strokeDashArray,pointFillOpacity:Array.isArray(m.fillOpacity)?m.fillOpacity[r]:m.fillOpacity,seriesIndex:r}}},{key:"addEvents",value:function(e){var t=this.w,r=new X(this.ctx);e.node.addEventListener("mouseenter",r.pathMouseEnter.bind(this.ctx,e)),e.node.addEventListener("mouseleave",r.pathMouseLeave.bind(this.ctx,e)),e.node.addEventListener("mousedown",r.pathMouseDown.bind(this.ctx,e)),e.node.addEventListener("click",t.config.markers.onClick),e.node.addEventListener("dblclick",t.config.markers.onDblClick),e.node.addEventListener("touchstart",r.pathMouseDown.bind(this.ctx,e),{passive:!0})}},{key:"getMarkerStyle",value:function(e){var t=this.w,r=t.globals.markers.colors,a=t.config.markers.strokeColor||t.config.markers.strokeColors;return{pointStrokeColor:Array.isArray(a)?a[e]:a,pointFillColor:Array.isArray(r)?r[e]:r}}}]),_}(),Fe=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.initialAnim=this.w.config.chart.animations.enabled,this.dynamicAnim=this.initialAnim&&this.w.config.chart.animations.dynamicAnimation.enabled}return b(_,[{key:"draw",value:function(e,t,r){var a=this.w,o=new X(this.ctx),h=r.realIndex,c=r.pointsPos,d=r.zRatio,p=r.elParent,x=o.group({class:"apexcharts-series-markers apexcharts-series-".concat(a.config.chart.type)});if(x.attr("clip-path","url(#gridRectMarkerMask".concat(a.globals.cuid,")")),Array.isArray(c.x))for(var m=0;m<c.x.length;m++){var y=t+1,A=!0;t===0&&m===0&&(y=0),t===0&&m===1&&(y=1);var E=0,C=a.globals.markers.size[h];if(d!==1/0){C=a.globals.seriesZ[h][y]/d;var L=a.config.plotOptions.bubble;L.minBubbleRadius&&C<L.minBubbleRadius&&(C=L.minBubbleRadius),L.maxBubbleRadius&&C>L.maxBubbleRadius&&(C=L.maxBubbleRadius)}a.config.chart.animations.enabled||(E=C);var R=c.x[m],F=c.y[m];if(E=E||0,F!==null&&a.globals.series[h][y]!==void 0||(A=!1),A){var D=this.drawPoint(R,F,E,C,h,y,t);x.add(D)}p.add(x)}}},{key:"drawPoint",value:function(e,t,r,a,o,h,c){var d=this.w,p=o,x=new q(this.ctx),m=new H(this.ctx),y=new he(this.ctx),A=new Re(this.ctx),E=new X(this.ctx),C=A.getMarkerConfig({cssClass:"apexcharts-marker",seriesIndex:p,dataPointIndex:h,finishRadius:d.config.chart.type==="bubble"||d.globals.comboCharts&&d.config.series[o]&&d.config.series[o].type==="bubble"?a:null});a=C.pSize;var L,R=y.fillPath({seriesNumber:o,dataPointIndex:h,color:C.pointFillColor,patternUnits:"objectBoundingBox",value:d.globals.series[o][c]});if(C.shape==="circle"?L=E.drawCircle(r):C.shape!=="square"&&C.shape!=="rect"||(L=E.drawRect(0,0,C.width-C.pointStrokeWidth/2,C.height-C.pointStrokeWidth/2,C.pRadius)),d.config.series[p].data[h]&&d.config.series[p].data[h].fillColor&&(R=d.config.series[p].data[h].fillColor),L.attr({x:e-C.width/2-C.pointStrokeWidth/2,y:t-C.height/2-C.pointStrokeWidth/2,cx:e,cy:t,fill:R,"fill-opacity":C.pointFillOpacity,stroke:C.pointStrokeColor,r:a,"stroke-width":C.pointStrokeWidth,"stroke-dasharray":C.pointStrokeDashArray,"stroke-opacity":C.pointStrokeOpacity}),d.config.chart.dropShadow.enabled){var F=d.config.chart.dropShadow;m.dropShadow(L,F,o)}if(!this.initialAnim||d.globals.dataChanged||d.globals.resized)d.globals.animationEnded=!0;else{var D=d.config.chart.animations.speed;x.animateMarker(L,0,C.shape==="circle"?a:{width:C.width,height:C.height},D,d.globals.easing,function(){window.setTimeout(function(){x.animationCompleted(L)},100)})}if(d.globals.dataChanged&&C.shape==="circle")if(this.dynamicAnim){var g,w,T,M,V=d.config.chart.animations.dynamicAnimation.speed;(M=d.globals.previousPaths[o]&&d.globals.previousPaths[o][c])!=null&&(g=M.x,w=M.y,T=M.r!==void 0?M.r:a);for(var J=0;J<d.globals.collapsedSeries.length;J++)d.globals.collapsedSeries[J].index===o&&(V=1,a=0);e===0&&t===0&&(a=0),x.animateCircle(L,{cx:g,cy:w,r:T},{cx:e,cy:t,r:a},V,d.globals.easing)}else L.attr({r:a});return L.attr({rel:h,j:h,index:o,"default-marker-size":a}),m.setSelectionFilter(L,o,h),A.addEvents(L),L.node.classList.add("apexcharts-marker"),L}},{key:"centerTextInBubble",value:function(e){var t=this.w;return{y:e+=parseInt(t.config.dataLabels.style.fontSize,10)/4}}}]),_}(),Me=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"dataLabelsCorrection",value:function(e,t,r,a,o,h,c){var d=this.w,p=!1,x=new X(this.ctx).getTextRects(r,c),m=x.width,y=x.height;t<0&&(t=0),t>d.globals.gridHeight+y&&(t=d.globals.gridHeight+y/2),d.globals.dataLabelsRects[a]===void 0&&(d.globals.dataLabelsRects[a]=[]),d.globals.dataLabelsRects[a].push({x:e,y:t,width:m,height:y});var A=d.globals.dataLabelsRects[a].length-2,E=d.globals.lastDrawnDataLabelsIndexes[a]!==void 0?d.globals.lastDrawnDataLabelsIndexes[a][d.globals.lastDrawnDataLabelsIndexes[a].length-1]:0;if(d.globals.dataLabelsRects[a][A]!==void 0){var C=d.globals.dataLabelsRects[a][E];(e>C.x+C.width+2||t>C.y+C.height+2||e+m<C.x)&&(p=!0)}return(o===0||h)&&(p=!0),{x:e,y:t,textRects:x,drawnextLabel:p}}},{key:"drawDataLabel",value:function(e,t,r){var a=this,o=arguments.length>4&&arguments[4]!==void 0?arguments[4]:2,h=this.w,c=new X(this.ctx),d=h.config.dataLabels,p=0,x=0,m=r,y=null;if(!d.enabled||!Array.isArray(e.x))return y;y=c.group({class:"apexcharts-data-labels"});for(var A=0;A<e.x.length;A++)if(p=e.x[A]+d.offsetX,x=e.y[A]+d.offsetY+o,!isNaN(p)){r===1&&A===0&&(m=0),r===1&&A===1&&(m=1);var E=h.globals.series[t][m],C="",L=function(D){return h.config.dataLabels.formatter(D,{ctx:a.ctx,seriesIndex:t,dataPointIndex:m,w:h})};if(h.config.chart.type==="bubble"){C=L(E=h.globals.seriesZ[t][m]),x=e.y[A];var R=new Fe(this.ctx),F=R.centerTextInBubble(x,t,m);x=F.y}else E!==void 0&&(C=L(E));this.plotDataLabelsText({x:p,y:x,text:C,i:t,j:m,parent:y,offsetCorrection:!0,dataLabelsConfig:h.config.dataLabels})}return y}},{key:"plotDataLabelsText",value:function(e){var t=this.w,r=new X(this.ctx),a=e.x,o=e.y,h=e.i,c=e.j,d=e.text,p=e.textAnchor,x=e.fontSize,m=e.parent,y=e.dataLabelsConfig,A=e.color,E=e.alwaysDrawDataLabel,C=e.offsetCorrection;if(!(Array.isArray(t.config.dataLabels.enabledOnSeries)&&t.config.dataLabels.enabledOnSeries.indexOf(h)<0)){var L={x:a,y:o,drawnextLabel:!0,textRects:null};C&&(L=this.dataLabelsCorrection(a,o,d,h,c,E,parseInt(y.style.fontSize,10))),t.globals.zoomed||(a=L.x,o=L.y),L.textRects&&(a<-10-L.textRects.width||a>t.globals.gridWidth+L.textRects.width+10)&&(d="");var R=t.globals.dataLabels.style.colors[h];((t.config.chart.type==="bar"||t.config.chart.type==="rangeBar")&&t.config.plotOptions.bar.distributed||t.config.dataLabels.distributed)&&(R=t.globals.dataLabels.style.colors[c]),typeof R=="function"&&(R=R({series:t.globals.series,seriesIndex:h,dataPointIndex:c,w:t})),A&&(R=A);var F=y.offsetX,D=y.offsetY;if(t.config.chart.type!=="bar"&&t.config.chart.type!=="rangeBar"||(F=0,D=0),L.drawnextLabel){var g=r.drawText({width:100,height:parseInt(y.style.fontSize,10),x:a+F,y:o+D,foreColor:R,textAnchor:p||y.textAnchor,text:d,fontSize:x||y.style.fontSize,fontFamily:y.style.fontFamily,fontWeight:y.style.fontWeight||"normal"});if(g.attr({class:"apexcharts-datalabel",cx:a,cy:o}),y.dropShadow.enabled){var w=y.dropShadow;new H(this.ctx).dropShadow(g,w)}m.add(g),t.globals.lastDrawnDataLabelsIndexes[h]===void 0&&(t.globals.lastDrawnDataLabelsIndexes[h]=[]),t.globals.lastDrawnDataLabelsIndexes[h].push(c)}}}},{key:"addBackgroundToDataLabel",value:function(e,t){var r=this.w,a=r.config.dataLabels.background,o=a.padding,h=a.padding/2,c=t.width,d=t.height,p=new X(this.ctx).drawRect(t.x-o,t.y-h/2,c+2*o,d+h,a.borderRadius,r.config.chart.background==="transparent"?"#fff":r.config.chart.background,a.opacity,a.borderWidth,a.borderColor);return a.dropShadow.enabled&&new H(this.ctx).dropShadow(p,a.dropShadow),p}},{key:"dataLabelsBackground",value:function(){var e=this.w;if(e.config.chart.type!=="bubble")for(var t=e.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"),r=0;r<t.length;r++){var a=t[r],o=a.getBBox(),h=null;if(o.width&&o.height&&(h=this.addBackgroundToDataLabel(a,o)),h){a.parentNode.insertBefore(h.node,a);var c=a.getAttribute("fill");e.config.chart.animations.enabled&&!e.globals.resized&&!e.globals.dataChanged?h.animate().attr({fill:c}):h.attr({fill:c}),a.setAttribute("fill",e.config.dataLabels.background.foreColor)}}}},{key:"bringForward",value:function(){for(var e=this.w,t=e.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"),r=e.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"),a=0;a<t.length;a++)r&&r.insertBefore(t[a],r.nextSibling)}}]),_}(),Ne=function(){function _(e){f(this,_),this.w=e.w,this.barCtx=e}return b(_,[{key:"handleBarDataLabels",value:function(e){var t=e.x,r=e.y,a=e.y1,o=e.y2,h=e.i,c=e.j,d=e.realIndex,p=e.series,x=e.barHeight,m=e.barWidth,y=e.barYPosition,A=e.visibleSeries,E=e.renderedPath,C=this.w,L=new X(this.barCtx.ctx),R=Array.isArray(this.barCtx.strokeWidth)?this.barCtx.strokeWidth[d]:this.barCtx.strokeWidth,F=t+parseFloat(m*A),D=r+parseFloat(x*A);C.globals.isXNumeric&&!C.globals.isBarHorizontal&&(F=t+parseFloat(m*(A+1)),D=r+parseFloat(x*(A+1))-R);var g=t,w=r,T={},M=C.config.dataLabels,V=this.barCtx.barOptions.dataLabels;y!==void 0&&this.barCtx.isRangeBar&&(D=y,w=y);var J=M.offsetX,G=M.offsetY,oe={width:0,height:0};if(C.config.dataLabels.enabled){var re=this.barCtx.series[h][c];oe=L.getTextRects(C.globals.yLabelFormatters[0](re),parseFloat(M.style.fontSize))}var ge={x:t,y:r,i:h,j:c,renderedPath:E,bcx:F,bcy:D,barHeight:x,barWidth:m,textRects:oe,strokeWidth:R,dataLabelsX:g,dataLabelsY:w,barDataLabelsConfig:V,offX:J,offY:G};return T=this.barCtx.isHorizontal?this.calculateBarsDataLabelsPosition(ge):this.calculateColumnsDataLabelsPosition(ge),E.attr({cy:T.bcy,cx:T.bcx,j:c,val:p[h][c],barHeight:x,barWidth:m}),this.drawCalculatedDataLabels({x:T.dataLabelsX,y:T.dataLabelsY,val:this.barCtx.isRangeBar?[a,o]:p[h][c],i:d,j:c,barWidth:m,barHeight:x,textRects:oe,dataLabelsConfig:M})}},{key:"calculateColumnsDataLabelsPosition",value:function(e){var t,r=this.w,a=e.i,o=e.j,h=e.y,c=e.bcx,d=e.barWidth,p=e.barHeight,x=e.textRects,m=e.dataLabelsY,y=e.barDataLabelsConfig,A=e.strokeWidth,E=e.offX,C=e.offY;p=Math.abs(p);var L=r.config.plotOptions.bar.dataLabels.orientation==="vertical";c-=A/2;var R=r.globals.gridWidth/r.globals.dataPoints;t=r.globals.isXNumeric?c-d/2+E:c-R+d/2+E,L&&(t=t+x.height/2-A/2-2);var F=this.barCtx.series[a][o]<0,D=h;switch(this.barCtx.isReversed&&(D=h-p+(F?2*p:0),h-=p),y.position){case"center":m=L?F?D+p/2+C:D+p/2-C:F?D-p/2+x.height/2+C:D+p/2+x.height/2-C;break;case"bottom":m=L?F?D+p+C:D+p-C:F?D-p+x.height+A+C:D+p-x.height/2+A-C;break;case"top":m=L?F?D+C:D-C:F?D-x.height/2-C:D+x.height+C}return r.config.chart.stacked||(m<0?m=0+A:m+x.height/3>r.globals.gridHeight&&(m=r.globals.gridHeight-A)),{bcx:c,bcy:h,dataLabelsX:t,dataLabelsY:m}}},{key:"calculateBarsDataLabelsPosition",value:function(e){var t=this.w,r=e.x,a=e.i,o=e.j,h=e.bcy,c=e.barHeight,d=e.barWidth,p=e.textRects,x=e.dataLabelsX,m=e.strokeWidth,y=e.barDataLabelsConfig,A=e.offX,E=e.offY,C=t.globals.gridHeight/t.globals.dataPoints;d=Math.abs(d);var L=h-(this.barCtx.isRangeBar?0:C)+c/2+p.height/2+E-3,R=this.barCtx.series[a][o]<0,F=r;switch(this.barCtx.isReversed&&(F=r+d-(R?2*d:0),r=t.globals.gridWidth-d),y.position){case"center":x=R?F+d/2-A:Math.max(p.width/2,F-d/2)+A;break;case"bottom":x=R?F+d-m-Math.round(p.width/2)-A:F-d+m+Math.round(p.width/2)+A;break;case"top":x=R?F-m+Math.round(p.width/2)-A:F-m-Math.round(p.width/2)+A}return t.config.chart.stacked||(x<0?x=x+p.width+m:x+p.width/2>t.globals.gridWidth&&(x=t.globals.gridWidth-p.width-m)),{bcx:r,bcy:h,dataLabelsX:x,dataLabelsY:L}}},{key:"drawCalculatedDataLabels",value:function(e){var t=e.x,r=e.y,a=e.val,o=e.i,h=e.j,c=e.textRects,d=e.barHeight,p=e.barWidth,x=e.dataLabelsConfig,m=this.w,y="rotate(0)";m.config.plotOptions.bar.dataLabels.orientation==="vertical"&&(y="rotate(-90, ".concat(t,", ").concat(r,")"));var A=new Me(this.barCtx.ctx),E=new X(this.barCtx.ctx),C=x.formatter,L=null,R=m.globals.collapsedSeriesIndices.indexOf(o)>-1;if(x.enabled&&!R){L=E.group({class:"apexcharts-data-labels",transform:y});var F="";a!==void 0&&(F=C(a,{seriesIndex:o,dataPointIndex:h,w:m}));var D=m.globals.series[o][h]<0,g=m.config.plotOptions.bar.dataLabels.position;m.config.plotOptions.bar.dataLabels.orientation==="vertical"&&(g==="top"&&(x.textAnchor=D?"end":"start"),g==="center"&&(x.textAnchor="middle"),g==="bottom"&&(x.textAnchor=D?"end":"start")),this.barCtx.isRangeBar&&this.barCtx.barOptions.dataLabels.hideOverflowingLabels&&p<E.getTextRects(F,parseFloat(x.style.fontSize)).width&&(F=""),m.config.chart.stacked&&this.barCtx.barOptions.dataLabels.hideOverflowingLabels&&(this.barCtx.isHorizontal?c.width/1.6>Math.abs(p)&&(F=""):c.height/1.6>Math.abs(d)&&(F=""));var w=l({},x);this.barCtx.isHorizontal&&a<0&&(x.textAnchor==="start"?w.textAnchor="end":x.textAnchor==="end"&&(w.textAnchor="start")),A.plotDataLabelsText({x:t,y:r,text:F,i:o,j:h,parent:L,dataLabelsConfig:w,alwaysDrawDataLabel:!0,offsetCorrection:!0})}return L}}]),_}(),Be=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.legendInactiveClass="legend-mouseover-inactive"}return b(_,[{key:"getAllSeriesEls",value:function(){return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series")}},{key:"getSeriesByName",value:function(e){return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(P.escapeString(e),"']"))}},{key:"isSeriesHidden",value:function(e){var t=this.getSeriesByName(e),r=parseInt(t.getAttribute("data:realIndex"),10);return{isHidden:t.classList.contains("apexcharts-series-collapsed"),realIndex:r}}},{key:"addCollapsedClassToSeries",value:function(e,t){var r=this.w;function a(o){for(var h=0;h<o.length;h++)o[h].index===t&&e.node.classList.add("apexcharts-series-collapsed")}a(r.globals.collapsedSeries),a(r.globals.ancillaryCollapsedSeries)}},{key:"toggleSeries",value:function(e){var t=this.isSeriesHidden(e);return this.ctx.legend.legendHelpers.toggleDataSeries(t.realIndex,t.isHidden),t.isHidden}},{key:"showSeries",value:function(e){var t=this.isSeriesHidden(e);t.isHidden&&this.ctx.legend.legendHelpers.toggleDataSeries(t.realIndex,!0)}},{key:"hideSeries",value:function(e){var t=this.isSeriesHidden(e);t.isHidden||this.ctx.legend.legendHelpers.toggleDataSeries(t.realIndex,!1)}},{key:"resetSeries",value:function(){var e=!(arguments.length>0&&arguments[0]!==void 0)||arguments[0],t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1],r=!(arguments.length>2&&arguments[2]!==void 0)||arguments[2],a=this.w,o=P.clone(a.globals.initialSeries);a.globals.previousPaths=[],r?(a.globals.collapsedSeries=[],a.globals.ancillaryCollapsedSeries=[],a.globals.collapsedSeriesIndices=[],a.globals.ancillaryCollapsedSeriesIndices=[]):o=this.emptyCollapsedSeries(o),a.config.series=o,e&&(t&&(a.globals.zoomed=!1,this.ctx.updateHelpers.revertDefaultAxisMinMax()),this.ctx.updateHelpers._updateSeries(o,a.config.chart.animations.dynamicAnimation.enabled))}},{key:"emptyCollapsedSeries",value:function(e){for(var t=this.w,r=0;r<e.length;r++)t.globals.collapsedSeriesIndices.indexOf(r)>-1&&(e[r].data=[]);return e}},{key:"toggleSeriesOnHover",value:function(e,t){var r=this.w;t||(t=e.target);var a=r.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels");if(e.type==="mousemove"){var o=parseInt(t.getAttribute("rel"),10)-1,h=null,c=null;r.globals.axisCharts||r.config.chart.type==="radialBar"?r.globals.axisCharts?(h=r.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(o,"']")),c=r.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(o,"']"))):h=r.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(o+1,"']")):h=r.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(o+1,"'] path"));for(var d=0;d<a.length;d++)a[d].classList.add(this.legendInactiveClass);h!==null&&(r.globals.axisCharts||h.parentNode.classList.remove(this.legendInactiveClass),h.classList.remove(this.legendInactiveClass),c!==null&&c.classList.remove(this.legendInactiveClass))}else if(e.type==="mouseout")for(var p=0;p<a.length;p++)a[p].classList.remove(this.legendInactiveClass)}},{key:"highlightRangeInSeries",value:function(e,t){var r=this,a=this.w,o=a.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"),h=function(d){for(var p=0;p<o.length;p++)o[p].classList[d](r.legendInactiveClass)};if(e.type==="mousemove"){var c=parseInt(t.getAttribute("rel"),10)-1;h("add"),function(d){for(var p=0;p<o.length;p++){var x=parseInt(o[p].getAttribute("val"),10);x>=d.from&&x<=d.to&&o[p].classList.remove(r.legendInactiveClass)}}(a.config.plotOptions.heatmap.colorScale.ranges[c])}else e.type==="mouseout"&&h("remove")}},{key:"getActiveConfigSeriesIndex",value:function(){var e=arguments.length>0&&arguments[0]!==void 0&&arguments[0],t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"asc",r=this.w,a=0;if(r.config.series.length>1){for(var o=r.config.series.map(function(c,d){var p=!1;return e&&(p=r.config.series[d].type==="bar"||r.config.series[d].type==="column"),c.data&&c.data.length>0&&!p?d:-1}),h=t==="asc"?0:o.length-1;t==="asc"?h<o.length:h>=0;t==="asc"?h++:h--)if(o[h]!==-1){a=o[h];break}}return a}},{key:"getPreviousPaths",value:function(){var e=this.w;function t(h,c,d){for(var p=h[c].childNodes,x={type:d,paths:[],realIndex:h[c].getAttribute("data:realIndex")},m=0;m<p.length;m++)if(p[m].hasAttribute("pathTo")){var y=p[m].getAttribute("pathTo");x.paths.push({d:y})}e.globals.previousPaths.push(x)}e.globals.previousPaths=[],["line","area","bar","rangebar","candlestick","radar"].forEach(function(h){for(var c,d=(c=h,e.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(c,"-series .apexcharts-series"))),p=0;p<d.length;p++)t(d,p,h)}),this.handlePrevBubbleScatterPaths("bubble"),this.handlePrevBubbleScatterPaths("scatter");var r=e.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(e.config.chart.type," .apexcharts-series"));if(r.length>0)for(var a=function(h){for(var c=e.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(e.config.chart.type," .apexcharts-series[data\\:realIndex='").concat(h,"'] rect")),d=[],p=function(m){var y=function(E){return c[m].getAttribute(E)},A={x:parseFloat(y("x")),y:parseFloat(y("y")),width:parseFloat(y("width")),height:parseFloat(y("height"))};d.push({rect:A,color:c[m].getAttribute("color")})},x=0;x<c.length;x++)p(x);e.globals.previousPaths.push(d)},o=0;o<r.length;o++)a(o);e.globals.axisCharts||(e.globals.previousPaths=e.globals.series)}},{key:"handlePrevBubbleScatterPaths",value:function(e){var t=this.w,r=t.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(e,"-series .apexcharts-series"));if(r.length>0)for(var a=0;a<r.length;a++){for(var o=t.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(e,"-series .apexcharts-series[data\\:realIndex='").concat(a,"'] circle")),h=[],c=0;c<o.length;c++)h.push({x:o[c].getAttribute("cx"),y:o[c].getAttribute("cy"),r:o[c].getAttribute("r")});t.globals.previousPaths.push(h)}}},{key:"clearPreviousPaths",value:function(){var e=this.w;e.globals.previousPaths=[],e.globals.allSeriesCollapsed=!1}},{key:"handleNoData",value:function(){var e=this.w,t=e.config.noData,r=new X(this.ctx),a=e.globals.svgWidth/2,o=e.globals.svgHeight/2,h="middle";if(e.globals.noData=!0,e.globals.animationEnded=!0,t.align==="left"?(a=10,h="start"):t.align==="right"&&(a=e.globals.svgWidth-10,h="end"),t.verticalAlign==="top"?o=50:t.verticalAlign==="bottom"&&(o=e.globals.svgHeight-50),a+=t.offsetX,o=o+parseInt(t.style.fontSize,10)+2+t.offsetY,t.text!==void 0&&t.text!==""){var c=r.drawText({x:a,y:o,text:t.text,textAnchor:h,fontSize:t.style.fontSize,fontFamily:t.style.fontFamily,foreColor:t.style.color,opacity:1,class:"apexcharts-text-nodata"});e.globals.dom.Paper.add(c)}}},{key:"setNullSeriesToZeroValues",value:function(e){for(var t=this.w,r=0;r<e.length;r++)if(e[r].length===0)for(var a=0;a<e[t.globals.maxValsInArrayIndex].length;a++)e[r].push(0);return e}},{key:"hasAllSeriesEqualX",value:function(){for(var e=!0,t=this.w,r=this.filteredSeriesX(),a=0;a<r.length-1;a++)if(r[a][0]!==r[a+1][0]){e=!1;break}return t.globals.allSeriesHasEqualX=e,e}},{key:"filteredSeriesX",value:function(){var e=this.w.globals.seriesX.map(function(t){return t.length>0?t:[]});return e}}]),_}(),Yt=function(){function _(e){f(this,_),this.w=e.w,this.barCtx=e}return b(_,[{key:"initVariables",value:function(e){var t=this.w;this.barCtx.series=e,this.barCtx.totalItems=0,this.barCtx.seriesLen=0,this.barCtx.visibleI=-1,this.barCtx.visibleItems=1;for(var r=0;r<e.length;r++)if(e[r].length>0&&(this.barCtx.seriesLen=this.barCtx.seriesLen+1,this.barCtx.totalItems+=e[r].length),t.globals.isXNumeric)for(var a=0;a<e[r].length;a++)t.globals.seriesX[r][a]>t.globals.minX&&t.globals.seriesX[r][a]<t.globals.maxX&&this.barCtx.visibleItems++;else this.barCtx.visibleItems=t.globals.dataPoints;this.barCtx.seriesLen===0&&(this.barCtx.seriesLen=1),this.barCtx.zeroSerieses=[],this.barCtx.radiusOnSeriesNumber=e.length-1,t.globals.comboCharts||this.checkZeroSeries({series:e})}},{key:"initialPositions",value:function(){var e,t,r,a,o,h,c,d,p=this.w,x=p.globals.dataPoints;this.barCtx.isRangeBar&&(x=p.globals.labels.length);var m=this.barCtx.seriesLen;if(p.config.plotOptions.bar.rangeBarGroupRows&&(m=1),this.barCtx.isHorizontal)o=(r=p.globals.gridHeight/x)/m,p.globals.isXNumeric&&(o=(r=p.globals.gridHeight/this.barCtx.totalItems)/this.barCtx.seriesLen),o=o*parseInt(this.barCtx.barOptions.barHeight,10)/100,d=this.barCtx.baseLineInvertedY+p.globals.padHorizontal+(this.barCtx.isReversed?p.globals.gridWidth:0)-(this.barCtx.isReversed?2*this.barCtx.baseLineInvertedY:0),t=(r-o*this.barCtx.seriesLen)/2;else{if(a=p.globals.gridWidth/this.barCtx.visibleItems,p.config.xaxis.convertedCatToNumeric&&(a=p.globals.gridWidth/p.globals.dataPoints),h=a/this.barCtx.seriesLen*parseInt(this.barCtx.barOptions.columnWidth,10)/100,p.globals.isXNumeric){var y=this.barCtx.xRatio;p.config.xaxis.convertedCatToNumeric&&(y=this.barCtx.initialXRatio),p.globals.minXDiff&&p.globals.minXDiff!==.5&&p.globals.minXDiff/y>0&&(a=p.globals.minXDiff/y),(h=a/this.barCtx.seriesLen*parseInt(this.barCtx.barOptions.columnWidth,10)/100)<1&&(h=1)}c=p.globals.gridHeight-this.barCtx.baseLineY[this.barCtx.yaxisIndex]-(this.barCtx.isReversed?p.globals.gridHeight:0)+(this.barCtx.isReversed?2*this.barCtx.baseLineY[this.barCtx.yaxisIndex]:0),e=p.globals.padHorizontal+(a-h*this.barCtx.seriesLen)/2}return{x:e,y:t,yDivision:r,xDivision:a,barHeight:o,barWidth:h,zeroH:c,zeroW:d}}},{key:"getPathFillColor",value:function(e,t,r,a){var o=this.w,h=new he(this.barCtx.ctx),c=null,d=this.barCtx.barOptions.distributed?r:t;return this.barCtx.barOptions.colors.ranges.length>0&&this.barCtx.barOptions.colors.ranges.map(function(p){e[t][r]>=p.from&&e[t][r]<=p.to&&(c=p.color)}),o.config.series[t].data[r]&&o.config.series[t].data[r].fillColor&&(c=o.config.series[t].data[r].fillColor),h.fillPath({seriesNumber:this.barCtx.barOptions.distributed?d:a,dataPointIndex:r,color:c,value:e[t][r]})}},{key:"getStrokeWidth",value:function(e,t,r){var a=0,o=this.w;return this.barCtx.series[e][t]===void 0||this.barCtx.series[e][t]===null?this.barCtx.isNullValue=!0:this.barCtx.isNullValue=!1,o.config.stroke.show&&(this.barCtx.isNullValue||(a=Array.isArray(this.barCtx.strokeWidth)?this.barCtx.strokeWidth[r]:this.barCtx.strokeWidth)),a}},{key:"barBackground",value:function(e){var t=e.j,r=e.i,a=e.x1,o=e.x2,h=e.y1,c=e.y2,d=e.elSeries,p=this.w,x=new X(this.barCtx.ctx),m=new Be(this.barCtx.ctx).getActiveConfigSeriesIndex();if(this.barCtx.barOptions.colors.backgroundBarColors.length>0&&m===r){t>=this.barCtx.barOptions.colors.backgroundBarColors.length&&(t%=this.barCtx.barOptions.colors.backgroundBarColors.length);var y=this.barCtx.barOptions.colors.backgroundBarColors[t],A=x.drawRect(a!==void 0?a:0,h!==void 0?h:0,o!==void 0?o:p.globals.gridWidth,c!==void 0?c:p.globals.gridHeight,this.barCtx.barOptions.colors.backgroundBarRadius,y,this.barCtx.barOptions.colors.backgroundBarOpacity);d.add(A),A.node.classList.add("apexcharts-backgroundBar")}}},{key:"getColumnPaths",value:function(e){var t=e.barWidth,r=e.barXPosition,a=e.yRatio,o=e.y1,h=e.y2,c=e.strokeWidth,d=e.series,p=e.realIndex,x=e.i,m=e.j,y=e.w,A=new X(this.barCtx.ctx);(c=Array.isArray(c)?c[p]:c)||(c=0);var E={barWidth:t,strokeWidth:c,yRatio:a,barXPosition:r,y1:o,y2:h},C=this.getRoundedBars(y,E,d,x,m),L=r,R=r+t,F=A.move(L,o),D=A.move(L,o),g=A.line(R-c,o);return y.globals.previousPaths.length>0&&(D=this.barCtx.getPreviousPath(p,m,!1)),F=F+A.line(L,C.y2)+C.pathWithRadius+A.line(R-c,C.y2)+g+g+"z",D=D+A.line(L,o)+g+g+g+g+g+A.line(L,o),y.config.chart.stacked&&(this.barCtx.yArrj.push(C.y2),this.barCtx.yArrjF.push(Math.abs(o-C.y2)),this.barCtx.yArrjVal.push(this.barCtx.series[x][m])),{pathTo:F,pathFrom:D}}},{key:"getBarpaths",value:function(e){var t=e.barYPosition,r=e.barHeight,a=e.x1,o=e.x2,h=e.strokeWidth,c=e.series,d=e.realIndex,p=e.i,x=e.j,m=e.w,y=new X(this.barCtx.ctx);(h=Array.isArray(h)?h[d]:h)||(h=0);var A={barHeight:r,strokeWidth:h,barYPosition:t,x2:o,x1:a},E=this.getRoundedBars(m,A,c,p,x),C=y.move(a,t),L=y.move(a,t);m.globals.previousPaths.length>0&&(L=this.barCtx.getPreviousPath(d,x,!1));var R=t,F=t+r,D=y.line(a,F-h);return C=C+y.line(E.x2,R)+E.pathWithRadius+y.line(E.x2,F-h)+D+D+"z",L=L+y.line(a,R)+D+D+D+D+D+y.line(a,R),m.config.chart.stacked&&(this.barCtx.xArrj.push(E.x2),this.barCtx.xArrjF.push(Math.abs(a-E.x2)),this.barCtx.xArrjVal.push(this.barCtx.series[p][x])),{pathTo:C,pathFrom:L}}},{key:"getRoundedBars",value:function(e,t,r,a,o){var h=new X(this.barCtx.ctx),c=0,d=e.config.plotOptions.bar.borderRadius,p=Array.isArray(d);if(p?c=d[a>d.length-1?d.length-1:a]:c=d,e.config.chart.stacked&&r.length>1&&a!==this.barCtx.radiusOnSeriesNumber&&!p&&(c=0),this.barCtx.isHorizontal){var x="",m=t.x2;if(Math.abs(t.x1-t.x2)<c&&(c=Math.abs(t.x1-t.x2)),r[a][o]!==void 0||r[a][o]!==null){var y=this.barCtx.isReversed?r[a][o]>0:r[a][o]<0;y&&(c*=-1),m-=c,x=h.quadraticCurve(m+c,t.barYPosition,m+c,t.barYPosition+(y?-1*c:c))+h.line(m+c,t.barYPosition+t.barHeight-t.strokeWidth-(y?-1*c:c))+h.quadraticCurve(m+c,t.barYPosition+t.barHeight-t.strokeWidth,m,t.barYPosition+t.barHeight-t.strokeWidth)}return{pathWithRadius:x,x2:m}}var A="",E=t.y2;if(Math.abs(t.y1-t.y2)<c&&(c=Math.abs(t.y1-t.y2)),r[a][o]!==void 0||r[a][o]!==null){var C=r[a][o]<0;C&&(c*=-1),E+=c,A=h.quadraticCurve(t.barXPosition,E-c,t.barXPosition+(C?-1*c:c),E-c)+h.line(t.barXPosition+t.barWidth-t.strokeWidth-(C?-1*c:c),E-c)+h.quadraticCurve(t.barXPosition+t.barWidth-t.strokeWidth,E-c,t.barXPosition+t.barWidth-t.strokeWidth,E)}return{pathWithRadius:A,y2:E}}},{key:"checkZeroSeries",value:function(e){for(var t=e.series,r=this.w,a=0;a<t.length;a++){for(var o=0,h=0;h<t[r.globals.maxValsInArrayIndex].length;h++)o+=t[a][h];o===0&&this.barCtx.zeroSerieses.push(a)}for(var c=t.length-1;c>=0;c--)this.barCtx.zeroSerieses.indexOf(c)>-1&&c===this.radiusOnSeriesNumber&&(this.barCtx.radiusOnSeriesNumber-=1);for(var d=t.length-1;d>=0;d--)r.globals.collapsedSeriesIndices.indexOf(this.barCtx.radiusOnSeriesNumber)>-1&&(this.barCtx.radiusOnSeriesNumber-=1)}},{key:"getXForValue",value:function(e,t){var r=!(arguments.length>2&&arguments[2]!==void 0)||arguments[2],a=r?t:null;return e!=null&&(a=t+e/this.barCtx.invertedYRatio-2*(this.barCtx.isReversed?e/this.barCtx.invertedYRatio:0)),a}},{key:"getYForValue",value:function(e,t){var r=!(arguments.length>2&&arguments[2]!==void 0)||arguments[2],a=r?t:null;return e!=null&&(a=t-e/this.barCtx.yRatio[this.barCtx.yaxisIndex]+2*(this.barCtx.isReversed?e/this.barCtx.yRatio[this.barCtx.yaxisIndex]:0)),a}},{key:"getGoalValues",value:function(e,t,r,a,o){var h=this,c=this.w,d=[];return c.globals.seriesGoals[a]&&c.globals.seriesGoals[a][o]&&Array.isArray(c.globals.seriesGoals[a][o])&&c.globals.seriesGoals[a][o].forEach(function(p){var x;d.push((k(x={},e,e==="x"?h.getXForValue(p.value,t,!1):h.getYForValue(p.value,r,!1)),k(x,"attrs",p),x))}),d}},{key:"drawGoalLine",value:function(e){var t=e.barXPosition,r=e.barYPosition,a=e.goalX,o=e.goalY,h=e.barWidth,c=e.barHeight,d=new X(this.barCtx.ctx),p=d.group({className:"apexcharts-bar-goals-groups"}),x=null;return this.barCtx.isHorizontal?Array.isArray(a)&&a.forEach(function(m){var y=m.attrs.strokeHeight!==void 0?m.attrs.strokeHeight:c/2,A=r+y+c/2;x=d.drawLine(m.x,A-2*y,m.x,A,m.attrs.strokeColor?m.attrs.strokeColor:void 0,m.attrs.strokeDashArray,m.attrs.strokeWidth?m.attrs.strokeWidth:2,m.attrs.strokeLineCap),p.add(x)}):Array.isArray(o)&&o.forEach(function(m){var y=m.attrs.strokeWidth!==void 0?m.attrs.strokeWidth:h/2,A=t+y+h/2;x=d.drawLine(A-2*y,m.y,A,m.y,m.attrs.strokeColor?m.attrs.strokeColor:void 0,m.attrs.strokeDashArray,m.attrs.strokeHeight?m.attrs.strokeHeight:2,m.attrs.strokeLineCap),p.add(x)}),p}}]),_}(),nt=function(){function _(e,t){f(this,_),this.ctx=e,this.w=e.w;var r=this.w;this.barOptions=r.config.plotOptions.bar,this.isHorizontal=this.barOptions.horizontal,this.strokeWidth=r.config.stroke.width,this.isNullValue=!1,this.isRangeBar=r.globals.seriesRangeBar.length&&this.isHorizontal,this.xyRatios=t,this.xyRatios!==null&&(this.xRatio=t.xRatio,this.initialXRatio=t.initialXRatio,this.yRatio=t.yRatio,this.invertedXRatio=t.invertedXRatio,this.invertedYRatio=t.invertedYRatio,this.baseLineY=t.baseLineY,this.baseLineInvertedY=t.baseLineInvertedY),this.yaxisIndex=0,this.seriesLen=0,this.barHelpers=new Yt(this)}return b(_,[{key:"draw",value:function(e,t){var r=this.w,a=new X(this.ctx),o=new Z(this.ctx,r);e=o.getLogSeries(e),this.series=e,this.yRatio=o.getLogYRatios(this.yRatio),this.barHelpers.initVariables(e);var h=a.group({class:"apexcharts-bar-series apexcharts-plot-series"});r.config.dataLabels.enabled&&this.totalItems>this.barOptions.dataLabels.maxItems&&console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.");for(var c=0,d=0;c<e.length;c++,d++){var p,x,m,y,A=void 0,E=void 0,C=[],L=[],R=r.globals.comboCharts?t[c]:c,F=a.group({class:"apexcharts-series",rel:c+1,seriesName:P.escapeString(r.globals.seriesNames[R]),"data:realIndex":R});this.ctx.series.addCollapsedClassToSeries(F,R),e[c].length>0&&(this.visibleI=this.visibleI+1);var D=0,g=0;this.yRatio.length>1&&(this.yaxisIndex=R),this.isReversed=r.config.yaxis[this.yaxisIndex]&&r.config.yaxis[this.yaxisIndex].reversed;var w=this.barHelpers.initialPositions();E=w.y,D=w.barHeight,x=w.yDivision,y=w.zeroW,A=w.x,g=w.barWidth,p=w.xDivision,m=w.zeroH,this.horizontal||L.push(A+g/2);for(var T=a.group({class:"apexcharts-datalabels","data:realIndex":R}),M=a.group({class:"apexcharts-bar-goals-markers",style:"pointer-events: none"}),V=0;V<r.globals.dataPoints;V++){var J=this.barHelpers.getStrokeWidth(c,V,R),G=null,oe={indexes:{i:c,j:V,realIndex:R,bc:d},x:A,y:E,strokeWidth:J,elSeries:F};this.isHorizontal?(G=this.drawBarPaths(l(l({},oe),{},{barHeight:D,zeroW:y,yDivision:x})),g=this.series[c][V]/this.invertedYRatio):(G=this.drawColumnPaths(l(l({},oe),{},{xDivision:p,barWidth:g,zeroH:m})),D=this.series[c][V]/this.yRatio[this.yaxisIndex]);var re=this.barHelpers.drawGoalLine({barXPosition:G.barXPosition,barYPosition:G.barYPosition,goalX:G.goalX,goalY:G.goalY,barHeight:D,barWidth:g});re&&M.add(re),E=G.y,A=G.x,V>0&&L.push(A+g/2),C.push(E);var ge=this.barHelpers.getPathFillColor(e,c,V,R);this.renderSeries({realIndex:R,pathFill:ge,j:V,i:c,pathFrom:G.pathFrom,pathTo:G.pathTo,strokeWidth:J,elSeries:F,x:A,y:E,series:e,barHeight:D,barWidth:g,elDataLabelsWrap:T,elGoalsMarkers:M,visibleSeries:this.visibleI,type:"bar"})}r.globals.seriesXvalues[R]=L,r.globals.seriesYvalues[R]=C,h.add(F)}return h}},{key:"renderSeries",value:function(e){var t=e.realIndex,r=e.pathFill,a=e.lineFill,o=e.j,h=e.i,c=e.pathFrom,d=e.pathTo,p=e.strokeWidth,x=e.elSeries,m=e.x,y=e.y,A=e.y1,E=e.y2,C=e.series,L=e.barHeight,R=e.barWidth,F=e.barYPosition,D=e.elDataLabelsWrap,g=e.elGoalsMarkers,w=e.visibleSeries,T=e.type,M=this.w,V=new X(this.ctx);a||(a=this.barOptions.distributed?M.globals.stroke.colors[o]:M.globals.stroke.colors[t]),M.config.series[h].data[o]&&M.config.series[h].data[o].strokeColor&&(a=M.config.series[h].data[o].strokeColor),this.isNullValue&&(r="none");var J=o/M.config.chart.animations.animateGradually.delay*(M.config.chart.animations.speed/M.globals.dataPoints)/2.4,G=V.renderPaths({i:h,j:o,realIndex:t,pathFrom:c,pathTo:d,stroke:a,strokeWidth:p,strokeLineCap:M.config.stroke.lineCap,fill:r,animationDelay:J,initialSpeed:M.config.chart.animations.speed,dataChangeSpeed:M.config.chart.animations.dynamicAnimation.speed,className:"apexcharts-".concat(T,"-area")});G.attr("clip-path","url(#gridRectMask".concat(M.globals.cuid,")"));var oe=M.config.forecastDataPoints;oe.count>0&&o>=M.globals.dataPoints-oe.count&&(G.node.setAttribute("stroke-dasharray",oe.dashArray),G.node.setAttribute("stroke-width",oe.strokeWidth),G.node.setAttribute("fill-opacity",oe.fillOpacity)),A!==void 0&&E!==void 0&&(G.attr("data-range-y1",A),G.attr("data-range-y2",E)),new H(this.ctx).setSelectionFilter(G,t,o),x.add(G);var re=new Ne(this).handleBarDataLabels({x:m,y,y1:A,y2:E,i:h,j:o,series:C,realIndex:t,barHeight:L,barWidth:R,barYPosition:F,renderedPath:G,visibleSeries:w});return re!==null&&D.add(re),x.add(D),g&&x.add(g),x}},{key:"drawBarPaths",value:function(e){var t=e.indexes,r=e.barHeight,a=e.strokeWidth,o=e.zeroW,h=e.x,c=e.y,d=e.yDivision,p=e.elSeries,x=this.w,m=t.i,y=t.j;x.globals.isXNumeric&&(c=(x.globals.seriesX[m][y]-x.globals.minX)/this.invertedXRatio-r);var A=c+r*this.visibleI;h=this.barHelpers.getXForValue(this.series[m][y],o);var E=this.barHelpers.getBarpaths({barYPosition:A,barHeight:r,x1:o,x2:h,strokeWidth:a,series:this.series,realIndex:t.realIndex,i:m,j:y,w:x});return x.globals.isXNumeric||(c+=d),this.barHelpers.barBackground({j:y,i:m,y1:A-r*this.visibleI,y2:r*this.seriesLen,elSeries:p}),{pathTo:E.pathTo,pathFrom:E.pathFrom,x:h,y:c,goalX:this.barHelpers.getGoalValues("x",o,null,m,y),barYPosition:A}}},{key:"drawColumnPaths",value:function(e){var t=e.indexes,r=e.x,a=e.y,o=e.xDivision,h=e.barWidth,c=e.zeroH,d=e.strokeWidth,p=e.elSeries,x=this.w,m=t.realIndex,y=t.i,A=t.j,E=t.bc;if(x.globals.isXNumeric){var C=m;x.globals.seriesX[m].length||(C=x.globals.maxValsInArrayIndex),r=(x.globals.seriesX[C][A]-x.globals.minX)/this.xRatio-h*this.seriesLen/2}var L=r+h*this.visibleI;a=this.barHelpers.getYForValue(this.series[y][A],c);var R=this.barHelpers.getColumnPaths({barXPosition:L,barWidth:h,y1:c,y2:a,strokeWidth:d,series:this.series,realIndex:t.realIndex,i:y,j:A,w:x});return x.globals.isXNumeric||(r+=o),this.barHelpers.barBackground({bc:E,j:A,i:y,x1:L-d/2-h*this.visibleI,x2:h*this.seriesLen+d/2,elSeries:p}),{pathTo:R.pathTo,pathFrom:R.pathFrom,x:r,y:a,goalY:this.barHelpers.getGoalValues("y",null,c,y,A),barXPosition:L}}},{key:"getPreviousPath",value:function(e,t){for(var r,a=this.w,o=0;o<a.globals.previousPaths.length;o++){var h=a.globals.previousPaths[o];h.paths&&h.paths.length>0&&parseInt(h.realIndex,10)===parseInt(e,10)&&a.globals.previousPaths[o].paths[t]!==void 0&&(r=a.globals.previousPaths[o].paths[t].d)}return r}}]),_}(),je=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.months31=[1,3,5,7,8,10,12],this.months30=[2,4,6,9,11],this.daysCntOfYear=[0,31,59,90,120,151,181,212,243,273,304,334]}return b(_,[{key:"isValidDate",value:function(e){return!isNaN(this.parseDate(e))}},{key:"getTimeStamp",value:function(e){return Date.parse(e)?this.w.config.xaxis.labels.datetimeUTC?new Date(new Date(e).toISOString().substr(0,25)).getTime():new Date(e).getTime():e}},{key:"getDate",value:function(e){return this.w.config.xaxis.labels.datetimeUTC?new Date(new Date(e).toUTCString()):new Date(e)}},{key:"parseDate",value:function(e){var t=Date.parse(e);if(!isNaN(t))return this.getTimeStamp(e);var r=Date.parse(e.replace(/-/g,"/").replace(/[a-z]+/gi," "));return r=this.getTimeStamp(r)}},{key:"parseDateWithTimezone",value:function(e){return Date.parse(e.replace(/-/g,"/").replace(/[a-z]+/gi," "))}},{key:"formatDate",value:function(e,t){var r=this.w.globals.locale,a=this.w.config.xaxis.labels.datetimeUTC,o=["\0"].concat(K(r.months)),h=[""].concat(K(r.shortMonths)),c=[""].concat(K(r.days)),d=[""].concat(K(r.shortDays));function p(V,J){var G=V+"";for(J=J||2;G.length<J;)G="0"+G;return G}var x=a?e.getUTCFullYear():e.getFullYear();t=(t=(t=t.replace(/(^|[^\\])yyyy+/g,"$1"+x)).replace(/(^|[^\\])yy/g,"$1"+x.toString().substr(2,2))).replace(/(^|[^\\])y/g,"$1"+x);var m=(a?e.getUTCMonth():e.getMonth())+1;t=(t=(t=(t=t.replace(/(^|[^\\])MMMM+/g,"$1"+o[0])).replace(/(^|[^\\])MMM/g,"$1"+h[0])).replace(/(^|[^\\])MM/g,"$1"+p(m))).replace(/(^|[^\\])M/g,"$1"+m);var y=a?e.getUTCDate():e.getDate();t=(t=(t=(t=t.replace(/(^|[^\\])dddd+/g,"$1"+c[0])).replace(/(^|[^\\])ddd/g,"$1"+d[0])).replace(/(^|[^\\])dd/g,"$1"+p(y))).replace(/(^|[^\\])d/g,"$1"+y);var A=a?e.getUTCHours():e.getHours(),E=A>12?A-12:A===0?12:A;t=(t=(t=(t=t.replace(/(^|[^\\])HH+/g,"$1"+p(A))).replace(/(^|[^\\])H/g,"$1"+A)).replace(/(^|[^\\])hh+/g,"$1"+p(E))).replace(/(^|[^\\])h/g,"$1"+E);var C=a?e.getUTCMinutes():e.getMinutes();t=(t=t.replace(/(^|[^\\])mm+/g,"$1"+p(C))).replace(/(^|[^\\])m/g,"$1"+C);var L=a?e.getUTCSeconds():e.getSeconds();t=(t=t.replace(/(^|[^\\])ss+/g,"$1"+p(L))).replace(/(^|[^\\])s/g,"$1"+L);var R=a?e.getUTCMilliseconds():e.getMilliseconds();t=t.replace(/(^|[^\\])fff+/g,"$1"+p(R,3)),R=Math.round(R/10),t=t.replace(/(^|[^\\])ff/g,"$1"+p(R)),R=Math.round(R/10);var F=A<12?"AM":"PM";t=(t=(t=t.replace(/(^|[^\\])f/g,"$1"+R)).replace(/(^|[^\\])TT+/g,"$1"+F)).replace(/(^|[^\\])T/g,"$1"+F.charAt(0));var D=F.toLowerCase();t=(t=t.replace(/(^|[^\\])tt+/g,"$1"+D)).replace(/(^|[^\\])t/g,"$1"+D.charAt(0));var g=-e.getTimezoneOffset(),w=a||!g?"Z":g>0?"+":"-";if(!a){var T=(g=Math.abs(g))%60;w+=p(Math.floor(g/60))+":"+p(T)}t=t.replace(/(^|[^\\])K/g,"$1"+w);var M=(a?e.getUTCDay():e.getDay())+1;return t=(t=(t=(t=(t=t.replace(new RegExp(c[0],"g"),c[M])).replace(new RegExp(d[0],"g"),d[M])).replace(new RegExp(o[0],"g"),o[m])).replace(new RegExp(h[0],"g"),h[m])).replace(/\\(.)/g,"$1")}},{key:"getTimeUnitsfromTimestamp",value:function(e,t,r){var a=this.w;a.config.xaxis.min!==void 0&&(e=a.config.xaxis.min),a.config.xaxis.max!==void 0&&(t=a.config.xaxis.max);var o=this.getDate(e),h=this.getDate(t),c=this.formatDate(o,"yyyy MM dd HH mm ss fff").split(" "),d=this.formatDate(h,"yyyy MM dd HH mm ss fff").split(" ");return{minMillisecond:parseInt(c[6],10),maxMillisecond:parseInt(d[6],10),minSecond:parseInt(c[5],10),maxSecond:parseInt(d[5],10),minMinute:parseInt(c[4],10),maxMinute:parseInt(d[4],10),minHour:parseInt(c[3],10),maxHour:parseInt(d[3],10),minDate:parseInt(c[2],10),maxDate:parseInt(d[2],10),minMonth:parseInt(c[1],10)-1,maxMonth:parseInt(d[1],10)-1,minYear:parseInt(c[0],10),maxYear:parseInt(d[0],10)}}},{key:"isLeapYear",value:function(e){return e%4==0&&e%100!=0||e%400==0}},{key:"calculcateLastDaysOfMonth",value:function(e,t,r){return this.determineDaysOfMonths(e,t)-r}},{key:"determineDaysOfYear",value:function(e){var t=365;return this.isLeapYear(e)&&(t=366),t}},{key:"determineRemainingDaysOfYear",value:function(e,t,r){var a=this.daysCntOfYear[t]+r;return t>1&&this.isLeapYear()&&a++,a}},{key:"determineDaysOfMonths",value:function(e,t){var r=30;switch(e=P.monthMod(e),!0){case this.months30.indexOf(e)>-1:e===2&&(r=this.isLeapYear(t)?29:28);break;case this.months31.indexOf(e)>-1:default:r=31}return r}}]),_}(),st=function(_){S(t,nt);var e=z(t);function t(){return f(this,t),e.apply(this,arguments)}return b(t,[{key:"draw",value:function(r,a){var o=this.w,h=new X(this.ctx);this.rangeBarOptions=this.w.config.plotOptions.rangeBar,this.series=r,this.seriesRangeStart=o.globals.seriesRangeStart,this.seriesRangeEnd=o.globals.seriesRangeEnd,this.barHelpers.initVariables(r);for(var c=h.group({class:"apexcharts-rangebar-series apexcharts-plot-series"}),d=0;d<r.length;d++){var p,x,m,y=void 0,A=void 0,E=void 0,C=o.globals.comboCharts?a[d]:d,L=h.group({class:"apexcharts-series",seriesName:P.escapeString(o.globals.seriesNames[C]),rel:d+1,"data:realIndex":C});this.ctx.series.addCollapsedClassToSeries(L,C),r[d].length>0&&(this.visibleI=this.visibleI+1);var R=0,F=0;this.yRatio.length>1&&(this.yaxisIndex=C);var D=this.barHelpers.initialPositions();A=D.y,m=D.zeroW,y=D.x,F=D.barWidth,p=D.xDivision,x=D.zeroH;for(var g=h.group({class:"apexcharts-datalabels","data:realIndex":C}),w=h.group({class:"apexcharts-rangebar-goals-markers",style:"pointer-events: none"}),T=0;T<o.globals.dataPoints;T++){var M=this.barHelpers.getStrokeWidth(d,T,C),V=this.seriesRangeStart[d][T],J=this.seriesRangeEnd[d][T],G=null,oe=null,re={x:y,y:A,strokeWidth:M,elSeries:L};if(E=D.yDivision,R=D.barHeight,this.isHorizontal){oe=A+R*this.visibleI;var ge=this.seriesLen;o.config.plotOptions.bar.rangeBarGroupRows&&(ge=1);var Pe=(E-R*ge)/2;if(o.config.series[d].data[T]===void 0)break;if(o.config.series[d].data[T].x){var et=this.detectOverlappingBars({i:d,j:T,barYPosition:oe,srty:Pe,barHeight:R,yDivision:E,initPositions:D});R=et.barHeight,oe=et.barYPosition}F=(G=this.drawRangeBarPaths(l({indexes:{i:d,j:T,realIndex:C},barHeight:R,barYPosition:oe,zeroW:m,yDivision:E,y1:V,y2:J},re))).barWidth}else R=(G=this.drawRangeColumnPaths(l({indexes:{i:d,j:T,realIndex:C},zeroH:x,barWidth:F,xDivision:p},re))).barHeight;var We=this.barHelpers.drawGoalLine({barXPosition:G.barXPosition,barYPosition:oe,goalX:G.goalX,goalY:G.goalY,barHeight:R,barWidth:F});We&&w.add(We),A=G.y,y=G.x;var gt=this.barHelpers.getPathFillColor(r,d,T,C),Ct=o.globals.stroke.colors[C];this.renderSeries({realIndex:C,pathFill:gt,lineFill:Ct,j:T,i:d,x:y,y:A,y1:V,y2:J,pathFrom:G.pathFrom,pathTo:G.pathTo,strokeWidth:M,elSeries:L,series:r,barHeight:R,barYPosition:oe,barWidth:F,elDataLabelsWrap:g,elGoalsMarkers:w,visibleSeries:this.visibleI,type:"rangebar"})}c.add(L)}return c}},{key:"detectOverlappingBars",value:function(r){var a=r.i,o=r.j,h=r.barYPosition,c=r.srty,d=r.barHeight,p=r.yDivision,x=r.initPositions,m=this.w,y=[],A=m.config.series[a].data[o].rangeName,E=m.config.series[a].data[o].x,C=m.globals.labels.indexOf(E),L=m.globals.seriesRangeBar[a].findIndex(function(R){return R.x===E&&R.overlaps.length>0});return h=m.config.plotOptions.bar.rangeBarGroupRows?c+p*C:c+d*this.visibleI+p*C,L>-1&&!m.config.plotOptions.bar.rangeBarOverlap&&(y=m.globals.seriesRangeBar[a][L].overlaps).indexOf(A)>-1&&(h=(d=x.barHeight/y.length)*this.visibleI+p*(100-parseInt(this.barOptions.barHeight,10))/100/2+d*(this.visibleI+y.indexOf(A))+p*C),{barYPosition:h,barHeight:d}}},{key:"drawRangeColumnPaths",value:function(r){var a=r.indexes,o=r.x;r.strokeWidth;var h=r.xDivision,c=r.barWidth,d=r.zeroH,p=this.w,x=a.i,m=a.j,y=this.yRatio[this.yaxisIndex],A=a.realIndex,E=this.getRangeValue(A,m),C=Math.min(E.start,E.end),L=Math.max(E.start,E.end);p.globals.isXNumeric&&(o=(p.globals.seriesX[x][m]-p.globals.minX)/this.xRatio-c/2);var R=o+c*this.visibleI;this.series[x][m]===void 0||this.series[x][m]===null?C=d:(C=d-C/y,L=d-L/y);var F=Math.abs(L-C),D=this.barHelpers.getColumnPaths({barXPosition:R,barWidth:c,y1:C,y2:L,strokeWidth:this.strokeWidth,series:this.seriesRangeEnd,realIndex:a.realIndex,i:A,j:m,w:p});return p.globals.isXNumeric||(o+=h),{pathTo:D.pathTo,pathFrom:D.pathFrom,barHeight:F,x:o,y:L,goalY:this.barHelpers.getGoalValues("y",null,d,x,m),barXPosition:R}}},{key:"drawRangeBarPaths",value:function(r){var a=r.indexes,o=r.y,h=r.y1,c=r.y2,d=r.yDivision,p=r.barHeight,x=r.barYPosition,m=r.zeroW,y=this.w,A=m+h/this.invertedYRatio,E=m+c/this.invertedYRatio,C=Math.abs(E-A),L=this.barHelpers.getBarpaths({barYPosition:x,barHeight:p,x1:A,x2:E,strokeWidth:this.strokeWidth,series:this.seriesRangeEnd,i:a.realIndex,realIndex:a.realIndex,j:a.j,w:y});return y.globals.isXNumeric||(o+=d),{pathTo:L.pathTo,pathFrom:L.pathFrom,barWidth:C,x:E,goalX:this.barHelpers.getGoalValues("x",m,null,a.realIndex,a.j),y:o}}},{key:"getRangeValue",value:function(r,a){var o=this.w;return{start:o.globals.seriesRangeStart[r][a],end:o.globals.seriesRangeEnd[r][a]}}},{key:"getTooltipValues",value:function(r){var a=r.ctx,o=r.seriesIndex,h=r.dataPointIndex,c=r.y1,d=r.y2,p=r.w,x=p.globals.seriesRangeStart[o][h],m=p.globals.seriesRangeEnd[o][h],y=p.globals.labels[h],A=p.config.series[o].name?p.config.series[o].name:"",E=p.config.tooltip.y.formatter,C=p.config.tooltip.y.title.formatter,L={w:p,seriesIndex:o,dataPointIndex:h,start:x,end:m};typeof C=="function"&&(A=C(A,L)),Number.isFinite(c)&&Number.isFinite(d)&&(x=c,m=d,p.config.series[o].data[h].x&&(y=p.config.series[o].data[h].x+":"),typeof E=="function"&&(y=E(y,L)));var R="",F="",D=p.globals.colors[o];if(p.config.tooltip.x.formatter===void 0)if(p.config.xaxis.type==="datetime"){var g=new je(a);R=g.formatDate(g.getDate(x),p.config.tooltip.x.format),F=g.formatDate(g.getDate(m),p.config.tooltip.x.format)}else R=x,F=m;else R=p.config.tooltip.x.formatter(x),F=p.config.tooltip.x.formatter(m);return{start:x,end:m,startVal:R,endVal:F,ylabel:y,color:D,seriesName:A}}},{key:"buildCustomTooltipHTML",value:function(r){var a=r.color,o=r.seriesName;return'<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: '+a+'">'+(o||"")+'</span></div><div> <span class="category">'+r.ylabel+' </span> <span class="value start-value">'+r.start+'</span> <span class="separator">-</span> <span class="value end-value">'+r.end+"</span></div></div>"}}]),t}(),bt=function(){function _(e){f(this,_),this.opts=e}return b(_,[{key:"line",value:function(){return{chart:{animations:{easing:"swing"}},dataLabels:{enabled:!1},stroke:{width:5,curve:"straight"},markers:{size:0,hover:{sizeOffset:6}},xaxis:{crosshairs:{width:1}}}}},{key:"sparkline",value:function(e){return this.opts.yaxis[0].show=!1,this.opts.yaxis[0].title.text="",this.opts.yaxis[0].axisBorder.show=!1,this.opts.yaxis[0].axisTicks.show=!1,this.opts.yaxis[0].floating=!0,P.extend(e,{grid:{show:!1,padding:{left:0,right:0,top:0,bottom:0}},legend:{show:!1},xaxis:{labels:{show:!1},tooltip:{enabled:!1},axisBorder:{show:!1},axisTicks:{show:!1}},chart:{toolbar:{show:!1},zoom:{enabled:!1}},dataLabels:{enabled:!1}})}},{key:"bar",value:function(){return{chart:{stacked:!1,animations:{easing:"swing"}},plotOptions:{bar:{dataLabels:{position:"center"}}},dataLabels:{style:{colors:["#fff"]},background:{enabled:!1}},stroke:{width:0,lineCap:"round"},fill:{opacity:.85},legend:{markers:{shape:"square",radius:2,size:8}},tooltip:{shared:!1,intersect:!0},xaxis:{tooltip:{enabled:!1},tickPlacement:"between",crosshairs:{width:"barWidth",position:"back",fill:{type:"gradient"},dropShadow:{enabled:!1},stroke:{width:0}}}}}},{key:"candlestick",value:function(){var e=this;return{stroke:{width:1,colors:["#333"]},fill:{opacity:1},dataLabels:{enabled:!1},tooltip:{shared:!0,custom:function(t){var r=t.seriesIndex,a=t.dataPointIndex,o=t.w;return e._getBoxTooltip(o,r,a,["Open","High","","Low","Close"],"candlestick")}},states:{active:{filter:{type:"none"}}},xaxis:{crosshairs:{width:1}}}}},{key:"boxPlot",value:function(){var e=this;return{chart:{animations:{dynamicAnimation:{enabled:!1}}},stroke:{width:1,colors:["#24292e"]},dataLabels:{enabled:!1},tooltip:{shared:!0,custom:function(t){var r=t.seriesIndex,a=t.dataPointIndex,o=t.w;return e._getBoxTooltip(o,r,a,["Minimum","Q1","Median","Q3","Maximum"],"boxPlot")}},markers:{size:5,strokeWidth:1,strokeColors:"#111"},xaxis:{crosshairs:{width:1}}}}},{key:"rangeBar",value:function(){return{stroke:{width:0,lineCap:"square"},plotOptions:{bar:{borderRadius:0,dataLabels:{position:"center"}}},dataLabels:{enabled:!1,formatter:function(e,t){t.ctx;var r=t.seriesIndex,a=t.dataPointIndex,o=t.w,h=o.globals.seriesRangeStart[r][a];return o.globals.seriesRangeEnd[r][a]-h},background:{enabled:!1},style:{colors:["#fff"]}},tooltip:{shared:!1,followCursor:!0,custom:function(e){return e.w.config.plotOptions&&e.w.config.plotOptions.bar&&e.w.config.plotOptions.bar.horizontal?function(t){var r=new st(t.ctx,null),a=r.getTooltipValues(t),o=a.color,h=a.seriesName,c=a.ylabel,d=a.startVal,p=a.endVal;return r.buildCustomTooltipHTML({color:o,seriesName:h,ylabel:c,start:d,end:p})}(e):function(t){var r=new st(t.ctx,null),a=r.getTooltipValues(t),o=a.color,h=a.seriesName,c=a.ylabel,d=a.start,p=a.end;return r.buildCustomTooltipHTML({color:o,seriesName:h,ylabel:c,start:d,end:p})}(e)}},xaxis:{tickPlacement:"between",tooltip:{enabled:!1},crosshairs:{stroke:{width:0}}}}}},{key:"area",value:function(){return{stroke:{width:4},fill:{type:"gradient",gradient:{inverseColors:!1,shade:"light",type:"vertical",opacityFrom:.65,opacityTo:.5,stops:[0,100,100]}},markers:{size:0,hover:{sizeOffset:6}},tooltip:{followCursor:!1}}}},{key:"brush",value:function(e){return P.extend(e,{chart:{toolbar:{autoSelected:"selection",show:!1},zoom:{enabled:!1}},dataLabels:{enabled:!1},stroke:{width:1},tooltip:{enabled:!1},xaxis:{tooltip:{enabled:!1}}})}},{key:"stacked100",value:function(e){e.dataLabels=e.dataLabels||{},e.dataLabels.formatter=e.dataLabels.formatter||void 0;var t=e.dataLabels.formatter;return e.yaxis.forEach(function(r,a){e.yaxis[a].min=0,e.yaxis[a].max=100}),e.chart.type==="bar"&&(e.dataLabels.formatter=t||function(r){return typeof r=="number"&&r?r.toFixed(0)+"%":r}),e}},{key:"convertCatToNumeric",value:function(e){return e.xaxis.convertedCatToNumeric=!0,e}},{key:"convertCatToNumericXaxis",value:function(e,t,r){e.xaxis.type="numeric",e.xaxis.labels=e.xaxis.labels||{},e.xaxis.labels.formatter=e.xaxis.labels.formatter||function(h){return P.isNumber(h)?Math.floor(h):h};var a=e.xaxis.labels.formatter,o=e.xaxis.categories&&e.xaxis.categories.length?e.xaxis.categories:e.labels;return r&&r.length&&(o=r.map(function(h){return Array.isArray(h)?h:String(h)})),o&&o.length&&(e.xaxis.labels.formatter=function(h){return P.isNumber(h)?a(o[Math.floor(h)-1]):a(h)}),e.xaxis.categories=[],e.labels=[],e.xaxis.tickAmount=e.xaxis.tickAmount||"dataPoints",e}},{key:"bubble",value:function(){return{dataLabels:{style:{colors:["#fff"]}},tooltip:{shared:!1,intersect:!0},xaxis:{crosshairs:{width:0}},fill:{type:"solid",gradient:{shade:"light",inverse:!0,shadeIntensity:.55,opacityFrom:.4,opacityTo:.8}}}}},{key:"scatter",value:function(){return{dataLabels:{enabled:!1},tooltip:{shared:!1,intersect:!0},markers:{size:6,strokeWidth:1,hover:{sizeOffset:2}}}}},{key:"heatmap",value:function(){return{chart:{stacked:!1},fill:{opacity:1},dataLabels:{style:{colors:["#fff"]}},stroke:{colors:["#fff"]},tooltip:{followCursor:!0,marker:{show:!1},x:{show:!1}},legend:{position:"top",markers:{shape:"square",size:10,offsetY:2}},grid:{padding:{right:20}}}}},{key:"treemap",value:function(){return{chart:{zoom:{enabled:!1}},dataLabels:{style:{fontSize:14,fontWeight:600,colors:["#fff"]}},stroke:{show:!0,width:2,colors:["#fff"]},legend:{show:!1},fill:{gradient:{stops:[0,100]}},tooltip:{followCursor:!0,x:{show:!1}},grid:{padding:{left:0,right:0}},xaxis:{crosshairs:{show:!1},tooltip:{enabled:!1}}}}},{key:"pie",value:function(){return{chart:{toolbar:{show:!1}},plotOptions:{pie:{donut:{labels:{show:!1}}}},dataLabels:{formatter:function(e){return e.toFixed(1)+"%"},style:{colors:["#fff"]},background:{enabled:!1},dropShadow:{enabled:!0}},stroke:{colors:["#fff"]},fill:{opacity:1,gradient:{shade:"light",stops:[0,100]}},tooltip:{theme:"dark",fillSeriesColor:!0},legend:{position:"right"}}}},{key:"donut",value:function(){return{chart:{toolbar:{show:!1}},dataLabels:{formatter:function(e){return e.toFixed(1)+"%"},style:{colors:["#fff"]},background:{enabled:!1},dropShadow:{enabled:!0}},stroke:{colors:["#fff"]},fill:{opacity:1,gradient:{shade:"light",shadeIntensity:.35,stops:[80,100],opacityFrom:1,opacityTo:1}},tooltip:{theme:"dark",fillSeriesColor:!0},legend:{position:"right"}}}},{key:"polarArea",value:function(){return this.opts.yaxis[0].tickAmount=this.opts.yaxis[0].tickAmount?this.opts.yaxis[0].tickAmount:6,{chart:{toolbar:{show:!1}},dataLabels:{formatter:function(e){return e.toFixed(1)+"%"},enabled:!1},stroke:{show:!0,width:2},fill:{opacity:.7},tooltip:{theme:"dark",fillSeriesColor:!0},legend:{position:"right"}}}},{key:"radar",value:function(){return this.opts.yaxis[0].labels.offsetY=this.opts.yaxis[0].labels.offsetY?this.opts.yaxis[0].labels.offsetY:6,{dataLabels:{enabled:!1,style:{fontSize:"11px"}},stroke:{width:2},markers:{size:3,strokeWidth:1,strokeOpacity:1},fill:{opacity:.2},tooltip:{shared:!1,intersect:!0,followCursor:!0},grid:{show:!1},xaxis:{labels:{formatter:function(e){return e},style:{colors:["#a8a8a8"],fontSize:"11px"}},tooltip:{enabled:!1},crosshairs:{show:!1}}}}},{key:"radialBar",value:function(){return{chart:{animations:{dynamicAnimation:{enabled:!0,speed:800}},toolbar:{show:!1}},fill:{gradient:{shade:"dark",shadeIntensity:.4,inverseColors:!1,type:"diagonal2",opacityFrom:1,opacityTo:1,stops:[70,98,100]}},legend:{show:!1,position:"right"},tooltip:{enabled:!1,fillSeriesColor:!0}}}},{key:"_getBoxTooltip",value:function(e,t,r,a,o){var h=e.globals.seriesCandleO[t][r],c=e.globals.seriesCandleH[t][r],d=e.globals.seriesCandleM[t][r],p=e.globals.seriesCandleL[t][r],x=e.globals.seriesCandleC[t][r];return e.config.series[t].type&&e.config.series[t].type!==o?`<div class="apexcharts-custom-tooltip">
          `.concat(e.config.series[t].name?e.config.series[t].name:"series-"+(t+1),": <strong>").concat(e.globals.series[t][r],`</strong>
        </div>`):'<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(e.config.chart.type,'">')+"<div>".concat(a[0],': <span class="value">')+h+"</span></div>"+"<div>".concat(a[1],': <span class="value">')+c+"</span></div>"+(d?"<div>".concat(a[2],': <span class="value">')+d+"</span></div>":"")+"<div>".concat(a[3],': <span class="value">')+p+"</span></div>"+"<div>".concat(a[4],': <span class="value">')+x+"</span></div></div>"}}]),_}(),Q=function(){function _(e){f(this,_),this.opts=e}return b(_,[{key:"init",value:function(e){var t=e.responsiveOverride,r=this.opts,a=new ne,o=new bt(r);this.chartType=r.chart.type,this.chartType==="histogram"&&(r.chart.type="bar",r=P.extend({plotOptions:{bar:{columnWidth:"99.99%"}}},r)),r=this.extendYAxis(r),r=this.extendAnnotations(r);var h=a.init(),c={};if(r&&u(r)==="object"){var d={};d=["line","area","bar","candlestick","boxPlot","rangeBar","histogram","bubble","scatter","heatmap","treemap","pie","polarArea","donut","radar","radialBar"].indexOf(r.chart.type)!==-1?o[r.chart.type]():o.line(),r.chart.brush&&r.chart.brush.enabled&&(d=o.brush(d)),r.chart.stacked&&r.chart.stackType==="100%"&&(r=o.stacked100(r)),this.checkForDarkTheme(window.Apex),this.checkForDarkTheme(r),r.xaxis=r.xaxis||window.Apex.xaxis||{},t||(r.xaxis.convertedCatToNumeric=!1),((r=this.checkForCatToNumericXAxis(this.chartType,d,r)).chart.sparkline&&r.chart.sparkline.enabled||window.Apex.chart&&window.Apex.chart.sparkline&&window.Apex.chart.sparkline.enabled)&&(d=o.sparkline(d)),c=P.extend(h,d)}var p=P.extend(c,window.Apex);return h=P.extend(p,r),h=this.handleUserInputErrors(h)}},{key:"checkForCatToNumericXAxis",value:function(e,t,r){var a=new bt(r),o=(e==="bar"||e==="boxPlot")&&r.plotOptions&&r.plotOptions.bar&&r.plotOptions.bar.horizontal,h=e==="pie"||e==="polarArea"||e==="donut"||e==="radar"||e==="radialBar"||e==="heatmap",c=r.xaxis.type!=="datetime"&&r.xaxis.type!=="numeric",d=r.xaxis.tickPlacement?r.xaxis.tickPlacement:t.xaxis&&t.xaxis.tickPlacement;return o||h||!c||d==="between"||(r=a.convertCatToNumeric(r)),r}},{key:"extendYAxis",value:function(e,t){var r=new ne;(e.yaxis===void 0||!e.yaxis||Array.isArray(e.yaxis)&&e.yaxis.length===0)&&(e.yaxis={}),e.yaxis.constructor!==Array&&window.Apex.yaxis&&window.Apex.yaxis.constructor!==Array&&(e.yaxis=P.extend(e.yaxis,window.Apex.yaxis)),e.yaxis.constructor!==Array?e.yaxis=[P.extend(r.yAxis,e.yaxis)]:e.yaxis=P.extendArray(e.yaxis,r.yAxis);var a=!1;e.yaxis.forEach(function(h){h.logarithmic&&(a=!0)});var o=e.series;return t&&!o&&(o=t.config.series),a&&o.length!==e.yaxis.length&&o.length&&(e.yaxis=o.map(function(h,c){if(h.name||(o[c].name="series-".concat(c+1)),e.yaxis[c])return e.yaxis[c].seriesName=o[c].name,e.yaxis[c];var d=P.extend(r.yAxis,e.yaxis[0]);return d.show=!1,d})),a&&o.length>1&&o.length!==e.yaxis.length&&console.warn("A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."),e}},{key:"extendAnnotations",value:function(e){return e.annotations===void 0&&(e.annotations={},e.annotations.yaxis=[],e.annotations.xaxis=[],e.annotations.points=[]),e=this.extendYAxisAnnotations(e),e=this.extendXAxisAnnotations(e),e=this.extendPointAnnotations(e)}},{key:"extendYAxisAnnotations",value:function(e){var t=new ne;return e.annotations.yaxis=P.extendArray(e.annotations.yaxis!==void 0?e.annotations.yaxis:[],t.yAxisAnnotation),e}},{key:"extendXAxisAnnotations",value:function(e){var t=new ne;return e.annotations.xaxis=P.extendArray(e.annotations.xaxis!==void 0?e.annotations.xaxis:[],t.xAxisAnnotation),e}},{key:"extendPointAnnotations",value:function(e){var t=new ne;return e.annotations.points=P.extendArray(e.annotations.points!==void 0?e.annotations.points:[],t.pointAnnotation),e}},{key:"checkForDarkTheme",value:function(e){e.theme&&e.theme.mode==="dark"&&(e.tooltip||(e.tooltip={}),e.tooltip.theme!=="light"&&(e.tooltip.theme="dark"),e.chart.foreColor||(e.chart.foreColor="#f6f7f8"),e.chart.background||(e.chart.background="#424242"),e.theme.palette||(e.theme.palette="palette4"))}},{key:"handleUserInputErrors",value:function(e){var t=e;if(t.tooltip.shared&&t.tooltip.intersect)throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");if(t.chart.type==="bar"&&t.plotOptions.bar.horizontal){if(t.yaxis.length>1)throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");t.yaxis[0].reversed&&(t.yaxis[0].opposite=!0),t.xaxis.tooltip.enabled=!1,t.yaxis[0].tooltip.enabled=!1,t.chart.zoom.enabled=!1}return t.chart.type!=="bar"&&t.chart.type!=="rangeBar"||t.tooltip.shared&&t.xaxis.crosshairs.width==="barWidth"&&t.series.length>1&&(t.xaxis.crosshairs.width="tickWidth"),t.chart.type!=="candlestick"&&t.chart.type!=="boxPlot"||t.yaxis[0].reversed&&(console.warn("Reversed y-axis in ".concat(t.chart.type," chart is not supported.")),t.yaxis[0].reversed=!1),t}}]),_}(),ue=function(){function _(){f(this,_)}return b(_,[{key:"initGlobalVars",value:function(e){e.series=[],e.seriesCandleO=[],e.seriesCandleH=[],e.seriesCandleM=[],e.seriesCandleL=[],e.seriesCandleC=[],e.seriesRangeStart=[],e.seriesRangeEnd=[],e.seriesRangeBar=[],e.seriesPercent=[],e.seriesGoals=[],e.seriesX=[],e.seriesZ=[],e.seriesNames=[],e.seriesTotals=[],e.seriesLog=[],e.seriesColors=[],e.stackedSeriesTotals=[],e.seriesXvalues=[],e.seriesYvalues=[],e.labels=[],e.hasGroups=!1,e.groups=[],e.categoryLabels=[],e.timescaleLabels=[],e.noLabelsProvided=!1,e.resizeTimer=null,e.selectionResizeTimer=null,e.delayedElements=[],e.pointsArray=[],e.dataLabelsRects=[],e.isXNumeric=!1,e.xaxisLabelsCount=0,e.skipLastTimelinelabel=!1,e.skipFirstTimelinelabel=!1,e.isDataXYZ=!1,e.isMultiLineX=!1,e.isMultipleYAxis=!1,e.maxY=-Number.MAX_VALUE,e.minY=Number.MIN_VALUE,e.minYArr=[],e.maxYArr=[],e.maxX=-Number.MAX_VALUE,e.minX=Number.MAX_VALUE,e.initialMaxX=-Number.MAX_VALUE,e.initialMinX=Number.MAX_VALUE,e.maxDate=0,e.minDate=Number.MAX_VALUE,e.minZ=Number.MAX_VALUE,e.maxZ=-Number.MAX_VALUE,e.minXDiff=Number.MAX_VALUE,e.yAxisScale=[],e.xAxisScale=null,e.xAxisTicksPositions=[],e.yLabelsCoords=[],e.yTitleCoords=[],e.barPadForNumericAxis=0,e.padHorizontal=0,e.xRange=0,e.yRange=[],e.zRange=0,e.dataPoints=0,e.xTickAmount=0}},{key:"globalVars",value:function(e){return{chartID:null,cuid:null,events:{beforeMount:[],mounted:[],updated:[],clicked:[],selection:[],dataPointSelection:[],zoomed:[],scrolled:[]},colors:[],clientX:null,clientY:null,fill:{colors:[]},stroke:{colors:[]},dataLabels:{style:{colors:[]}},radarPolygons:{fill:{colors:[]}},markers:{colors:[],size:e.markers.size,largestSize:0},animationEnded:!1,isTouchDevice:"ontouchstart"in window||navigator.msMaxTouchPoints,isDirty:!1,isExecCalled:!1,initialConfig:null,initialSeries:[],lastXAxis:[],lastYAxis:[],columnSeries:null,labels:[],timescaleLabels:[],noLabelsProvided:!1,allSeriesCollapsed:!1,collapsedSeries:[],collapsedSeriesIndices:[],ancillaryCollapsedSeries:[],ancillaryCollapsedSeriesIndices:[],risingSeries:[],dataFormatXNumeric:!1,capturedSeriesIndex:-1,capturedDataPointIndex:-1,selectedDataPoints:[],goldenPadding:35,invalidLogScale:!1,ignoreYAxisIndexes:[],yAxisSameScaleIndices:[],maxValsInArrayIndex:0,radialSize:0,selection:void 0,zoomEnabled:e.chart.toolbar.autoSelected==="zoom"&&e.chart.toolbar.tools.zoom&&e.chart.zoom.enabled,panEnabled:e.chart.toolbar.autoSelected==="pan"&&e.chart.toolbar.tools.pan,selectionEnabled:e.chart.toolbar.autoSelected==="selection"&&e.chart.toolbar.tools.selection,yaxis:null,mousedown:!1,lastClientPosition:{},visibleXRange:void 0,yValueDecimal:0,total:0,SVGNS:"http://www.w3.org/2000/svg",svgWidth:0,svgHeight:0,noData:!1,locale:{},dom:{},memory:{methodsToExec:[]},shouldAnimate:!0,skipLastTimelinelabel:!1,skipFirstTimelinelabel:!1,delayedElements:[],axisCharts:!0,isDataXYZ:!1,resized:!1,resizeTimer:null,comboCharts:!1,dataChanged:!1,previousPaths:[],allSeriesHasEqualX:!0,pointsArray:[],dataLabelsRects:[],lastDrawnDataLabelsIndexes:[],hasNullValues:!1,easing:null,zoomed:!1,gridWidth:0,gridHeight:0,rotateXLabels:!1,defaultLabels:!1,xLabelFormatter:void 0,yLabelFormatters:[],xaxisTooltipFormatter:void 0,ttKeyFormatter:void 0,ttVal:void 0,ttZFormatter:void 0,LINE_HEIGHT_RATIO:1.618,xAxisLabelsHeight:0,xAxisGroupLabelsHeight:0,xAxisLabelsWidth:0,yAxisLabelsWidth:0,scaleX:1,scaleY:1,translateX:0,translateY:0,translateYAxisX:[],yAxisWidths:[],translateXAxisY:0,translateXAxisX:0,tooltip:null}}},{key:"init",value:function(e){var t=this.globalVars(e);return this.initGlobalVars(t),t.initialConfig=P.extend({},e),t.initialSeries=P.clone(e.series),t.lastXAxis=P.clone(t.initialConfig.xaxis),t.lastYAxis=P.clone(t.initialConfig.yaxis),t}}]),_}(),de=function(){function _(e){f(this,_),this.opts=e}return b(_,[{key:"init",value:function(){var e=new Q(this.opts).init({responsiveOverride:!1});return{config:e,globals:new ue().init(e)}}}]),_}(),be=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.twoDSeries=[],this.threeDSeries=[],this.twoDSeriesX=[],this.seriesGoals=[],this.coreUtils=new Z(this.ctx)}return b(_,[{key:"isMultiFormat",value:function(){return this.isFormatXY()||this.isFormat2DArray()}},{key:"isFormatXY",value:function(){var e=this.w.config.series.slice(),t=new Be(this.ctx);if(this.activeSeriesIndex=t.getActiveConfigSeriesIndex(),e[this.activeSeriesIndex].data!==void 0&&e[this.activeSeriesIndex].data.length>0&&e[this.activeSeriesIndex].data[0]!==null&&e[this.activeSeriesIndex].data[0].x!==void 0&&e[this.activeSeriesIndex].data[0]!==null)return!0}},{key:"isFormat2DArray",value:function(){var e=this.w.config.series.slice(),t=new Be(this.ctx);if(this.activeSeriesIndex=t.getActiveConfigSeriesIndex(),e[this.activeSeriesIndex].data!==void 0&&e[this.activeSeriesIndex].data.length>0&&e[this.activeSeriesIndex].data[0]!==void 0&&e[this.activeSeriesIndex].data[0]!==null&&e[this.activeSeriesIndex].data[0].constructor===Array)return!0}},{key:"handleFormat2DArray",value:function(e,t){for(var r=this.w.config,a=this.w.globals,o=r.chart.type==="boxPlot"||r.series[t].type==="boxPlot",h=0;h<e[t].data.length;h++)if(e[t].data[h][1]!==void 0&&(Array.isArray(e[t].data[h][1])&&e[t].data[h][1].length===4&&!o?this.twoDSeries.push(P.parseNumber(e[t].data[h][1][3])):e[t].data[h].length>=5?this.twoDSeries.push(P.parseNumber(e[t].data[h][4])):this.twoDSeries.push(P.parseNumber(e[t].data[h][1])),a.dataFormatXNumeric=!0),r.xaxis.type==="datetime"){var c=new Date(e[t].data[h][0]);c=new Date(c).getTime(),this.twoDSeriesX.push(c)}else this.twoDSeriesX.push(e[t].data[h][0]);for(var d=0;d<e[t].data.length;d++)e[t].data[d][2]!==void 0&&(this.threeDSeries.push(e[t].data[d][2]),a.isDataXYZ=!0)}},{key:"handleFormatXY",value:function(e,t){var r=this.w.config,a=this.w.globals,o=new je(this.ctx),h=t;a.collapsedSeriesIndices.indexOf(t)>-1&&(h=this.activeSeriesIndex);for(var c=0;c<e[t].data.length;c++)e[t].data[c].y!==void 0&&(Array.isArray(e[t].data[c].y)?this.twoDSeries.push(P.parseNumber(e[t].data[c].y[e[t].data[c].y.length-1])):this.twoDSeries.push(P.parseNumber(e[t].data[c].y))),e[t].data[c].goals!==void 0&&Array.isArray(e[t].data[c].goals)?(this.seriesGoals[t]===void 0&&(this.seriesGoals[t]=[]),this.seriesGoals[t].push(e[t].data[c].goals)):(this.seriesGoals[t]===void 0&&(this.seriesGoals[t]=[]),this.seriesGoals[t].push(null));for(var d=0;d<e[h].data.length;d++){var p=typeof e[h].data[d].x=="string",x=Array.isArray(e[h].data[d].x),m=!x&&!!o.isValidDate(e[h].data[d].x.toString());if(p||m)if(p||r.xaxis.convertedCatToNumeric){var y=a.isBarHorizontal&&a.isRangeData;r.xaxis.type!=="datetime"||y?(this.fallbackToCategory=!0,this.twoDSeriesX.push(e[h].data[d].x)):this.twoDSeriesX.push(o.parseDate(e[h].data[d].x))}else r.xaxis.type==="datetime"?this.twoDSeriesX.push(o.parseDate(e[h].data[d].x.toString())):(a.dataFormatXNumeric=!0,a.isXNumeric=!0,this.twoDSeriesX.push(parseFloat(e[h].data[d].x)));else x?(this.fallbackToCategory=!0,this.twoDSeriesX.push(e[h].data[d].x)):(a.isXNumeric=!0,a.dataFormatXNumeric=!0,this.twoDSeriesX.push(e[h].data[d].x))}if(e[t].data[0]&&e[t].data[0].z!==void 0){for(var A=0;A<e[t].data.length;A++)this.threeDSeries.push(e[t].data[A].z);a.isDataXYZ=!0}}},{key:"handleRangeData",value:function(e,t){var r=this.w.globals,a={};return this.isFormat2DArray()?a=this.handleRangeDataFormat("array",e,t):this.isFormatXY()&&(a=this.handleRangeDataFormat("xy",e,t)),r.seriesRangeStart.push(a.start),r.seriesRangeEnd.push(a.end),r.seriesRangeBar.push(a.rangeUniques),r.seriesRangeBar.forEach(function(o,h){o&&o.forEach(function(c,d){c.y.forEach(function(p,x){for(var m=0;m<c.y.length;m++)if(x!==m){var y=p.y1,A=p.y2,E=c.y[m].y1;y<=c.y[m].y2&&E<=A&&(c.overlaps.indexOf(p.rangeName)<0&&c.overlaps.push(p.rangeName),c.overlaps.indexOf(c.y[m].rangeName)<0&&c.overlaps.push(c.y[m].rangeName))}})})}),a}},{key:"handleCandleStickBoxData",value:function(e,t){var r=this.w.globals,a={};return this.isFormat2DArray()?a=this.handleCandleStickBoxDataFormat("array",e,t):this.isFormatXY()&&(a=this.handleCandleStickBoxDataFormat("xy",e,t)),r.seriesCandleO[t]=a.o,r.seriesCandleH[t]=a.h,r.seriesCandleM[t]=a.m,r.seriesCandleL[t]=a.l,r.seriesCandleC[t]=a.c,a}},{key:"handleRangeDataFormat",value:function(e,t,r){var a=[],o=[],h=t[r].data.filter(function(y,A,E){return A===E.findIndex(function(C){return C.x===y.x})}).map(function(y,A){return{x:y.x,overlaps:[],y:[]}}),c="Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts",d=new Be(this.ctx).getActiveConfigSeriesIndex();if(e==="array"){if(t[d].data[0][1].length!==2)throw new Error(c);for(var p=0;p<t[r].data.length;p++)a.push(t[r].data[p][1][0]),o.push(t[r].data[p][1][1])}else if(e==="xy"){if(t[d].data[0].y.length!==2)throw new Error(c);for(var x=function(y){var A=P.randomId(),E=t[r].data[y].x,C={y1:t[r].data[y].y[0],y2:t[r].data[y].y[1],rangeName:A};t[r].data[y].rangeName=A;var L=h.findIndex(function(R){return R.x===E});h[L].y.push(C),a.push(C.y1),o.push(C.y2)},m=0;m<t[r].data.length;m++)x(m)}return{start:a,end:o,rangeUniques:h}}},{key:"handleCandleStickBoxDataFormat",value:function(e,t,r){var a=this.w,o=a.config.chart.type==="boxPlot"||a.config.series[r].type==="boxPlot",h=[],c=[],d=[],p=[],x=[];if(e==="array")if(o&&t[r].data[0].length===6||!o&&t[r].data[0].length===5)for(var m=0;m<t[r].data.length;m++)h.push(t[r].data[m][1]),c.push(t[r].data[m][2]),o?(d.push(t[r].data[m][3]),p.push(t[r].data[m][4]),x.push(t[r].data[m][5])):(p.push(t[r].data[m][3]),x.push(t[r].data[m][4]));else for(var y=0;y<t[r].data.length;y++)Array.isArray(t[r].data[y][1])&&(h.push(t[r].data[y][1][0]),c.push(t[r].data[y][1][1]),o?(d.push(t[r].data[y][1][2]),p.push(t[r].data[y][1][3]),x.push(t[r].data[y][1][4])):(p.push(t[r].data[y][1][2]),x.push(t[r].data[y][1][3])));else if(e==="xy")for(var A=0;A<t[r].data.length;A++)Array.isArray(t[r].data[A].y)&&(h.push(t[r].data[A].y[0]),c.push(t[r].data[A].y[1]),o?(d.push(t[r].data[A].y[2]),p.push(t[r].data[A].y[3]),x.push(t[r].data[A].y[4])):(p.push(t[r].data[A].y[2]),x.push(t[r].data[A].y[3])));return{o:h,h:c,m:d,l:p,c:x}}},{key:"parseDataAxisCharts",value:function(e){var t=this,r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:this.ctx,a=this.w.config,o=this.w.globals,h=new je(r),c=a.labels.length>0?a.labels.slice():a.xaxis.categories.slice();o.isRangeBar=a.chart.type==="rangeBar"&&o.isBarHorizontal,o.hasGroups=a.xaxis.type==="category"&&a.xaxis.group!==void 0&&a.xaxis.group.groups!==void 0&&a.xaxis.group.groups.length>0,o.hasGroups&&(o.groups=a.xaxis.group.groups);for(var d=function(){for(var m=0;m<c.length;m++)if(typeof c[m]=="string"){if(!h.isValidDate(c[m]))throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");t.twoDSeriesX.push(h.parseDate(c[m]))}else t.twoDSeriesX.push(c[m])},p=0;p<e.length;p++){if(this.twoDSeries=[],this.twoDSeriesX=[],this.threeDSeries=[],e[p].data===void 0)return void console.error("It is a possibility that you may have not included 'data' property in series.");if(a.chart.type!=="rangeBar"&&a.chart.type!=="rangeArea"&&e[p].type!=="rangeBar"&&e[p].type!=="rangeArea"||(o.isRangeData=!0,this.handleRangeData(e,p)),this.isMultiFormat())this.isFormat2DArray()?this.handleFormat2DArray(e,p):this.isFormatXY()&&this.handleFormatXY(e,p),a.chart.type!=="candlestick"&&e[p].type!=="candlestick"&&a.chart.type!=="boxPlot"&&e[p].type!=="boxPlot"||this.handleCandleStickBoxData(e,p),o.series.push(this.twoDSeries),o.labels.push(this.twoDSeriesX),o.seriesX.push(this.twoDSeriesX),o.seriesGoals=this.seriesGoals,p!==this.activeSeriesIndex||this.fallbackToCategory||(o.isXNumeric=!0);else{a.xaxis.type==="datetime"?(o.isXNumeric=!0,d(),o.seriesX.push(this.twoDSeriesX)):a.xaxis.type==="numeric"&&(o.isXNumeric=!0,c.length>0&&(this.twoDSeriesX=c,o.seriesX.push(this.twoDSeriesX))),o.labels.push(this.twoDSeriesX);var x=e[p].data.map(function(m){return P.parseNumber(m)});o.series.push(x)}o.seriesZ.push(this.threeDSeries),e[p].name!==void 0?o.seriesNames.push(e[p].name):o.seriesNames.push("series-"+parseInt(p+1,10)),e[p].color!==void 0?o.seriesColors.push(e[p].color):o.seriesColors.push(void 0)}return this.w}},{key:"parseDataNonAxisCharts",value:function(e){var t=this.w.globals,r=this.w.config;t.series=e.slice(),t.seriesNames=r.labels.slice();for(var a=0;a<t.series.length;a++)t.seriesNames[a]===void 0&&t.seriesNames.push("series-"+(a+1));return this.w}},{key:"handleExternalLabelsData",value:function(e){var t=this.w.config,r=this.w.globals;t.xaxis.categories.length>0?r.labels=t.xaxis.categories:t.labels.length>0?r.labels=t.labels.slice():this.fallbackToCategory?(r.labels=r.labels[0],r.seriesRangeBar.length&&(r.seriesRangeBar.map(function(a){a.forEach(function(o){r.labels.indexOf(o.x)<0&&o.x&&r.labels.push(o.x)})}),r.labels=r.labels.filter(function(a,o,h){return h.indexOf(a)===o})),t.xaxis.convertedCatToNumeric&&(new bt(t).convertCatToNumericXaxis(t,this.ctx,r.seriesX[0]),this._generateExternalLabels(e))):this._generateExternalLabels(e)}},{key:"_generateExternalLabels",value:function(e){var t=this.w.globals,r=this.w.config,a=[];if(t.axisCharts){if(t.series.length>0)if(this.isFormatXY())for(var o=r.series.map(function(m,y){return m.data.filter(function(A,E,C){return C.findIndex(function(L){return L.x===A.x})===E})}),h=o.reduce(function(m,y,A,E){return E[m].length>y.length?m:A},0),c=0;c<o[h].length;c++)a.push(c+1);else for(var d=0;d<t.series[t.maxValsInArrayIndex].length;d++)a.push(d+1);t.seriesX=[];for(var p=0;p<e.length;p++)t.seriesX.push(a);t.isXNumeric=!0}if(a.length===0){a=t.axisCharts?[]:t.series.map(function(m,y){return y+1});for(var x=0;x<e.length;x++)t.seriesX.push(a)}t.labels=a,r.xaxis.convertedCatToNumeric&&(t.categoryLabels=a.map(function(m){return r.xaxis.labels.formatter(m)})),t.noLabelsProvided=!0}},{key:"parseData",value:function(e){var t=this.w,r=t.config,a=t.globals;if(this.excludeCollapsedSeriesInYAxis(),this.fallbackToCategory=!1,this.ctx.core.resetGlobals(),this.ctx.core.isMultipleY(),a.axisCharts?this.parseDataAxisCharts(e):this.parseDataNonAxisCharts(e),this.coreUtils.getLargestSeries(),r.chart.type==="bar"&&r.chart.stacked){var o=new Be(this.ctx);a.series=o.setNullSeriesToZeroValues(a.series)}this.coreUtils.getSeriesTotals(),a.axisCharts&&this.coreUtils.getStackedSeriesTotals(),this.coreUtils.getPercentSeries(),a.dataFormatXNumeric||a.isXNumeric&&(r.xaxis.type!=="numeric"||r.labels.length!==0||r.xaxis.categories.length!==0)||this.handleExternalLabelsData(e);for(var h=this.coreUtils.getCategoryLabels(a.labels),c=0;c<h.length;c++)if(Array.isArray(h[c])){a.isMultiLineX=!0;break}}},{key:"excludeCollapsedSeriesInYAxis",value:function(){var e=this,t=this.w;t.globals.ignoreYAxisIndexes=t.globals.collapsedSeries.map(function(r,a){if(e.w.globals.isMultipleYAxis&&!t.config.chart.stacked)return r.index})}}]),_}(),ze=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.tooltipKeyFormat="dd MMM"}return b(_,[{key:"xLabelFormat",value:function(e,t,r,a){var o=this.w;if(o.config.xaxis.type==="datetime"&&o.config.xaxis.labels.formatter===void 0&&o.config.tooltip.x.formatter===void 0){var h=new je(this.ctx);return h.formatDate(h.getDate(t),o.config.tooltip.x.format)}return e(t,r,a)}},{key:"defaultGeneralFormatter",value:function(e){return Array.isArray(e)?e.map(function(t){return t}):e}},{key:"defaultYFormatter",value:function(e,t,r){var a=this.w;return P.isNumber(e)&&(e=a.globals.yValueDecimal!==0?e.toFixed(t.decimalsInFloat!==void 0?t.decimalsInFloat:a.globals.yValueDecimal):a.globals.maxYArr[r]-a.globals.minYArr[r]<5?e.toFixed(1):e.toFixed(0)),e}},{key:"setLabelFormatters",value:function(){var e=this,t=this.w;return t.globals.xaxisTooltipFormatter=function(r){return e.defaultGeneralFormatter(r)},t.globals.ttKeyFormatter=function(r){return e.defaultGeneralFormatter(r)},t.globals.ttZFormatter=function(r){return r},t.globals.legendFormatter=function(r){return e.defaultGeneralFormatter(r)},t.config.xaxis.labels.formatter!==void 0?t.globals.xLabelFormatter=t.config.xaxis.labels.formatter:t.globals.xLabelFormatter=function(r){if(P.isNumber(r)){if(!t.config.xaxis.convertedCatToNumeric&&t.config.xaxis.type==="numeric"){if(P.isNumber(t.config.xaxis.decimalsInFloat))return r.toFixed(t.config.xaxis.decimalsInFloat);var a=t.globals.maxX-t.globals.minX;return a>0&&a<100?r.toFixed(1):r.toFixed(0)}return t.globals.isBarHorizontal&&t.globals.maxY-t.globals.minYArr<4?r.toFixed(1):r.toFixed(0)}return r},typeof t.config.tooltip.x.formatter=="function"?t.globals.ttKeyFormatter=t.config.tooltip.x.formatter:t.globals.ttKeyFormatter=t.globals.xLabelFormatter,typeof t.config.xaxis.tooltip.formatter=="function"&&(t.globals.xaxisTooltipFormatter=t.config.xaxis.tooltip.formatter),(Array.isArray(t.config.tooltip.y)||t.config.tooltip.y.formatter!==void 0)&&(t.globals.ttVal=t.config.tooltip.y),t.config.tooltip.z.formatter!==void 0&&(t.globals.ttZFormatter=t.config.tooltip.z.formatter),t.config.legend.formatter!==void 0&&(t.globals.legendFormatter=t.config.legend.formatter),t.config.yaxis.forEach(function(r,a){r.labels.formatter!==void 0?t.globals.yLabelFormatters[a]=r.labels.formatter:t.globals.yLabelFormatters[a]=function(o){return t.globals.xyCharts?Array.isArray(o)?o.map(function(h){return e.defaultYFormatter(h,r,a)}):e.defaultYFormatter(o,r,a):o}}),t.globals}},{key:"heatmapLabelFormatters",value:function(){var e=this.w;if(e.config.chart.type==="heatmap"){e.globals.yAxisScale[0].result=e.globals.seriesNames.slice();var t=e.globals.seriesNames.reduce(function(r,a){return r.length>a.length?r:a},0);e.globals.yAxisScale[0].niceMax=t,e.globals.yAxisScale[0].niceMin=t}}}]),_}(),De=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"getLabel",value:function(e,t,r,a){var o=arguments.length>4&&arguments[4]!==void 0?arguments[4]:[],h=arguments.length>5&&arguments[5]!==void 0?arguments[5]:"12px",c=!(arguments.length>6&&arguments[6]!==void 0)||arguments[6],d=this.w,p=e[a]===void 0?"":e[a],x=p,m=d.globals.xLabelFormatter,y=d.config.xaxis.labels.formatter,A=!1,E=new ze(this.ctx),C=p;c&&(x=E.xLabelFormat(m,p,C,{i:a,dateFormatter:new je(this.ctx).formatDate,w:d}),y!==void 0&&(x=y(p,e[a],{i:a,dateFormatter:new je(this.ctx).formatDate,w:d})));var L=function(g){var w=null;return t.forEach(function(T){T.unit==="month"?w="year":T.unit==="day"?w="month":T.unit==="hour"?w="day":T.unit==="minute"&&(w="hour")}),w===g};t.length>0?(A=L(t[a].unit),r=t[a].position,x=t[a].value):d.config.xaxis.type==="datetime"&&y===void 0&&(x=""),x===void 0&&(x=""),x=Array.isArray(x)?x:x.toString();var R=new X(this.ctx),F={};F=d.globals.rotateXLabels&&c?R.getTextRects(x,parseInt(h,10),null,"rotate(".concat(d.config.xaxis.labels.rotate," 0 0)"),!1):R.getTextRects(x,parseInt(h,10));var D=!d.config.xaxis.labels.showDuplicates&&this.ctx.timeScale;return!Array.isArray(x)&&(x.indexOf("NaN")===0||x.toLowerCase().indexOf("invalid")===0||x.toLowerCase().indexOf("infinity")>=0||o.indexOf(x)>=0&&D)&&(x=""),{x:r,text:x,textRect:F,isBold:A}}},{key:"checkLabelBasedOnTickamount",value:function(e,t,r){var a=this.w,o=a.config.xaxis.tickAmount;return o==="dataPoints"&&(o=Math.round(a.globals.gridWidth/120)),o>r||e%Math.round(r/(o+1))==0||(t.text=""),t}},{key:"checkForOverflowingLabels",value:function(e,t,r,a,o){var h=this.w;if(e===0&&h.globals.skipFirstTimelinelabel&&(t.text=""),e===r-1&&h.globals.skipLastTimelinelabel&&(t.text=""),h.config.xaxis.labels.hideOverlappingLabels&&a.length>0){var c=o[o.length-1];t.x<c.textRect.width/(h.globals.rotateXLabels?Math.abs(h.config.xaxis.labels.rotate)/12:1.01)+c.x&&(t.text="")}return t}},{key:"checkForReversedLabels",value:function(e,t){var r=this.w;return r.config.yaxis[e]&&r.config.yaxis[e].reversed&&t.reverse(),t}},{key:"isYAxisHidden",value:function(e){var t=this.w,r=new Z(this.ctx);return!t.config.yaxis[e].show||!t.config.yaxis[e].showForNullSeries&&r.isSeriesNull(e)&&t.globals.collapsedSeriesIndices.indexOf(e)===-1}},{key:"getYAxisForeColor",value:function(e,t){var r=this.w;return Array.isArray(e)&&r.globals.yAxisScale[t]&&this.ctx.theme.pushExtraColors(e,r.globals.yAxisScale[t].result.length,!1),e}},{key:"drawYAxisTicks",value:function(e,t,r,a,o,h,c){var d=this.w,p=new X(this.ctx),x=d.globals.translateY;if(a.show&&t>0){d.config.yaxis[o].opposite===!0&&(e+=a.width);for(var m=t;m>=0;m--){var y=x+t/10+d.config.yaxis[o].labels.offsetY-1;d.globals.isBarHorizontal&&(y=h*m),d.config.chart.type==="heatmap"&&(y+=h/2);var A=p.drawLine(e+r.offsetX-a.width+a.offsetX,y+a.offsetY,e+r.offsetX+a.offsetX,y+a.offsetY,a.color);c.add(A),x+=h}}}}]),_}(),Ie=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"scaleSvgNode",value:function(e,t){var r=parseFloat(e.getAttributeNS(null,"width")),a=parseFloat(e.getAttributeNS(null,"height"));e.setAttributeNS(null,"width",r*t),e.setAttributeNS(null,"height",a*t),e.setAttributeNS(null,"viewBox","0 0 "+r+" "+a)}},{key:"fixSvgStringForIe11",value:function(e){if(!P.isIE11())return e.replace(/&nbsp;/g,"&#160;");var t=0,r=e.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g,function(a){return++t===2?'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"':a});return r=(r=r.replace(/xmlns:NS\d+=""/g,"")).replace(/NS\d+:(\w+:\w+=")/g,"$1")}},{key:"getSvgString",value:function(e){var t=this.w.globals.dom.Paper.svg();if(e!==1){var r=this.w.globals.dom.Paper.node.cloneNode(!0);this.scaleSvgNode(r,e),t=new XMLSerializer().serializeToString(r)}return this.fixSvgStringForIe11(t)}},{key:"cleanup",value:function(){var e=this.w,t=e.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"),r=e.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"),a=e.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");Array.prototype.forEach.call(a,function(o){o.setAttribute("width",0)}),t&&t[0]&&(t[0].setAttribute("x",-500),t[0].setAttribute("x1",-500),t[0].setAttribute("x2",-500)),r&&r[0]&&(r[0].setAttribute("y",-100),r[0].setAttribute("y1",-100),r[0].setAttribute("y2",-100))}},{key:"svgUrl",value:function(){this.cleanup();var e=this.getSvgString(),t=new Blob([e],{type:"image/svg+xml;charset=utf-8"});return URL.createObjectURL(t)}},{key:"dataURI",value:function(e){var t=this;return new Promise(function(r){var a=t.w,o=e?e.scale||e.width/a.globals.svgWidth:1;t.cleanup();var h=document.createElement("canvas");h.width=a.globals.svgWidth*o,h.height=parseInt(a.globals.dom.elWrap.style.height,10)*o;var c=a.config.chart.background==="transparent"?"#fff":a.config.chart.background,d=h.getContext("2d");d.fillStyle=c,d.fillRect(0,0,h.width*o,h.height*o);var p=t.getSvgString(o);if(window.canvg&&P.isIE11()){var x=window.canvg.Canvg.fromString(d,p,{ignoreClear:!0,ignoreDimensions:!0});x.start();var m=h.msToBlob();x.stop(),r({blob:m})}else{var y="data:image/svg+xml,"+encodeURIComponent(p),A=new Image;A.crossOrigin="anonymous",A.onload=function(){if(d.drawImage(A,0,0),h.msToBlob){var E=h.msToBlob();r({blob:E})}else{var C=h.toDataURL("image/png");r({imgURI:C})}},A.src=y}})}},{key:"exportToSVG",value:function(){this.triggerDownload(this.svgUrl(),this.w.config.chart.toolbar.export.svg.filename,".svg")}},{key:"exportToPng",value:function(){var e=this;this.dataURI().then(function(t){var r=t.imgURI,a=t.blob;a?navigator.msSaveOrOpenBlob(a,e.w.globals.chartID+".png"):e.triggerDownload(r,e.w.config.chart.toolbar.export.png.filename,".png")})}},{key:"exportToCSV",value:function(e){var t=this,r=e.series,a=e.columnDelimiter,o=e.lineDelimiter,h=o===void 0?`
`:o,c=this.w,d=[],p=[],x="",m=new be(this.ctx),y=new De(this.ctx),A=function(E){var C="";if(c.globals.axisCharts){if(c.config.xaxis.type==="category"||c.config.xaxis.convertedCatToNumeric)if(c.globals.isBarHorizontal){var L=c.globals.yLabelFormatters[0],R=new Be(t.ctx).getActiveConfigSeriesIndex();C=L(c.globals.labels[E],{seriesIndex:R,dataPointIndex:E,w:c})}else C=y.getLabel(c.globals.labels,c.globals.timescaleLabels,0,E).text;c.config.xaxis.type==="datetime"&&(c.config.xaxis.categories.length?C=c.config.xaxis.categories[E]:c.config.labels.length&&(C=c.config.labels[E]))}else C=c.config.labels[E];return Array.isArray(C)&&(C=C.join(" ")),P.isNumber(C)?C:C.split(a).join("")};d.push(c.config.chart.toolbar.export.csv.headerCategory),r.map(function(E,C){var L=E.name?E.name:"series-".concat(C);c.globals.axisCharts&&d.push(L.split(a).join("")?L.split(a).join(""):"series-".concat(C))}),c.globals.axisCharts||(d.push(c.config.chart.toolbar.export.csv.headerValue),p.push(d.join(a))),r.map(function(E,C){c.globals.axisCharts?function(L,R){if(d.length&&R===0&&p.push(d.join(a)),L.data&&L.data.length)for(var F=0;F<L.data.length;F++){d=[];var D=A(F);if(D||(m.isFormatXY()?D=r[R].data[F].x:m.isFormat2DArray()&&(D=r[R].data[F]?r[R].data[F][0]:"")),R===0){d.push((w=D,c.config.xaxis.type==="datetime"&&String(w).length>=10?c.config.chart.toolbar.export.csv.dateFormatter(D):P.isNumber(D)?D:D.split(a).join("")));for(var g=0;g<c.globals.series.length;g++)d.push(c.globals.series[g][F])}(c.config.chart.type==="candlestick"||L.type&&L.type==="candlestick")&&(d.pop(),d.push(c.globals.seriesCandleO[R][F]),d.push(c.globals.seriesCandleH[R][F]),d.push(c.globals.seriesCandleL[R][F]),d.push(c.globals.seriesCandleC[R][F])),(c.config.chart.type==="boxPlot"||L.type&&L.type==="boxPlot")&&(d.pop(),d.push(c.globals.seriesCandleO[R][F]),d.push(c.globals.seriesCandleH[R][F]),d.push(c.globals.seriesCandleM[R][F]),d.push(c.globals.seriesCandleL[R][F]),d.push(c.globals.seriesCandleC[R][F])),c.config.chart.type==="rangeBar"&&(d.pop(),d.push(c.globals.seriesRangeStart[R][F]),d.push(c.globals.seriesRangeEnd[R][F])),d.length&&p.push(d.join(a))}var w}(E,C):((d=[]).push(c.globals.labels[C].split(a).join("")),d.push(c.globals.series[C]),p.push(d.join(a)))}),x+=p.join(h),this.triggerDownload("data:text/csv; charset=utf-8,"+encodeURIComponent("\uFEFF"+x),c.config.chart.toolbar.export.csv.filename,".csv")}},{key:"triggerDownload",value:function(e,t,r){var a=document.createElement("a");a.href=e,a.download=(t||this.w.globals.chartID)+r,document.body.appendChild(a),a.click(),document.body.removeChild(a)}}]),_}(),Le=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w;var t=this.w;this.axesUtils=new De(e),this.xaxisLabels=t.globals.labels.slice(),t.globals.timescaleLabels.length>0&&!t.globals.isBarHorizontal&&(this.xaxisLabels=t.globals.timescaleLabels.slice()),t.config.xaxis.overwriteCategories&&(this.xaxisLabels=t.config.xaxis.overwriteCategories),this.drawnLabels=[],this.drawnLabelsRects=[],t.config.xaxis.position==="top"?this.offY=0:this.offY=t.globals.gridHeight+1,this.offY=this.offY+t.config.xaxis.axisBorder.offsetY,this.isCategoryBarHorizontal=t.config.chart.type==="bar"&&t.config.plotOptions.bar.horizontal,this.xaxisFontSize=t.config.xaxis.labels.style.fontSize,this.xaxisFontFamily=t.config.xaxis.labels.style.fontFamily,this.xaxisForeColors=t.config.xaxis.labels.style.colors,this.xaxisBorderWidth=t.config.xaxis.axisBorder.width,this.isCategoryBarHorizontal&&(this.xaxisBorderWidth=t.config.yaxis[0].axisBorder.width.toString()),this.xaxisBorderWidth.indexOf("%")>-1?this.xaxisBorderWidth=t.globals.gridWidth*parseInt(this.xaxisBorderWidth,10)/100:this.xaxisBorderWidth=parseInt(this.xaxisBorderWidth,10),this.xaxisBorderHeight=t.config.xaxis.axisBorder.height,this.yaxis=t.config.yaxis[0]}return b(_,[{key:"drawXaxis",value:function(){var e=this.w,t=new X(this.ctx),r=t.group({class:"apexcharts-xaxis",transform:"translate(".concat(e.config.xaxis.offsetX,", ").concat(e.config.xaxis.offsetY,")")}),a=t.group({class:"apexcharts-xaxis-texts-g",transform:"translate(".concat(e.globals.translateXAxisX,", ").concat(e.globals.translateXAxisY,")")});r.add(a);for(var o=[],h=0;h<this.xaxisLabels.length;h++)o.push(this.xaxisLabels[h]);if(this.drawXAxisLabelAndGroup(!0,t,a,o,e.globals.isXNumeric,function(E,C){return C}),e.globals.hasGroups){var c=e.globals.groups;o=[];for(var d=0;d<c.length;d++)o.push(c[d].title);var p={};e.config.xaxis.group.style&&(p.xaxisFontSize=e.config.xaxis.group.style.fontSize,p.xaxisFontFamily=e.config.xaxis.group.style.fontFamily,p.xaxisForeColors=e.config.xaxis.group.style.colors,p.fontWeight=e.config.xaxis.group.style.fontWeight,p.cssClass=e.config.xaxis.group.style.cssClass),this.drawXAxisLabelAndGroup(!1,t,a,o,!1,function(E,C){return c[E].cols*C},p)}if(e.config.xaxis.title.text!==void 0){var x=t.group({class:"apexcharts-xaxis-title"}),m=t.drawText({x:e.globals.gridWidth/2+e.config.xaxis.title.offsetX,y:this.offY+parseFloat(this.xaxisFontSize)+e.globals.xAxisLabelsHeight+e.config.xaxis.title.offsetY,text:e.config.xaxis.title.text,textAnchor:"middle",fontSize:e.config.xaxis.title.style.fontSize,fontFamily:e.config.xaxis.title.style.fontFamily,fontWeight:e.config.xaxis.title.style.fontWeight,foreColor:e.config.xaxis.title.style.color,cssClass:"apexcharts-xaxis-title-text "+e.config.xaxis.title.style.cssClass});x.add(m),r.add(x)}if(e.config.xaxis.axisBorder.show){var y=e.globals.barPadForNumericAxis,A=t.drawLine(e.globals.padHorizontal+e.config.xaxis.axisBorder.offsetX-y,this.offY,this.xaxisBorderWidth+y,this.offY,e.config.xaxis.axisBorder.color,0,this.xaxisBorderHeight);r.add(A)}return r}},{key:"drawXAxisLabelAndGroup",value:function(e,t,r,a,o,h){var c,d=this,p=arguments.length>6&&arguments[6]!==void 0?arguments[6]:{},x=[],m=[],y=this.w,A=p.xaxisFontSize||this.xaxisFontSize,E=p.xaxisFontFamily||this.xaxisFontFamily,C=p.xaxisForeColors||this.xaxisForeColors,L=p.fontWeight||y.config.xaxis.labels.style.fontWeight,R=p.cssClass||y.config.xaxis.labels.style.cssClass,F=y.globals.padHorizontal,D=a.length,g=y.globals.dataPoints;if(o){var w=g>1?g-1:g;c=y.globals.gridWidth/w,F=F+h(0,c)/2+y.config.xaxis.labels.offsetX}else c=y.globals.gridWidth/g,F=F+h(0,c)+y.config.xaxis.labels.offsetX;for(var T=function(V){var J=F-h(V,c)/2+y.config.xaxis.labels.offsetX;V===0&&D===1&&c/2===F&&g===1&&(J=y.globals.gridWidth/2);var G=d.axesUtils.getLabel(a,[],J,V,x,A,e),oe=28;if(y.globals.rotateXLabels&&e&&(oe=22),e||(oe=oe+parseFloat(A)+(y.globals.xAxisLabelsHeight-y.globals.xAxisGroupLabelsHeight)+(y.globals.rotateXLabels?10:0)),G=y.config.xaxis.tickAmount!==void 0&&y.config.xaxis.tickAmount!=="dataPoints"&&y.config.xaxis.type!=="datetime"?d.axesUtils.checkLabelBasedOnTickamount(V,G,D):d.axesUtils.checkForOverflowingLabels(V,G,D,x,m),e&&G.text&&y.globals.xaxisLabelsCount++,y.config.xaxis.labels.show){var re=t.drawText({x:G.x,y:d.offY+y.config.xaxis.labels.offsetY+oe-(y.config.xaxis.position==="top"?y.globals.xAxisHeight+y.config.xaxis.axisTicks.height-2:0),text:G.text,textAnchor:"middle",fontWeight:G.isBold?600:L,fontSize:A,fontFamily:E,foreColor:Array.isArray(C)?e&&y.config.xaxis.convertedCatToNumeric?C[y.globals.minX+V-1]:C[V]:C,isPlainText:!1,cssClass:(e?"apexcharts-xaxis-label ":"apexcharts-xaxis-group-label ")+R});if(r.add(re),e){var ge=document.createElementNS(y.globals.SVGNS,"title");ge.textContent=Array.isArray(G.text)?G.text.join(" "):G.text,re.node.appendChild(ge),G.text!==""&&(x.push(G.text),m.push(G))}}V<D-1&&(F+=h(V+1,c))},M=0;M<=D-1;M++)T(M)}},{key:"drawXaxisInversed",value:function(e){var t,r,a=this,o=this.w,h=new X(this.ctx),c=o.config.yaxis[0].opposite?o.globals.translateYAxisX[e]:0,d=h.group({class:"apexcharts-yaxis apexcharts-xaxis-inversed",rel:e}),p=h.group({class:"apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",transform:"translate("+c+", 0)"});d.add(p);var x=[];if(o.config.yaxis[e].show)for(var m=0;m<this.xaxisLabels.length;m++)x.push(this.xaxisLabels[m]);t=o.globals.gridHeight/x.length,r=-t/2.2;var y=o.globals.yLabelFormatters[0],A=o.config.yaxis[0].labels;if(A.show)for(var E=function(w){var T=x[w]===void 0?"":x[w];T=y(T,{seriesIndex:e,dataPointIndex:w,w:o});var M=a.axesUtils.getYAxisForeColor(A.style.colors,e),V=0;Array.isArray(T)&&(V=T.length/2*parseInt(A.style.fontSize,10));var J=h.drawText({x:A.offsetX-15,y:r+t+A.offsetY-V,text:T,textAnchor:a.yaxis.opposite?"start":"end",foreColor:Array.isArray(M)?M[w]:M,fontSize:A.style.fontSize,fontFamily:A.style.fontFamily,fontWeight:A.style.fontWeight,isPlainText:!1,cssClass:"apexcharts-yaxis-label "+A.style.cssClass});p.add(J);var G=document.createElementNS(o.globals.SVGNS,"title");if(G.textContent=Array.isArray(T)?T.join(" "):T,J.node.appendChild(G),o.config.yaxis[e].labels.rotate!==0){var oe=h.rotateAroundCenter(J.node);J.node.setAttribute("transform","rotate(".concat(o.config.yaxis[e].labels.rotate," 0 ").concat(oe.y,")"))}r+=t},C=0;C<=x.length-1;C++)E(C);if(o.config.yaxis[0].title.text!==void 0){var L=h.group({class:"apexcharts-yaxis-title apexcharts-xaxis-title-inversed",transform:"translate("+c+", 0)"}),R=h.drawText({x:0,y:o.globals.gridHeight/2,text:o.config.yaxis[0].title.text,textAnchor:"middle",foreColor:o.config.yaxis[0].title.style.color,fontSize:o.config.yaxis[0].title.style.fontSize,fontWeight:o.config.yaxis[0].title.style.fontWeight,fontFamily:o.config.yaxis[0].title.style.fontFamily,cssClass:"apexcharts-yaxis-title-text "+o.config.yaxis[0].title.style.cssClass});L.add(R),d.add(L)}var F=0;this.isCategoryBarHorizontal&&o.config.yaxis[0].opposite&&(F=o.globals.gridWidth);var D=o.config.xaxis.axisBorder;if(D.show){var g=h.drawLine(o.globals.padHorizontal+D.offsetX+F,1+D.offsetY,o.globals.padHorizontal+D.offsetX+F,o.globals.gridHeight+D.offsetY,D.color,0);d.add(g)}return o.config.yaxis[0].axisTicks.show&&this.axesUtils.drawYAxisTicks(F,x.length,o.config.yaxis[0].axisBorder,o.config.yaxis[0].axisTicks,0,t,d),d}},{key:"drawXaxisTicks",value:function(e,t,r){var a=this.w,o=e;if(!(e<0||e-2>a.globals.gridWidth)){var h=this.offY+a.config.xaxis.axisTicks.offsetY;if(t=t+h+a.config.xaxis.axisTicks.height,a.config.xaxis.position==="top"&&(t=h-a.config.xaxis.axisTicks.height),a.config.xaxis.axisTicks.show){var c=new X(this.ctx).drawLine(e+a.config.xaxis.axisTicks.offsetX,h+a.config.xaxis.offsetY,o+a.config.xaxis.axisTicks.offsetX,t+a.config.xaxis.offsetY,a.config.xaxis.axisTicks.color);r.add(c),c.node.classList.add("apexcharts-xaxis-tick")}}}},{key:"getXAxisTicksPositions",value:function(){var e=this.w,t=[],r=this.xaxisLabels.length,a=e.globals.padHorizontal;if(e.globals.timescaleLabels.length>0)for(var o=0;o<r;o++)a=this.xaxisLabels[o].position,t.push(a);else for(var h=r,c=0;c<h;c++){var d=h;e.globals.isXNumeric&&e.config.chart.type!=="bar"&&(d-=1),a+=e.globals.gridWidth/d,t.push(a)}return t}},{key:"xAxisLabelCorrections",value:function(){var e=this.w,t=new X(this.ctx),r=e.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"),a=e.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"),o=e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"),h=e.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");if(e.globals.rotateXLabels||e.config.xaxis.labels.rotateAlways)for(var c=0;c<a.length;c++){var d=t.rotateAroundCenter(a[c]);d.y=d.y-1,d.x=d.x+1,a[c].setAttribute("transform","rotate(".concat(e.config.xaxis.labels.rotate," ").concat(d.x," ").concat(d.y,")")),a[c].setAttribute("text-anchor","end"),r.setAttribute("transform","translate(0, ".concat(-10,")"));var p=a[c].childNodes;e.config.xaxis.labels.trim&&Array.prototype.forEach.call(p,function(A){t.placeTextWithEllipsis(A,A.textContent,e.globals.xAxisLabelsHeight-(e.config.legend.position==="bottom"?20:10))})}else(function(){for(var A=e.globals.gridWidth/(e.globals.labels.length+1),E=0;E<a.length;E++){var C=a[E].childNodes;e.config.xaxis.labels.trim&&e.config.xaxis.type!=="datetime"&&Array.prototype.forEach.call(C,function(L){t.placeTextWithEllipsis(L,L.textContent,A)})}})();if(o.length>0){var x=o[o.length-1].getBBox(),m=o[0].getBBox();x.x<-20&&o[o.length-1].parentNode.removeChild(o[o.length-1]),m.x+m.width>e.globals.gridWidth&&!e.globals.isBarHorizontal&&o[0].parentNode.removeChild(o[0]);for(var y=0;y<h.length;y++)t.placeTextWithEllipsis(h[y],h[y].textContent,e.config.yaxis[0].labels.maxWidth-2*parseFloat(e.config.yaxis[0].title.style.fontSize)-20)}}}]),_}(),W=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w;var t=this.w;this.xaxisLabels=t.globals.labels.slice(),this.axesUtils=new De(e),this.isRangeBar=t.globals.seriesRangeBar.length,t.globals.timescaleLabels.length>0&&(this.xaxisLabels=t.globals.timescaleLabels.slice())}return b(_,[{key:"drawGridArea",value:function(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null,t=this.w,r=new X(this.ctx);e===null&&(e=r.group({class:"apexcharts-grid"}));var a=r.drawLine(t.globals.padHorizontal,1,t.globals.padHorizontal,t.globals.gridHeight,"transparent"),o=r.drawLine(t.globals.padHorizontal,t.globals.gridHeight,t.globals.gridWidth,t.globals.gridHeight,"transparent");return e.add(o),e.add(a),e}},{key:"drawGrid",value:function(){var e=null;return this.w.globals.axisCharts&&(e=this.renderGrid(),this.drawGridArea(e.el)),e}},{key:"createGridMask",value:function(){var e=this.w,t=e.globals,r=new X(this.ctx),a=Array.isArray(e.config.stroke.width)?0:e.config.stroke.width;if(Array.isArray(e.config.stroke.width)){var o=0;e.config.stroke.width.forEach(function(m){o=Math.max(o,m)}),a=o}t.dom.elGridRectMask=document.createElementNS(t.SVGNS,"clipPath"),t.dom.elGridRectMask.setAttribute("id","gridRectMask".concat(t.cuid)),t.dom.elGridRectMarkerMask=document.createElementNS(t.SVGNS,"clipPath"),t.dom.elGridRectMarkerMask.setAttribute("id","gridRectMarkerMask".concat(t.cuid)),t.dom.elForecastMask=document.createElementNS(t.SVGNS,"clipPath"),t.dom.elForecastMask.setAttribute("id","forecastMask".concat(t.cuid)),t.dom.elNonForecastMask=document.createElementNS(t.SVGNS,"clipPath"),t.dom.elNonForecastMask.setAttribute("id","nonForecastMask".concat(t.cuid));var h=e.config.chart.type,c=0,d=0;(h==="bar"||h==="rangeBar"||h==="candlestick"||h==="boxPlot"||e.globals.comboBarCount>0)&&e.globals.isXNumeric&&!e.globals.isBarHorizontal&&(c=e.config.grid.padding.left,d=e.config.grid.padding.right,t.barPadForNumericAxis>c&&(c=t.barPadForNumericAxis,d=t.barPadForNumericAxis)),t.dom.elGridRect=r.drawRect(-a/2-c-2,-a/2,t.gridWidth+a+d+c+4,t.gridHeight+a,0,"#fff");var p=e.globals.markers.largestSize+1;t.dom.elGridRectMarker=r.drawRect(2*-p,2*-p,t.gridWidth+4*p,t.gridHeight+4*p,0,"#fff"),t.dom.elGridRectMask.appendChild(t.dom.elGridRect.node),t.dom.elGridRectMarkerMask.appendChild(t.dom.elGridRectMarker.node);var x=t.dom.baseEl.querySelector("defs");x.appendChild(t.dom.elGridRectMask),x.appendChild(t.dom.elForecastMask),x.appendChild(t.dom.elNonForecastMask),x.appendChild(t.dom.elGridRectMarkerMask)}},{key:"_drawGridLines",value:function(e){var t=e.i,r=e.x1,a=e.y1,o=e.x2,h=e.y2,c=e.xCount,d=e.parent,p=this.w;if(!(t===0&&p.globals.skipFirstTimelinelabel||t===c-1&&p.globals.skipLastTimelinelabel&&!p.config.xaxis.labels.formatter||p.config.chart.type==="radar")){p.config.grid.xaxis.lines.show&&this._drawGridLine({x1:r,y1:a,x2:o,y2:h,parent:d});var x=0;if(p.globals.hasGroups&&(p.config.xaxis.tickAmount===void 0||p.config.xaxis.tickAmount==="dataPoints")&&p.config.xaxis.tickPlacement==="between"){var m=p.globals.groups;if(m){for(var y=0,A=0;y<t&&A<m.length;A++)y+=m[A].cols;y===t&&(x=.6*p.globals.xAxisLabelsHeight)}}new Le(this.ctx).drawXaxisTicks(r,x,this.elg)}}},{key:"_drawGridLine",value:function(e){var t=e.x1,r=e.y1,a=e.x2,o=e.y2,h=e.parent,c=this.w,d=h.node.classList.contains("apexcharts-gridlines-horizontal"),p=c.config.grid.strokeDashArray,x=c.globals.barPadForNumericAxis,m=new X(this).drawLine(t-(d?x:0),r,a+(d?x:0),o,c.config.grid.borderColor,p);m.node.classList.add("apexcharts-gridline"),h.add(m)}},{key:"_drawGridBandRect",value:function(e){var t=e.c,r=e.x1,a=e.y1,o=e.x2,h=e.y2,c=e.type,d=this.w,p=new X(this.ctx),x=d.globals.barPadForNumericAxis;if(c!=="column"||d.config.xaxis.type!=="datetime"){var m=d.config.grid[c].colors[t],y=p.drawRect(r-(c==="row"?x:0),a,o+(c==="row"?2*x:0),h,0,m,d.config.grid[c].opacity);this.elg.add(y),y.attr("clip-path","url(#gridRectMask".concat(d.globals.cuid,")")),y.node.classList.add("apexcharts-grid-".concat(c))}}},{key:"_drawXYLines",value:function(e){var t=this,r=e.xCount,a=e.tickAmount,o=this.w;if(o.config.grid.xaxis.lines.show||o.config.xaxis.axisTicks.show){var h,c=o.globals.padHorizontal,d=o.globals.gridHeight;o.globals.timescaleLabels.length?function(E){for(var C=E.xC,L=E.x1,R=E.y1,F=E.x2,D=E.y2,g=0;g<C;g++)L=t.xaxisLabels[g].position,F=t.xaxisLabels[g].position,t._drawGridLines({i:g,x1:L,y1:R,x2:F,y2:D,xCount:r,parent:t.elgridLinesV})}({xC:r,x1:c,y1:0,x2:h,y2:d}):(o.globals.isXNumeric&&(r=o.globals.xAxisScale.result.length),o.config.xaxis.convertedCatToNumeric&&(r=o.globals.xaxisLabelsCount),function(E){var C=E.xC,L=E.x1,R=E.y1,F=E.x2,D=E.y2;if(o.config.xaxis.tickAmount!==void 0&&o.config.xaxis.tickAmount!=="dataPoints")o.globals.dom.baseEl.querySelectorAll(".apexcharts-text.apexcharts-xaxis-label tspan:not(:empty)").forEach(function(w,T){var M=w.getBBox();t._drawGridLines({i:T,x1:M.x+M.width/2,y1:R,x2:M.x+M.width/2,y2:D,xCount:r,parent:t.elgridLinesV})});else for(var g=0;g<C+(o.globals.isXNumeric?0:1);g++)g===0&&C===1&&o.globals.dataPoints===1&&(F=L=o.globals.gridWidth/2),t._drawGridLines({i:g,x1:L,y1:R,x2:F,y2:D,xCount:r,parent:t.elgridLinesV}),F=L+=o.globals.gridWidth/(o.globals.isXNumeric?C-1:C)}({xC:r,x1:c,y1:0,x2:h,y2:d}))}if(o.config.grid.yaxis.lines.show){var p=0,x=0,m=o.globals.gridWidth,y=a+1;this.isRangeBar&&(y=o.globals.labels.length);for(var A=0;A<y+(this.isRangeBar?1:0);A++)this._drawGridLine({x1:0,y1:p,x2:m,y2:x,parent:this.elgridLinesH}),x=p+=o.globals.gridHeight/(this.isRangeBar?y:a)}}},{key:"_drawInvertedXYLines",value:function(e){var t=e.xCount,r=this.w;if(r.config.grid.xaxis.lines.show||r.config.xaxis.axisTicks.show)for(var a,o=r.globals.padHorizontal,h=r.globals.gridHeight,c=0;c<t+1;c++)r.config.grid.xaxis.lines.show&&this._drawGridLine({x1:o,y1:0,x2:a,y2:h,parent:this.elgridLinesV}),new Le(this.ctx).drawXaxisTicks(o,0,this.elg),a=o=o+r.globals.gridWidth/t+.3;if(r.config.grid.yaxis.lines.show)for(var d=0,p=0,x=r.globals.gridWidth,m=0;m<r.globals.dataPoints+1;m++)this._drawGridLine({x1:0,y1:d,x2:x,y2:p,parent:this.elgridLinesH}),p=d+=r.globals.gridHeight/r.globals.dataPoints}},{key:"renderGrid",value:function(){var e=this.w,t=new X(this.ctx);this.elg=t.group({class:"apexcharts-grid"}),this.elgridLinesH=t.group({class:"apexcharts-gridlines-horizontal"}),this.elgridLinesV=t.group({class:"apexcharts-gridlines-vertical"}),this.elg.add(this.elgridLinesH),this.elg.add(this.elgridLinesV),e.config.grid.show||(this.elgridLinesV.hide(),this.elgridLinesH.hide());for(var r,a=e.globals.yAxisScale.length?e.globals.yAxisScale[0].result.length-1:5,o=0;o<e.globals.series.length&&(e.globals.yAxisScale[o]!==void 0&&(a=e.globals.yAxisScale[o].result.length-1),!(a>2));o++);return!e.globals.isBarHorizontal||this.isRangeBar?(r=this.xaxisLabels.length,this.isRangeBar&&(a=e.globals.labels.length,e.config.xaxis.tickAmount&&e.config.xaxis.labels.formatter&&(r=e.config.xaxis.tickAmount)),this._drawXYLines({xCount:r,tickAmount:a})):(r=a,a=e.globals.xTickAmount,this._drawInvertedXYLines({xCount:r,tickAmount:a})),this.drawGridBands(r,a),{el:this.elg,xAxisTickWidth:e.globals.gridWidth/r}}},{key:"drawGridBands",value:function(e,t){var r=this.w;if(r.config.grid.row.colors!==void 0&&r.config.grid.row.colors.length>0)for(var a=0,o=r.globals.gridHeight/t,h=r.globals.gridWidth,c=0,d=0;c<t;c++,d++)d>=r.config.grid.row.colors.length&&(d=0),this._drawGridBandRect({c:d,x1:0,y1:a,x2:h,y2:o,type:"row"}),a+=r.globals.gridHeight/t;if(r.config.grid.column.colors!==void 0&&r.config.grid.column.colors.length>0)for(var p=r.globals.isBarHorizontal||r.config.xaxis.type!=="category"&&!r.config.xaxis.convertedCatToNumeric?e:e-1,x=r.globals.padHorizontal,m=r.globals.padHorizontal+r.globals.gridWidth/p,y=r.globals.gridHeight,A=0,E=0;A<e;A++,E++)E>=r.config.grid.column.colors.length&&(E=0),this._drawGridBandRect({c:E,x1:x,y1:0,x2:m,y2:y,type:"column"}),x+=r.globals.gridWidth/p}}]),_}(),$=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"niceScale",value:function(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:10,a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,o=arguments.length>4?arguments[4]:void 0,h=this.w,c=Math.abs(t-e);if((r=this._adjustTicksForSmallRange(r,a,c))==="dataPoints"&&(r=h.globals.dataPoints-1),e===Number.MIN_VALUE&&t===0||!P.isNumber(e)&&!P.isNumber(t)||e===Number.MIN_VALUE&&t===-Number.MAX_VALUE){e=0,t=r;var d=this.linearScale(e,t,r);return d}e>t?(console.warn("axis.min cannot be greater than axis.max"),t=e+.1):e===t&&(e=e===0?0:e-.5,t=t===0?2:t+.5);var p=[];c<1&&o&&(h.config.chart.type==="candlestick"||h.config.series[a].type==="candlestick"||h.config.chart.type==="boxPlot"||h.config.series[a].type==="boxPlot"||h.globals.isRangeData)&&(t*=1.01);var x=r+1;x<2?x=2:x>2&&(x-=2);var m=c/x,y=Math.floor(P.log10(m)),A=Math.pow(10,y),E=Math.round(m/A);E<1&&(E=1);var C=E*A,L=C*Math.floor(e/C),R=C*Math.ceil(t/C),F=L;if(o&&c>2){for(;p.push(F),!((F+=C)>R););return{result:p,niceMin:p[0],niceMax:p[p.length-1]}}var D=e;(p=[]).push(D);for(var g=Math.abs(t-e)/r,w=0;w<=r;w++)D+=g,p.push(D);return p[p.length-2]>=t&&p.pop(),{result:p,niceMin:p[0],niceMax:p[p.length-1]}}},{key:"linearScale",value:function(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:10,a=arguments.length>3?arguments[3]:void 0,o=Math.abs(t-e);(r=this._adjustTicksForSmallRange(r,a,o))==="dataPoints"&&(r=this.w.globals.dataPoints-1);var h=o/r;r===Number.MAX_VALUE&&(r=10,h=1);for(var c=[],d=e;r>=0;)c.push(d),d+=h,r-=1;return{result:c,niceMin:c[0],niceMax:c[c.length-1]}}},{key:"logarithmicScale",value:function(e,t,r){for(var a=[],o=Math.ceil(Math.log(t)/Math.log(r))+1,h=0;h<o;h++)a.push(Math.pow(r,h));return e===0&&a.unshift(e),{result:a,niceMin:a[0],niceMax:a[a.length-1]}}},{key:"_adjustTicksForSmallRange",value:function(e,t,r){var a=e;if(t!==void 0&&this.w.config.yaxis[t].labels.formatter&&this.w.config.yaxis[t].tickAmount===void 0){var o=this.w.config.yaxis[t].labels.formatter(1);P.isNumber(Number(o))&&!P.isFloat(o)&&(a=Math.ceil(r))}return a<e?a:e}},{key:"setYScaleForIndex",value:function(e,t,r){var a=this.w.globals,o=this.w.config,h=a.isBarHorizontal?o.xaxis:o.yaxis[e];a.yAxisScale[e]===void 0&&(a.yAxisScale[e]=[]);var c=Math.abs(r-t);if(h.logarithmic&&c<=5&&(a.invalidLogScale=!0),h.logarithmic&&c>5)a.allSeriesCollapsed=!1,a.yAxisScale[e]=this.logarithmicScale(t,r,h.logBase);else if(r!==-Number.MAX_VALUE&&P.isNumber(r))if(a.allSeriesCollapsed=!1,h.min===void 0&&h.max===void 0||h.forceNiceScale){var d=o.yaxis[e].max===void 0&&o.yaxis[e].min===void 0||o.yaxis[e].forceNiceScale;a.yAxisScale[e]=this.niceScale(t,r,h.tickAmount?h.tickAmount:c<5&&c>1?c+1:5,e,d)}else a.yAxisScale[e]=this.linearScale(t,r,h.tickAmount,e);else a.yAxisScale[e]=this.linearScale(0,5,5)}},{key:"setXScale",value:function(e,t){var r=this.w,a=r.globals,o=r.config.xaxis,h=Math.abs(t-e);return t!==-Number.MAX_VALUE&&P.isNumber(t)?a.xAxisScale=this.linearScale(e,t,o.tickAmount?o.tickAmount:h<5&&h>1?h+1:5,0):a.xAxisScale=this.linearScale(0,5,5),a.xAxisScale}},{key:"setMultipleYScales",value:function(){var e=this,t=this.w.globals,r=this.w.config,a=t.minYArr.concat([]),o=t.maxYArr.concat([]),h=[];r.yaxis.forEach(function(c,d){var p=d;r.series.forEach(function(y,A){y.name===c.seriesName&&(p=A,d!==A?h.push({index:A,similarIndex:d,alreadyExists:!0}):h.push({index:A}))});var x=a[p],m=o[p];e.setYScaleForIndex(d,x,m)}),this.sameScaleInMultipleAxes(a,o,h)}},{key:"sameScaleInMultipleAxes",value:function(e,t,r){var a=this,o=this.w.config,h=this.w.globals,c=[];r.forEach(function(C){C.alreadyExists&&(c[C.index]===void 0&&(c[C.index]=[]),c[C.index].push(C.index),c[C.index].push(C.similarIndex))}),h.yAxisSameScaleIndices=c,c.forEach(function(C,L){c.forEach(function(R,F){var D,g;L!==F&&(D=C,g=R,D.filter(function(w){return g.indexOf(w)!==-1})).length>0&&(c[L]=c[L].concat(c[F]))})});var d=c.map(function(C){return C.filter(function(L,R){return C.indexOf(L)===R})}).map(function(C){return C.sort()});c=c.filter(function(C){return!!C});var p=d.slice(),x=p.map(function(C){return JSON.stringify(C)});p=p.filter(function(C,L){return x.indexOf(JSON.stringify(C))===L});var m=[],y=[];e.forEach(function(C,L){p.forEach(function(R,F){R.indexOf(L)>-1&&(m[F]===void 0&&(m[F]=[],y[F]=[]),m[F].push({key:L,value:C}),y[F].push({key:L,value:t[L]}))})});var A=Array.apply(null,Array(p.length)).map(Number.prototype.valueOf,Number.MIN_VALUE),E=Array.apply(null,Array(p.length)).map(Number.prototype.valueOf,-Number.MAX_VALUE);m.forEach(function(C,L){C.forEach(function(R,F){A[L]=Math.min(R.value,A[L])})}),y.forEach(function(C,L){C.forEach(function(R,F){E[L]=Math.max(R.value,E[L])})}),e.forEach(function(C,L){y.forEach(function(R,F){var D=A[F],g=E[F];o.chart.stacked&&(g=0,R.forEach(function(w,T){w.value!==-Number.MAX_VALUE&&(g+=w.value),D!==Number.MIN_VALUE&&(D+=m[F][T].value)})),R.forEach(function(w,T){R[T].key===L&&(o.yaxis[L].min!==void 0&&(D=typeof o.yaxis[L].min=="function"?o.yaxis[L].min(h.minY):o.yaxis[L].min),o.yaxis[L].max!==void 0&&(g=typeof o.yaxis[L].max=="function"?o.yaxis[L].max(h.maxY):o.yaxis[L].max),a.setYScaleForIndex(L,D,g))})})})}},{key:"autoScaleY",value:function(e,t,r){e||(e=this);var a=e.w;if(a.globals.isMultipleYAxis||a.globals.collapsedSeries.length)return console.warn("autoScaleYaxis is not supported in a multi-yaxis chart."),t;var o=a.globals.seriesX[0],h=a.config.chart.stacked;return t.forEach(function(c,d){for(var p=0,x=0;x<o.length;x++)if(o[x]>=r.xaxis.min){p=x;break}var m,y,A=a.globals.minYArr[d],E=a.globals.maxYArr[d],C=a.globals.stackedSeriesTotals;a.globals.series.forEach(function(L,R){var F=L[p];h?(F=C[p],m=y=F,C.forEach(function(D,g){o[g]<=r.xaxis.max&&o[g]>=r.xaxis.min&&(D>y&&D!==null&&(y=D),L[g]<m&&L[g]!==null&&(m=L[g]))})):(m=y=F,L.forEach(function(D,g){if(o[g]<=r.xaxis.max&&o[g]>=r.xaxis.min){var w=D,T=D;a.globals.series.forEach(function(M,V){D!==null&&(w=Math.min(M[g],w),T=Math.max(M[g],T))}),T>y&&T!==null&&(y=T),w<m&&w!==null&&(m=w)}})),m===void 0&&y===void 0&&(m=A,y=E),(y*=y<0?.9:1.1)<0&&y<E&&(y=E),(m*=m<0?1.1:.9)<0&&m>A&&(m=A),t.length>1?(t[R].min=c.min===void 0?m:c.min,t[R].max=c.max===void 0?y:c.max):(t[0].min=c.min===void 0?m:c.min,t[0].max=c.max===void 0?y:c.max)})}),t}}]),_}(),ee=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.scales=new $(e)}return b(_,[{key:"init",value:function(){this.setYRange(),this.setXRange(),this.setZRange()}},{key:"getMinYMaxY",value:function(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Number.MAX_VALUE,r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:-Number.MAX_VALUE,a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:null,o=this.w.config,h=this.w.globals,c=-Number.MAX_VALUE,d=Number.MIN_VALUE;a===null&&(a=e+1);var p=h.series,x=p,m=p;o.chart.type==="candlestick"?(x=h.seriesCandleL,m=h.seriesCandleH):o.chart.type==="boxPlot"?(x=h.seriesCandleO,m=h.seriesCandleC):h.isRangeData&&(x=h.seriesRangeStart,m=h.seriesRangeEnd);for(var y=e;y<a;y++){h.dataPoints=Math.max(h.dataPoints,p[y].length),h.categoryLabels.length&&(h.dataPoints=h.categoryLabels.filter(function(C){return C!==void 0}).length);for(var A=0;A<h.series[y].length;A++){var E=p[y][A];E!==null&&P.isNumber(E)?(m[y][A]!==void 0&&(c=Math.max(c,m[y][A]),t=Math.min(t,m[y][A])),x[y][A]!==void 0&&(t=Math.min(t,x[y][A]),r=Math.max(r,x[y][A])),this.w.config.chart.type!=="candlestick"&&this.w.config.chart.type!=="boxPlot"||(h.seriesCandleC[y][A]!==void 0&&(c=Math.max(c,h.seriesCandleO[y][A]),c=Math.max(c,h.seriesCandleH[y][A]),c=Math.max(c,h.seriesCandleL[y][A]),c=Math.max(c,h.seriesCandleC[y][A]),this.w.config.chart.type==="boxPlot"&&(c=Math.max(c,h.seriesCandleM[y][A]))),!o.series[y].type||o.series[y].type==="candlestick"&&o.series[y].type==="boxPlot"||(c=Math.max(c,h.series[y][A]),t=Math.min(t,h.series[y][A])),r=c),h.seriesGoals[y]&&h.seriesGoals[y][A]&&Array.isArray(h.seriesGoals[y][A])&&h.seriesGoals[y][A].forEach(function(C){d!==Number.MIN_VALUE&&(d=Math.min(d,C.value),t=d),c=Math.max(c,C.value),r=c}),P.isFloat(E)&&(E=P.noExponents(E),h.yValueDecimal=Math.max(h.yValueDecimal,E.toString().split(".")[1].length)),d>x[y][A]&&x[y][A]<0&&(d=x[y][A])):h.hasNullValues=!0}}return o.chart.type==="rangeBar"&&h.seriesRangeStart.length&&h.isBarHorizontal&&(d=t),o.chart.type==="bar"&&(d<0&&c<0&&(c=0),d===Number.MIN_VALUE&&(d=0)),{minY:d,maxY:c,lowestY:t,highestY:r}}},{key:"setYRange",value:function(){var e=this.w.globals,t=this.w.config;e.maxY=-Number.MAX_VALUE,e.minY=Number.MIN_VALUE;var r=Number.MAX_VALUE;if(e.isMultipleYAxis)for(var a=0;a<e.series.length;a++){var o=this.getMinYMaxY(a,r,null,a+1);e.minYArr.push(o.minY),e.maxYArr.push(o.maxY),r=o.lowestY}var h=this.getMinYMaxY(0,r,null,e.series.length);if(e.minY=h.minY,e.maxY=h.maxY,r=h.lowestY,t.chart.stacked&&this._setStackedMinMax(),(t.chart.type==="line"||t.chart.type==="area"||t.chart.type==="candlestick"||t.chart.type==="boxPlot"||t.chart.type==="rangeBar"&&!e.isBarHorizontal)&&e.minY===Number.MIN_VALUE&&r!==-Number.MAX_VALUE&&r!==e.maxY){var c=e.maxY-r;(r>=0&&r<=10||t.yaxis[0].min!==void 0||t.yaxis[0].max!==void 0)&&(c=0),e.minY=r-5*c/100,r>0&&e.minY<0&&(e.minY=0),e.maxY=e.maxY+5*c/100}return t.yaxis.forEach(function(d,p){d.max!==void 0&&(typeof d.max=="number"?e.maxYArr[p]=d.max:typeof d.max=="function"&&(e.maxYArr[p]=d.max(e.isMultipleYAxis?e.maxYArr[p]:e.maxY)),e.maxY=e.maxYArr[p]),d.min!==void 0&&(typeof d.min=="number"?e.minYArr[p]=d.min:typeof d.min=="function"&&(e.minYArr[p]=d.min(e.isMultipleYAxis?e.minYArr[p]===Number.MIN_VALUE?0:e.minYArr[p]:e.minY)),e.minY=e.minYArr[p])}),e.isBarHorizontal&&["min","max"].forEach(function(d){t.xaxis[d]!==void 0&&typeof t.xaxis[d]=="number"&&(d==="min"?e.minY=t.xaxis[d]:e.maxY=t.xaxis[d])}),e.isMultipleYAxis?(this.scales.setMultipleYScales(),e.minY=r,e.yAxisScale.forEach(function(d,p){e.minYArr[p]=d.niceMin,e.maxYArr[p]=d.niceMax})):(this.scales.setYScaleForIndex(0,e.minY,e.maxY),e.minY=e.yAxisScale[0].niceMin,e.maxY=e.yAxisScale[0].niceMax,e.minYArr[0]=e.yAxisScale[0].niceMin,e.maxYArr[0]=e.yAxisScale[0].niceMax),{minY:e.minY,maxY:e.maxY,minYArr:e.minYArr,maxYArr:e.maxYArr,yAxisScale:e.yAxisScale}}},{key:"setXRange",value:function(){var e=this.w.globals,t=this.w.config,r=t.xaxis.type==="numeric"||t.xaxis.type==="datetime"||t.xaxis.type==="category"&&!e.noLabelsProvided||e.noLabelsProvided||e.isXNumeric;if(e.isXNumeric&&function(){for(var c=0;c<e.series.length;c++)if(e.labels[c])for(var d=0;d<e.labels[c].length;d++)e.labels[c][d]!==null&&P.isNumber(e.labels[c][d])&&(e.maxX=Math.max(e.maxX,e.labels[c][d]),e.initialMaxX=Math.max(e.maxX,e.labels[c][d]),e.minX=Math.min(e.minX,e.labels[c][d]),e.initialMinX=Math.min(e.minX,e.labels[c][d]))}(),e.noLabelsProvided&&t.xaxis.categories.length===0&&(e.maxX=e.labels[e.labels.length-1],e.initialMaxX=e.labels[e.labels.length-1],e.minX=1,e.initialMinX=1),e.isXNumeric||e.noLabelsProvided||e.dataFormatXNumeric){var a;if(t.xaxis.tickAmount===void 0?(a=Math.round(e.svgWidth/150),t.xaxis.type==="numeric"&&e.dataPoints<30&&(a=e.dataPoints-1),a>e.dataPoints&&e.dataPoints!==0&&(a=e.dataPoints-1)):t.xaxis.tickAmount==="dataPoints"?(e.series.length>1&&(a=e.series[e.maxValsInArrayIndex].length-1),e.isXNumeric&&(a=e.maxX-e.minX-1)):a=t.xaxis.tickAmount,e.xTickAmount=a,t.xaxis.max!==void 0&&typeof t.xaxis.max=="number"&&(e.maxX=t.xaxis.max),t.xaxis.min!==void 0&&typeof t.xaxis.min=="number"&&(e.minX=t.xaxis.min),t.xaxis.range!==void 0&&(e.minX=e.maxX-t.xaxis.range),e.minX!==Number.MAX_VALUE&&e.maxX!==-Number.MAX_VALUE)if(t.xaxis.convertedCatToNumeric&&!e.dataFormatXNumeric){for(var o=[],h=e.minX-1;h<e.maxX;h++)o.push(h+1);e.xAxisScale={result:o,niceMin:o[0],niceMax:o[o.length-1]}}else e.xAxisScale=this.scales.setXScale(e.minX,e.maxX);else e.xAxisScale=this.scales.linearScale(1,a,a),e.noLabelsProvided&&e.labels.length>0&&(e.xAxisScale=this.scales.linearScale(1,e.labels.length,a-1),e.seriesX=e.labels.slice());r&&(e.labels=e.xAxisScale.result.slice())}return e.isBarHorizontal&&e.labels.length&&(e.xTickAmount=e.labels.length),this._handleSingleDataPoint(),this._getMinXDiff(),{minX:e.minX,maxX:e.maxX}}},{key:"setZRange",value:function(){var e=this.w.globals;if(e.isDataXYZ){for(var t=0;t<e.series.length;t++)if(e.seriesZ[t]!==void 0)for(var r=0;r<e.seriesZ[t].length;r++)e.seriesZ[t][r]!==null&&P.isNumber(e.seriesZ[t][r])&&(e.maxZ=Math.max(e.maxZ,e.seriesZ[t][r]),e.minZ=Math.min(e.minZ,e.seriesZ[t][r]))}}},{key:"_handleSingleDataPoint",value:function(){var e=this.w.globals,t=this.w.config;if(e.minX===e.maxX){var r=new je(this.ctx);if(t.xaxis.type==="datetime"){var a=r.getDate(e.minX);t.xaxis.labels.datetimeUTC?a.setUTCDate(a.getUTCDate()-2):a.setDate(a.getDate()-2),e.minX=new Date(a).getTime();var o=r.getDate(e.maxX);t.xaxis.labels.datetimeUTC?o.setUTCDate(o.getUTCDate()+2):o.setDate(o.getDate()+2),e.maxX=new Date(o).getTime()}else(t.xaxis.type==="numeric"||t.xaxis.type==="category"&&!e.noLabelsProvided)&&(e.minX=e.minX-2,e.initialMinX=e.minX,e.maxX=e.maxX+2,e.initialMaxX=e.maxX)}}},{key:"_getMinXDiff",value:function(){var e=this.w.globals;e.isXNumeric&&e.seriesX.forEach(function(t,r){t.length===1&&t.push(e.seriesX[e.maxValsInArrayIndex][e.seriesX[e.maxValsInArrayIndex].length-1]);var a=t.slice();a.sort(function(o,h){return o-h}),a.forEach(function(o,h){if(h>0){var c=o-a[h-1];c>0&&(e.minXDiff=Math.min(c,e.minXDiff))}}),e.dataPoints!==1&&e.minXDiff!==Number.MAX_VALUE||(e.minXDiff=.5)})}},{key:"_setStackedMinMax",value:function(){var e=this.w.globals,t=[],r=[];if(e.series.length)for(var a=0;a<e.series[e.maxValsInArrayIndex].length;a++)for(var o=0,h=0,c=0;c<e.series.length;c++)e.series[c][a]!==null&&P.isNumber(e.series[c][a])&&(e.series[c][a]>0?o=o+parseFloat(e.series[c][a])+1e-4:h+=parseFloat(e.series[c][a])),c===e.series.length-1&&(t.push(o),r.push(h));for(var d=0;d<t.length;d++)e.maxY=Math.max(e.maxY,t[d]),e.minY=Math.min(e.minY,r[d])}}]),_}(),ae=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w;var t=this.w;this.xaxisFontSize=t.config.xaxis.labels.style.fontSize,this.axisFontFamily=t.config.xaxis.labels.style.fontFamily,this.xaxisForeColors=t.config.xaxis.labels.style.colors,this.isCategoryBarHorizontal=t.config.chart.type==="bar"&&t.config.plotOptions.bar.horizontal,this.xAxisoffX=0,t.config.xaxis.position==="bottom"&&(this.xAxisoffX=t.globals.gridHeight),this.drawnLabels=[],this.axesUtils=new De(e)}return b(_,[{key:"drawYaxis",value:function(e){var t=this,r=this.w,a=new X(this.ctx),o=r.config.yaxis[e].labels.style,h=o.fontSize,c=o.fontFamily,d=o.fontWeight,p=a.group({class:"apexcharts-yaxis",rel:e,transform:"translate("+r.globals.translateYAxisX[e]+", 0)"});if(this.axesUtils.isYAxisHidden(e))return p;var x=a.group({class:"apexcharts-yaxis-texts-g"});p.add(x);var m=r.globals.yAxisScale[e].result.length-1,y=r.globals.gridHeight/m,A=r.globals.translateY,E=r.globals.yLabelFormatters[e],C=r.globals.yAxisScale[e].result.slice();C=this.axesUtils.checkForReversedLabels(e,C);var L="";if(r.config.yaxis[e].labels.show)for(var R=function(J){var G=C[J];G=E(G,J,r);var oe=r.config.yaxis[e].labels.padding;r.config.yaxis[e].opposite&&r.config.yaxis.length!==0&&(oe*=-1);var re=t.axesUtils.getYAxisForeColor(o.colors,e),ge=a.drawText({x:oe,y:A+m/10+r.config.yaxis[e].labels.offsetY+1,text:G,textAnchor:r.config.yaxis[e].opposite?"start":"end",fontSize:h,fontFamily:c,fontWeight:d,foreColor:Array.isArray(re)?re[J]:re,isPlainText:!1,cssClass:"apexcharts-yaxis-label "+o.cssClass});J===m&&(L=ge),x.add(ge);var Pe=document.createElementNS(r.globals.SVGNS,"title");if(Pe.textContent=Array.isArray(G)?G.join(" "):G,ge.node.appendChild(Pe),r.config.yaxis[e].labels.rotate!==0){var et=a.rotateAroundCenter(L.node),We=a.rotateAroundCenter(ge.node);ge.node.setAttribute("transform","rotate(".concat(r.config.yaxis[e].labels.rotate," ").concat(et.x," ").concat(We.y,")"))}A+=y},F=m;F>=0;F--)R(F);if(r.config.yaxis[e].title.text!==void 0){var D=a.group({class:"apexcharts-yaxis-title"}),g=0;r.config.yaxis[e].opposite&&(g=r.globals.translateYAxisX[e]);var w=a.drawText({x:g,y:r.globals.gridHeight/2+r.globals.translateY+r.config.yaxis[e].title.offsetY,text:r.config.yaxis[e].title.text,textAnchor:"end",foreColor:r.config.yaxis[e].title.style.color,fontSize:r.config.yaxis[e].title.style.fontSize,fontWeight:r.config.yaxis[e].title.style.fontWeight,fontFamily:r.config.yaxis[e].title.style.fontFamily,cssClass:"apexcharts-yaxis-title-text "+r.config.yaxis[e].title.style.cssClass});D.add(w),p.add(D)}var T=r.config.yaxis[e].axisBorder,M=31+T.offsetX;if(r.config.yaxis[e].opposite&&(M=-31-T.offsetX),T.show){var V=a.drawLine(M,r.globals.translateY+T.offsetY-2,M,r.globals.gridHeight+r.globals.translateY+T.offsetY+2,T.color,0,T.width);p.add(V)}return r.config.yaxis[e].axisTicks.show&&this.axesUtils.drawYAxisTicks(M,m,T,r.config.yaxis[e].axisTicks,e,y,p),p}},{key:"drawYaxisInversed",value:function(e){var t=this.w,r=new X(this.ctx),a=r.group({class:"apexcharts-xaxis apexcharts-yaxis-inversed"}),o=r.group({class:"apexcharts-xaxis-texts-g",transform:"translate(".concat(t.globals.translateXAxisX,", ").concat(t.globals.translateXAxisY,")")});a.add(o);var h=t.globals.yAxisScale[e].result.length-1,c=t.globals.gridWidth/h+.1,d=c+t.config.xaxis.labels.offsetX,p=t.globals.xLabelFormatter,x=t.globals.yAxisScale[e].result.slice(),m=t.globals.timescaleLabels;m.length>0&&(this.xaxisLabels=m.slice(),h=(x=m.slice()).length),x=this.axesUtils.checkForReversedLabels(e,x);var y=m.length;if(t.config.xaxis.labels.show)for(var A=y?0:h;y?A<y:A>=0;y?A++:A--){var E=x[A];E=p(E,A,t);var C=t.globals.gridWidth+t.globals.padHorizontal-(d-c+t.config.xaxis.labels.offsetX);if(m.length){var L=this.axesUtils.getLabel(x,m,C,A,this.drawnLabels,this.xaxisFontSize);C=L.x,E=L.text,this.drawnLabels.push(L.text),A===0&&t.globals.skipFirstTimelinelabel&&(E=""),A===x.length-1&&t.globals.skipLastTimelinelabel&&(E="")}var R=r.drawText({x:C,y:this.xAxisoffX+t.config.xaxis.labels.offsetY+30-(t.config.xaxis.position==="top"?t.globals.xAxisHeight+t.config.xaxis.axisTicks.height-2:0),text:E,textAnchor:"middle",foreColor:Array.isArray(this.xaxisForeColors)?this.xaxisForeColors[e]:this.xaxisForeColors,fontSize:this.xaxisFontSize,fontFamily:this.xaxisFontFamily,fontWeight:t.config.xaxis.labels.style.fontWeight,isPlainText:!1,cssClass:"apexcharts-xaxis-label "+t.config.xaxis.labels.style.cssClass});o.add(R),R.tspan(E);var F=document.createElementNS(t.globals.SVGNS,"title");F.textContent=E,R.node.appendChild(F),d+=c}return this.inversedYAxisTitleText(a),this.inversedYAxisBorder(a),a}},{key:"inversedYAxisBorder",value:function(e){var t=this.w,r=new X(this.ctx),a=t.config.xaxis.axisBorder;if(a.show){var o=0;t.config.chart.type==="bar"&&t.globals.isXNumeric&&(o-=15);var h=r.drawLine(t.globals.padHorizontal+o+a.offsetX,this.xAxisoffX,t.globals.gridWidth,this.xAxisoffX,a.color,0,a.height);e.add(h)}}},{key:"inversedYAxisTitleText",value:function(e){var t=this.w,r=new X(this.ctx);if(t.config.xaxis.title.text!==void 0){var a=r.group({class:"apexcharts-xaxis-title apexcharts-yaxis-title-inversed"}),o=r.drawText({x:t.globals.gridWidth/2+t.config.xaxis.title.offsetX,y:this.xAxisoffX+parseFloat(this.xaxisFontSize)+parseFloat(t.config.xaxis.title.style.fontSize)+t.config.xaxis.title.offsetY+20,text:t.config.xaxis.title.text,textAnchor:"middle",fontSize:t.config.xaxis.title.style.fontSize,fontFamily:t.config.xaxis.title.style.fontFamily,fontWeight:t.config.xaxis.title.style.fontWeight,foreColor:t.config.xaxis.title.style.color,cssClass:"apexcharts-xaxis-title-text "+t.config.xaxis.title.style.cssClass});a.add(o),e.add(a)}}},{key:"yAxisTitleRotate",value:function(e,t){var r=this.w,a=new X(this.ctx),o={width:0,height:0},h={width:0,height:0},c=r.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(e,"'] .apexcharts-yaxis-texts-g"));c!==null&&(o=c.getBoundingClientRect());var d=r.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(e,"'] .apexcharts-yaxis-title text"));if(d!==null&&(h=d.getBoundingClientRect()),d!==null){var p=this.xPaddingForYAxisTitle(e,o,h,t);d.setAttribute("x",p.xPos-(t?10:0))}if(d!==null){var x=a.rotateAroundCenter(d);d.setAttribute("transform","rotate(".concat(t?-1*r.config.yaxis[e].title.rotate:r.config.yaxis[e].title.rotate," ").concat(x.x," ").concat(x.y,")"))}}},{key:"xPaddingForYAxisTitle",value:function(e,t,r,a){var o=this.w,h=0,c=0,d=10;return o.config.yaxis[e].title.text===void 0||e<0?{xPos:c,padd:0}:(a?(c=t.width+o.config.yaxis[e].title.offsetX+r.width/2+d/2,(h+=1)===0&&(c-=d/2)):(c=-1*t.width+o.config.yaxis[e].title.offsetX+d/2+r.width/2,o.globals.isBarHorizontal&&(d=25,c=-1*t.width-o.config.yaxis[e].title.offsetX-d)),{xPos:c,padd:d})}},{key:"setYAxisXPosition",value:function(e,t){var r=this.w,a=0,o=0,h=18,c=1;r.config.yaxis.length>1&&(this.multipleYs=!0),r.config.yaxis.map(function(d,p){var x=r.globals.ignoreYAxisIndexes.indexOf(p)>-1||!d.show||d.floating||e[p].width===0,m=e[p].width+t[p].width;d.opposite?r.globals.isBarHorizontal?(o=r.globals.gridWidth+r.globals.translateX-1,r.globals.translateYAxisX[p]=o-d.labels.offsetX):(o=r.globals.gridWidth+r.globals.translateX+c,x||(c=c+m+20),r.globals.translateYAxisX[p]=o-d.labels.offsetX+20):(a=r.globals.translateX-h,x||(h=h+m+20),r.globals.translateYAxisX[p]=a+d.labels.offsetX)})}},{key:"setYAxisTextAlignments",value:function(){var e=this.w,t=e.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");(t=P.listToArray(t)).forEach(function(r,a){var o=e.config.yaxis[a];if(o&&o.labels.align!==void 0){var h=e.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(a,"'] .apexcharts-yaxis-texts-g")),c=e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(a,"'] .apexcharts-yaxis-label"));c=P.listToArray(c);var d=h.getBoundingClientRect();o.labels.align==="left"?(c.forEach(function(p,x){p.setAttribute("text-anchor","start")}),o.opposite||h.setAttribute("transform","translate(-".concat(d.width,", 0)"))):o.labels.align==="center"?(c.forEach(function(p,x){p.setAttribute("text-anchor","middle")}),h.setAttribute("transform","translate(".concat(d.width/2*(o.opposite?1:-1),", 0)"))):o.labels.align==="right"&&(c.forEach(function(p,x){p.setAttribute("text-anchor","end")}),o.opposite&&h.setAttribute("transform","translate(".concat(d.width,", 0)")))}})}}]),_}(),se=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.documentEvent=P.bind(this.documentEvent,this)}return b(_,[{key:"addEventListener",value:function(e,t){var r=this.w;r.globals.events.hasOwnProperty(e)?r.globals.events[e].push(t):r.globals.events[e]=[t]}},{key:"removeEventListener",value:function(e,t){var r=this.w;if(r.globals.events.hasOwnProperty(e)){var a=r.globals.events[e].indexOf(t);a!==-1&&r.globals.events[e].splice(a,1)}}},{key:"fireEvent",value:function(e,t){var r=this.w;if(r.globals.events.hasOwnProperty(e)){t&&t.length||(t=[]);for(var a=r.globals.events[e],o=a.length,h=0;h<o;h++)a[h].apply(null,t)}}},{key:"setupEventHandlers",value:function(){var e=this,t=this.w,r=this.ctx,a=t.globals.dom.baseEl.querySelector(t.globals.chartClass);this.ctx.eventList.forEach(function(o){a.addEventListener(o,function(h){var c=Object.assign({},t,{seriesIndex:t.globals.capturedSeriesIndex,dataPointIndex:t.globals.capturedDataPointIndex});h.type==="mousemove"||h.type==="touchmove"?typeof t.config.chart.events.mouseMove=="function"&&t.config.chart.events.mouseMove(h,r,c):h.type==="mouseleave"||h.type==="touchleave"?typeof t.config.chart.events.mouseLeave=="function"&&t.config.chart.events.mouseLeave(h,r,c):(h.type==="mouseup"&&h.which===1||h.type==="touchend")&&(typeof t.config.chart.events.click=="function"&&t.config.chart.events.click(h,r,c),r.ctx.events.fireEvent("click",[h,r,c]))},{capture:!1,passive:!0})}),this.ctx.eventList.forEach(function(o){t.globals.dom.baseEl.addEventListener(o,e.documentEvent,{passive:!0})}),this.ctx.core.setupBrushHandler()}},{key:"documentEvent",value:function(e){var t=this.w,r=e.target.className;if(e.type==="click"){var a=t.globals.dom.baseEl.querySelector(".apexcharts-menu");a&&a.classList.contains("apexcharts-menu-open")&&r!=="apexcharts-menu-icon"&&a.classList.remove("apexcharts-menu-open")}t.globals.clientX=e.type==="touchmove"?e.touches[0].clientX:e.clientX,t.globals.clientY=e.type==="touchmove"?e.touches[0].clientY:e.clientY}}]),_}(),xe=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"setCurrentLocaleValues",value:function(e){var t=this.w.config.chart.locales;window.Apex.chart&&window.Apex.chart.locales&&window.Apex.chart.locales.length>0&&(t=this.w.config.chart.locales.concat(window.Apex.chart.locales));var r=t.filter(function(o){return o.name===e})[0];if(!r)throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");var a=P.extend(ve,r);this.w.globals.locale=a.options}}]),_}(),ye=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"drawAxis",value:function(e,t){var r,a,o=this.w.globals,h=this.w.config,c=new Le(this.ctx),d=new ae(this.ctx);o.axisCharts&&e!=="radar"&&(o.isBarHorizontal?(a=d.drawYaxisInversed(0),r=c.drawXaxisInversed(0),o.dom.elGraphical.add(r),o.dom.elGraphical.add(a)):(r=c.drawXaxis(),o.dom.elGraphical.add(r),h.yaxis.map(function(p,x){o.ignoreYAxisIndexes.indexOf(x)===-1&&(a=d.drawYaxis(x),o.dom.Paper.add(a))})))}}]),_}(),fe=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"drawXCrosshairs",value:function(){var e=this.w,t=new X(this.ctx),r=new H(this.ctx),a=e.config.xaxis.crosshairs.fill.gradient,o=e.config.xaxis.crosshairs.dropShadow,h=e.config.xaxis.crosshairs.fill.type,c=a.colorFrom,d=a.colorTo,p=a.opacityFrom,x=a.opacityTo,m=a.stops,y=o.enabled,A=o.left,E=o.top,C=o.blur,L=o.color,R=o.opacity,F=e.config.xaxis.crosshairs.fill.color;if(e.config.xaxis.crosshairs.show){h==="gradient"&&(F=t.drawGradient("vertical",c,d,p,x,null,m,null));var D=t.drawRect();e.config.xaxis.crosshairs.width===1&&(D=t.drawLine());var g=e.globals.gridHeight;(!P.isNumber(g)||g<0)&&(g=0);var w=e.config.xaxis.crosshairs.width;(!P.isNumber(w)||w<0)&&(w=0),D.attr({class:"apexcharts-xcrosshairs",x:0,y:0,y2:g,width:w,height:g,fill:F,filter:"none","fill-opacity":e.config.xaxis.crosshairs.opacity,stroke:e.config.xaxis.crosshairs.stroke.color,"stroke-width":e.config.xaxis.crosshairs.stroke.width,"stroke-dasharray":e.config.xaxis.crosshairs.stroke.dashArray}),y&&(D=r.dropShadow(D,{left:A,top:E,blur:C,color:L,opacity:R})),e.globals.dom.elGraphical.add(D)}}},{key:"drawYCrosshairs",value:function(){var e=this.w,t=new X(this.ctx),r=e.config.yaxis[0].crosshairs,a=e.globals.barPadForNumericAxis;if(e.config.yaxis[0].crosshairs.show){var o=t.drawLine(-a,0,e.globals.gridWidth+a,0,r.stroke.color,r.stroke.dashArray,r.stroke.width);o.attr({class:"apexcharts-ycrosshairs"}),e.globals.dom.elGraphical.add(o)}var h=t.drawLine(-a,0,e.globals.gridWidth+a,0,r.stroke.color,0,0);h.attr({class:"apexcharts-ycrosshairs-hidden"}),e.globals.dom.elGraphical.add(h)}}]),_}(),me=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"checkResponsiveConfig",value:function(e){var t=this,r=this.w,a=r.config;if(a.responsive.length!==0){var o=a.responsive.slice();o.sort(function(p,x){return p.breakpoint>x.breakpoint?1:x.breakpoint>p.breakpoint?-1:0}).reverse();var h=new Q({}),c=function(){var p=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},x=o[0].breakpoint,m=window.innerWidth>0?window.innerWidth:screen.width;if(m>x){var y=Z.extendArrayProps(h,r.globals.initialConfig,r);p=P.extend(y,p),p=P.extend(r.config,p),t.overrideResponsiveOptions(p)}else for(var A=0;A<o.length;A++)m<o[A].breakpoint&&(p=Z.extendArrayProps(h,o[A].options,r),p=P.extend(r.config,p),t.overrideResponsiveOptions(p))};if(e){var d=Z.extendArrayProps(h,e,r);d=P.extend(r.config,d),c(d=P.extend(d,e))}else c({})}}},{key:"overrideResponsiveOptions",value:function(e){var t=new Q(e).init({responsiveOverride:!0});this.w.config=t}}]),_}(),ce=function(){function _(e){f(this,_),this.ctx=e,this.colors=[],this.w=e.w;var t=this.w;this.isColorFn=!1,this.isHeatmapDistributed=t.config.chart.type==="treemap"&&t.config.plotOptions.treemap.distributed||t.config.chart.type==="heatmap"&&t.config.plotOptions.heatmap.distributed,this.isBarDistributed=t.config.plotOptions.bar.distributed&&(t.config.chart.type==="bar"||t.config.chart.type==="rangeBar")}return b(_,[{key:"init",value:function(){this.setDefaultColors()}},{key:"setDefaultColors",value:function(){var e=this,t=this.w,r=new P;if(t.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(t.config.theme.mode)),t.config.colors===void 0?t.globals.colors=this.predefined():(t.globals.colors=t.config.colors,Array.isArray(t.config.colors)&&t.config.colors.length>0&&typeof t.config.colors[0]=="function"&&(t.globals.colors=t.config.series.map(function(A,E){var C=t.config.colors[E];return C||(C=t.config.colors[0]),typeof C=="function"?(e.isColorFn=!0,C({value:t.globals.axisCharts?t.globals.series[E][0]?t.globals.series[E][0]:0:t.globals.series[E],seriesIndex:E,dataPointIndex:E,w:t})):C}))),t.globals.seriesColors.map(function(A,E){A&&(t.globals.colors[E]=A)}),t.config.theme.monochrome.enabled){var a=[],o=t.globals.series.length;(this.isBarDistributed||this.isHeatmapDistributed)&&(o=t.globals.series[0].length*t.globals.series.length);for(var h=t.config.theme.monochrome.color,c=1/(o/t.config.theme.monochrome.shadeIntensity),d=t.config.theme.monochrome.shadeTo,p=0,x=0;x<o;x++){var m=void 0;d==="dark"?(m=r.shadeColor(-1*p,h),p+=c):(m=r.shadeColor(p,h),p+=c),a.push(m)}t.globals.colors=a.slice()}var y=t.globals.colors.slice();this.pushExtraColors(t.globals.colors),["fill","stroke"].forEach(function(A){t.config[A].colors===void 0?t.globals[A].colors=e.isColorFn?t.config.colors:y:t.globals[A].colors=t.config[A].colors.slice(),e.pushExtraColors(t.globals[A].colors)}),t.config.dataLabels.style.colors===void 0?t.globals.dataLabels.style.colors=y:t.globals.dataLabels.style.colors=t.config.dataLabels.style.colors.slice(),this.pushExtraColors(t.globals.dataLabels.style.colors,50),t.config.plotOptions.radar.polygons.fill.colors===void 0?t.globals.radarPolygons.fill.colors=[t.config.theme.mode==="dark"?"#424242":"none"]:t.globals.radarPolygons.fill.colors=t.config.plotOptions.radar.polygons.fill.colors.slice(),this.pushExtraColors(t.globals.radarPolygons.fill.colors,20),t.config.markers.colors===void 0?t.globals.markers.colors=y:t.globals.markers.colors=t.config.markers.colors.slice(),this.pushExtraColors(t.globals.markers.colors)}},{key:"pushExtraColors",value:function(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null,a=this.w,o=t||a.globals.series.length;if(r===null&&(r=this.isBarDistributed||this.isHeatmapDistributed||a.config.chart.type==="heatmap"&&a.config.plotOptions.heatmap.colorScale.inverse),r&&a.globals.series.length&&(o=a.globals.series[a.globals.maxValsInArrayIndex].length*a.globals.series.length),e.length<o)for(var h=o-e.length,c=0;c<h;c++)e.push(e[c])}},{key:"updateThemeOptions",value:function(e){e.chart=e.chart||{},e.tooltip=e.tooltip||{};var t=e.theme.mode||"light",r=e.theme.palette?e.theme.palette:t==="dark"?"palette4":"palette1",a=e.chart.foreColor?e.chart.foreColor:t==="dark"?"#f6f7f8":"#373d3f";return e.tooltip.theme=t,e.chart.foreColor=a,e.theme.palette=r,e}},{key:"predefined",value:function(){switch(this.w.config.theme.palette){case"palette1":this.colors=["#008FFB","#00E396","#FEB019","#FF4560","#775DD0"];break;case"palette2":this.colors=["#3f51b5","#03a9f4","#4caf50","#f9ce1d","#FF9800"];break;case"palette3":this.colors=["#33b2df","#546E7A","#d4526e","#13d8aa","#A5978B"];break;case"palette4":this.colors=["#4ecdc4","#c7f464","#81D4FA","#fd6a6a","#546E7A"];break;case"palette5":this.colors=["#2b908f","#f9a3a4","#90ee7e","#fa4443","#69d2e7"];break;case"palette6":this.colors=["#449DD1","#F86624","#EA3546","#662E9B","#C5D86D"];break;case"palette7":this.colors=["#D7263D","#1B998B","#2E294E","#F46036","#E2C044"];break;case"palette8":this.colors=["#662E9B","#F86624","#F9C80E","#EA3546","#43BCCD"];break;case"palette9":this.colors=["#5C4742","#A5978B","#8D5B4C","#5A2A27","#C4BBAF"];break;case"palette10":this.colors=["#A300D6","#7D02EB","#5653FE","#2983FF","#00B1F2"];break;default:this.colors=["#008FFB","#00E396","#FEB019","#FF4560","#775DD0"]}return this.colors}}]),_}(),Ee=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"draw",value:function(){this.drawTitleSubtitle("title"),this.drawTitleSubtitle("subtitle")}},{key:"drawTitleSubtitle",value:function(e){var t=this.w,r=e==="title"?t.config.title:t.config.subtitle,a=t.globals.svgWidth/2,o=r.offsetY,h="middle";if(r.align==="left"?(a=10,h="start"):r.align==="right"&&(a=t.globals.svgWidth-10,h="end"),a+=r.offsetX,o=o+parseInt(r.style.fontSize,10)+r.margin/2,r.text!==void 0){var c=new X(this.ctx).drawText({x:a,y:o,text:r.text,textAnchor:h,fontSize:r.style.fontSize,fontFamily:r.style.fontFamily,fontWeight:r.style.fontWeight,foreColor:r.style.color,opacity:1});c.node.setAttribute("class","apexcharts-".concat(e,"-text")),t.globals.dom.Paper.add(c)}}}]),_}(),Se=function(){function _(e){f(this,_),this.w=e.w,this.dCtx=e}return b(_,[{key:"getTitleSubtitleCoords",value:function(e){var t=this.w,r=0,a=0,o=e==="title"?t.config.title.floating:t.config.subtitle.floating,h=t.globals.dom.baseEl.querySelector(".apexcharts-".concat(e,"-text"));if(h!==null&&!o){var c=h.getBoundingClientRect();r=c.width,a=t.globals.axisCharts?c.height+5:c.height}return{width:r,height:a}}},{key:"getLegendsRect",value:function(){var e=this.w,t=e.globals.dom.baseEl.querySelector(".apexcharts-legend");e.config.legend.height||e.config.legend.position!=="top"&&e.config.legend.position!=="bottom"||(t.style.maxHeight=e.globals.svgHeight/2+"px");var r=Object.assign({},P.getBoundingClientRect(t));return t!==null&&!e.config.legend.floating&&e.config.legend.show?this.dCtx.lgRect={x:r.x,y:r.y,height:r.height,width:r.height===0?0:r.width}:this.dCtx.lgRect={x:0,y:0,height:0,width:0},e.config.legend.position!=="left"&&e.config.legend.position!=="right"||1.5*this.dCtx.lgRect.width>e.globals.svgWidth&&(this.dCtx.lgRect.width=e.globals.svgWidth/1.5),this.dCtx.lgRect}},{key:"getLargestStringFromMultiArr",value:function(e,t){var r=e;if(this.w.globals.isMultiLineX){var a=t.map(function(h,c){return Array.isArray(h)?h.length:1}),o=Math.max.apply(Math,K(a));r=t[a.indexOf(o)]}return r}}]),_}(),Te=function(){function _(e){f(this,_),this.w=e.w,this.dCtx=e}return b(_,[{key:"getxAxisLabelsCoords",value:function(){var e,t=this.w,r=t.globals.labels.slice();if(t.config.xaxis.convertedCatToNumeric&&r.length===0&&(r=t.globals.categoryLabels),t.globals.timescaleLabels.length>0){var a=this.getxAxisTimeScaleLabelsCoords();e={width:a.width,height:a.height},t.globals.rotateXLabels=!1}else{this.dCtx.lgWidthForSideLegends=t.config.legend.position!=="left"&&t.config.legend.position!=="right"||t.config.legend.floating?0:this.dCtx.lgRect.width;var o=t.globals.xLabelFormatter,h=P.getLargestStringFromArr(r),c=this.dCtx.dimHelpers.getLargestStringFromMultiArr(h,r);t.globals.isBarHorizontal&&(c=h=t.globals.yAxisScale[0].result.reduce(function(E,C){return E.length>C.length?E:C},0));var d=new ze(this.dCtx.ctx),p=h;h=d.xLabelFormat(o,h,p,{i:void 0,dateFormatter:new je(this.dCtx.ctx).formatDate,w:t}),c=d.xLabelFormat(o,c,p,{i:void 0,dateFormatter:new je(this.dCtx.ctx).formatDate,w:t}),(t.config.xaxis.convertedCatToNumeric&&h===void 0||String(h).trim()==="")&&(c=h="1");var x=new X(this.dCtx.ctx),m=x.getTextRects(h,t.config.xaxis.labels.style.fontSize),y=m;if(h!==c&&(y=x.getTextRects(c,t.config.xaxis.labels.style.fontSize)),(e={width:m.width>=y.width?m.width:y.width,height:m.height>=y.height?m.height:y.height}).width*r.length>t.globals.svgWidth-this.dCtx.lgWidthForSideLegends-this.dCtx.yAxisWidth-this.dCtx.gridPad.left-this.dCtx.gridPad.right&&t.config.xaxis.labels.rotate!==0||t.config.xaxis.labels.rotateAlways){if(!t.globals.isBarHorizontal){t.globals.rotateXLabels=!0;var A=function(E){return x.getTextRects(E,t.config.xaxis.labels.style.fontSize,t.config.xaxis.labels.style.fontFamily,"rotate(".concat(t.config.xaxis.labels.rotate," 0 0)"),!1)};m=A(h),h!==c&&(y=A(c)),e.height=(m.height>y.height?m.height:y.height)/1.5,e.width=m.width>y.width?m.width:y.width}}else t.globals.rotateXLabels=!1}return t.config.xaxis.labels.show||(e={width:0,height:0}),{width:e.width,height:e.height}}},{key:"getxAxisGroupLabelsCoords",value:function(){var e,t=this.w;if(!t.globals.hasGroups)return{width:0,height:0};var r,a=((e=t.config.xaxis.group.style)===null||e===void 0?void 0:e.fontSize)||t.config.xaxis.labels.style.fontSize,o=t.globals.groups.map(function(m){return m.title}),h=P.getLargestStringFromArr(o),c=this.dCtx.dimHelpers.getLargestStringFromMultiArr(h,o),d=new X(this.dCtx.ctx),p=d.getTextRects(h,a),x=p;return h!==c&&(x=d.getTextRects(c,a)),r={width:p.width>=x.width?p.width:x.width,height:p.height>=x.height?p.height:x.height},t.config.xaxis.labels.show||(r={width:0,height:0}),{width:r.width,height:r.height}}},{key:"getxAxisTitleCoords",value:function(){var e=this.w,t=0,r=0;if(e.config.xaxis.title.text!==void 0){var a=new X(this.dCtx.ctx).getTextRects(e.config.xaxis.title.text,e.config.xaxis.title.style.fontSize);t=a.width,r=a.height}return{width:t,height:r}}},{key:"getxAxisTimeScaleLabelsCoords",value:function(){var e,t=this.w;this.dCtx.timescaleLabels=t.globals.timescaleLabels.slice();var r=this.dCtx.timescaleLabels.map(function(o){return o.value}),a=r.reduce(function(o,h){return o===void 0?(console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"),0):o.length>h.length?o:h},0);return 1.05*(e=new X(this.dCtx.ctx).getTextRects(a,t.config.xaxis.labels.style.fontSize)).width*r.length>t.globals.gridWidth&&t.config.xaxis.labels.rotate!==0&&(t.globals.overlappingXLabels=!0),e}},{key:"additionalPaddingXLabels",value:function(e){var t=this,r=this.w,a=r.globals,o=r.config,h=o.xaxis.type,c=e.width;a.skipLastTimelinelabel=!1,a.skipFirstTimelinelabel=!1;var d=r.config.yaxis[0].opposite&&r.globals.isBarHorizontal,p=function(x,m){(function(y){return a.collapsedSeriesIndices.indexOf(y)!==-1})(m)||function(y){if(t.dCtx.timescaleLabels&&t.dCtx.timescaleLabels.length){var A=t.dCtx.timescaleLabels[0],E=t.dCtx.timescaleLabels[t.dCtx.timescaleLabels.length-1].position+c/1.75-t.dCtx.yAxisWidthRight,C=A.position-c/1.75+t.dCtx.yAxisWidthLeft,L=r.config.legend.position==="right"&&t.dCtx.lgRect.width>0?t.dCtx.lgRect.width:0;E>a.svgWidth-a.translateX-L&&(a.skipLastTimelinelabel=!0),C<-(y.show&&!y.floating||o.chart.type!=="bar"&&o.chart.type!=="candlestick"&&o.chart.type!=="rangeBar"&&o.chart.type!=="boxPlot"?10:c/1.75)&&(a.skipFirstTimelinelabel=!0)}else h==="datetime"?t.dCtx.gridPad.right<c&&!a.rotateXLabels&&(a.skipLastTimelinelabel=!0):h!=="datetime"&&t.dCtx.gridPad.right<c/2-t.dCtx.yAxisWidthRight&&!a.rotateXLabels&&!r.config.xaxis.labels.trim&&(r.config.xaxis.tickPlacement!=="between"||r.globals.isBarHorizontal)&&(t.dCtx.xPadRight=c/2+1)}(x)};o.yaxis.forEach(function(x,m){d?(t.dCtx.gridPad.left<c&&(t.dCtx.xPadLeft=c/2+1),t.dCtx.xPadRight=c/2+1):p(x,m)})}}]),_}(),_e=function(){function _(e){f(this,_),this.w=e.w,this.dCtx=e}return b(_,[{key:"getyAxisLabelsCoords",value:function(){var e=this,t=this.w,r=[],a=10,o=new De(this.dCtx.ctx);return t.config.yaxis.map(function(h,c){var d=t.globals.yAxisScale[c],p=0;if(!o.isYAxisHidden(c)&&h.labels.show&&h.labels.minWidth!==void 0&&(p=h.labels.minWidth),!o.isYAxisHidden(c)&&h.labels.show&&d.result.length){var x=t.globals.yLabelFormatters[c],m=d.niceMin===Number.MIN_VALUE?0:d.niceMin,y=String(m).length>String(d.niceMax).length?m:d.niceMax,A=x(y,{seriesIndex:c,dataPointIndex:-1,w:t}),E=A;if(A!==void 0&&A.length!==0||(A=y),t.globals.isBarHorizontal){a=0;var C=t.globals.labels.slice();A=x(A=P.getLargestStringFromArr(C),{seriesIndex:c,dataPointIndex:-1,w:t}),E=e.dCtx.dimHelpers.getLargestStringFromMultiArr(A,C)}var L=new X(e.dCtx.ctx),R="rotate(".concat(h.labels.rotate," 0 0)"),F=L.getTextRects(A,h.labels.style.fontSize,h.labels.style.fontFamily,R,!1),D=F;A!==E&&(D=L.getTextRects(E,h.labels.style.fontSize,h.labels.style.fontFamily,R,!1)),r.push({width:(p>D.width||p>F.width?p:D.width>F.width?D.width:F.width)+a,height:D.height>F.height?D.height:F.height})}else r.push({width:0,height:0})}),r}},{key:"getyAxisTitleCoords",value:function(){var e=this,t=this.w,r=[];return t.config.yaxis.map(function(a,o){if(a.show&&a.title.text!==void 0){var h=new X(e.dCtx.ctx),c="rotate(".concat(a.title.rotate," 0 0)"),d=h.getTextRects(a.title.text,a.title.style.fontSize,a.title.style.fontFamily,c,!1);r.push({width:d.width,height:d.height})}else r.push({width:0,height:0})}),r}},{key:"getTotalYAxisWidth",value:function(){var e=this.w,t=0,r=0,a=0,o=e.globals.yAxisScale.length>1?10:0,h=new De(this.dCtx.ctx),c=function(d,p){var x=e.config.yaxis[p].floating,m=0;d.width>0&&!x?(m=d.width+o,function(y){return e.globals.ignoreYAxisIndexes.indexOf(y)>-1}(p)&&(m=m-d.width-o)):m=x||h.isYAxisHidden(p)?0:5,e.config.yaxis[p].opposite?a+=m:r+=m,t+=m};return e.globals.yLabelsCoords.map(function(d,p){c(d,p)}),e.globals.yTitleCoords.map(function(d,p){c(d,p)}),e.globals.isBarHorizontal&&!e.config.yaxis[0].floating&&(t=e.globals.yLabelsCoords[0].width+e.globals.yTitleCoords[0].width+15),this.dCtx.yAxisWidthLeft=r,this.dCtx.yAxisWidthRight=a,t}}]),_}(),He=function(){function _(e){f(this,_),this.w=e.w,this.dCtx=e}return b(_,[{key:"gridPadForColumnsInNumericAxis",value:function(e){var t=this.w;if(t.globals.noData||t.globals.allSeriesCollapsed)return 0;var r=function(x){return x==="bar"||x==="rangeBar"||x==="candlestick"||x==="boxPlot"},a=t.config.chart.type,o=0,h=r(a)?t.config.series.length:1;if(t.globals.comboBarCount>0&&(h=t.globals.comboBarCount),t.globals.collapsedSeries.forEach(function(x){r(x.type)&&(h-=1)}),t.config.chart.stacked&&(h=1),(r(a)||t.globals.comboBarCount>0)&&t.globals.isXNumeric&&!t.globals.isBarHorizontal&&h>0){var c,d,p=Math.abs(t.globals.initialMaxX-t.globals.initialMinX);p<=3&&(p=t.globals.dataPoints),c=p/e,t.globals.minXDiff&&t.globals.minXDiff/c>0&&(d=t.globals.minXDiff/c),d>e/2&&(d/=2),(o=d/h*parseInt(t.config.plotOptions.bar.columnWidth,10)/100)<1&&(o=1),o=o/(h>1?1:1.5)+5,t.globals.barPadForNumericAxis=o}return o}},{key:"gridPadFortitleSubtitle",value:function(){var e=this,t=this.w,r=t.globals,a=this.dCtx.isSparkline||!t.globals.axisCharts?0:10;["title","subtitle"].forEach(function(c){t.config[c].text!==void 0?a+=t.config[c].margin:a+=e.dCtx.isSparkline||!t.globals.axisCharts?0:5}),!t.config.legend.show||t.config.legend.position!=="bottom"||t.config.legend.floating||t.globals.axisCharts||(a+=10);var o=this.dCtx.dimHelpers.getTitleSubtitleCoords("title"),h=this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");r.gridHeight=r.gridHeight-o.height-h.height-a,r.translateY=r.translateY+o.height+h.height+a}},{key:"setGridXPosForDualYAxis",value:function(e,t){var r=this.w,a=new De(this.dCtx.ctx);r.config.yaxis.map(function(o,h){r.globals.ignoreYAxisIndexes.indexOf(h)!==-1||o.floating||a.isYAxisHidden(h)||(o.opposite&&(r.globals.translateX=r.globals.translateX-(t[h].width+e[h].width)-parseInt(r.config.yaxis[h].labels.style.fontSize,10)/1.2-12),r.globals.translateX<2&&(r.globals.translateX=2))})}}]),_}(),qe=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.lgRect={},this.yAxisWidth=0,this.yAxisWidthLeft=0,this.yAxisWidthRight=0,this.xAxisHeight=0,this.isSparkline=this.w.config.chart.sparkline.enabled,this.dimHelpers=new Se(this),this.dimYAxis=new _e(this),this.dimXAxis=new Te(this),this.dimGrid=new He(this),this.lgWidthForSideLegends=0,this.gridPad=this.w.config.grid.padding,this.xPadRight=0,this.xPadLeft=0}return b(_,[{key:"plotCoords",value:function(){var e=this,t=this.w,r=t.globals;this.lgRect=this.dimHelpers.getLegendsRect(),this.isSparkline&&(t.config.markers.discrete.length>0||t.config.markers.size>0)&&Object.entries(this.gridPad).forEach(function(o){var h=j(o,2),c=h[0],d=h[1];e.gridPad[c]=Math.max(d,e.w.globals.markers.largestSize/1.5)}),r.axisCharts?this.setDimensionsForAxisCharts():this.setDimensionsForNonAxisCharts(),this.dimGrid.gridPadFortitleSubtitle(),r.gridHeight=r.gridHeight-this.gridPad.top-this.gridPad.bottom,r.gridWidth=r.gridWidth-this.gridPad.left-this.gridPad.right-this.xPadRight-this.xPadLeft;var a=this.dimGrid.gridPadForColumnsInNumericAxis(r.gridWidth);r.gridWidth=r.gridWidth-2*a,r.translateX=r.translateX+this.gridPad.left+this.xPadLeft+(a>0?a+4:0),r.translateY=r.translateY+this.gridPad.top}},{key:"setDimensionsForAxisCharts",value:function(){var e=this,t=this.w,r=t.globals,a=this.dimYAxis.getyAxisLabelsCoords(),o=this.dimYAxis.getyAxisTitleCoords();t.globals.yLabelsCoords=[],t.globals.yTitleCoords=[],t.config.yaxis.map(function(A,E){t.globals.yLabelsCoords.push({width:a[E].width,index:E}),t.globals.yTitleCoords.push({width:o[E].width,index:E})}),this.yAxisWidth=this.dimYAxis.getTotalYAxisWidth();var h=this.dimXAxis.getxAxisLabelsCoords(),c=this.dimXAxis.getxAxisGroupLabelsCoords(),d=this.dimXAxis.getxAxisTitleCoords();this.conditionalChecksForAxisCoords(h,d,c),r.translateXAxisY=t.globals.rotateXLabels?this.xAxisHeight/8:-4,r.translateXAxisX=t.globals.rotateXLabels&&t.globals.isXNumeric&&t.config.xaxis.labels.rotate<=-45?-this.xAxisWidth/4:0,t.globals.isBarHorizontal&&(r.rotateXLabels=!1,r.translateXAxisY=parseInt(t.config.xaxis.labels.style.fontSize,10)/1.5*-1),r.translateXAxisY=r.translateXAxisY+t.config.xaxis.labels.offsetY,r.translateXAxisX=r.translateXAxisX+t.config.xaxis.labels.offsetX;var p=this.yAxisWidth,x=this.xAxisHeight;r.xAxisLabelsHeight=this.xAxisHeight-d.height,r.xAxisGroupLabelsHeight=r.xAxisLabelsHeight-h.height,r.xAxisLabelsWidth=this.xAxisWidth,r.xAxisHeight=this.xAxisHeight;var m=10;(t.config.chart.type==="radar"||this.isSparkline)&&(p=0,x=r.goldenPadding),this.isSparkline&&(this.lgRect={height:0,width:0}),(this.isSparkline||t.config.chart.type==="treemap")&&(p=0,x=0,m=0),this.isSparkline||this.dimXAxis.additionalPaddingXLabels(h);var y=function(){r.translateX=p,r.gridHeight=r.svgHeight-e.lgRect.height-x-(e.isSparkline||t.config.chart.type==="treemap"?0:t.globals.rotateXLabels?10:15),r.gridWidth=r.svgWidth-p};switch(t.config.xaxis.position==="top"&&(m=r.xAxisHeight-t.config.xaxis.axisTicks.height-5),t.config.legend.position){case"bottom":r.translateY=m,y();break;case"top":r.translateY=this.lgRect.height+m,y();break;case"left":r.translateY=m,r.translateX=this.lgRect.width+p,r.gridHeight=r.svgHeight-x-12,r.gridWidth=r.svgWidth-this.lgRect.width-p;break;case"right":r.translateY=m,r.translateX=p,r.gridHeight=r.svgHeight-x-12,r.gridWidth=r.svgWidth-this.lgRect.width-p-5;break;default:throw new Error("Legend position not supported")}this.dimGrid.setGridXPosForDualYAxis(o,a),new ae(this.ctx).setYAxisXPosition(a,o)}},{key:"setDimensionsForNonAxisCharts",value:function(){var e=this.w,t=e.globals,r=e.config,a=0;e.config.legend.show&&!e.config.legend.floating&&(a=20);var o=r.chart.type==="pie"||r.chart.type==="polarArea"||r.chart.type==="donut"?"pie":"radialBar",h=r.plotOptions[o].offsetY,c=r.plotOptions[o].offsetX;if(!r.legend.show||r.legend.floating)return t.gridHeight=t.svgHeight-r.grid.padding.left+r.grid.padding.right,t.gridWidth=t.gridHeight,t.translateY=h,void(t.translateX=c+(t.svgWidth-t.gridWidth)/2);switch(r.legend.position){case"bottom":t.gridHeight=t.svgHeight-this.lgRect.height-t.goldenPadding,t.gridWidth=t.svgWidth,t.translateY=h-10,t.translateX=c+(t.svgWidth-t.gridWidth)/2;break;case"top":t.gridHeight=t.svgHeight-this.lgRect.height-t.goldenPadding,t.gridWidth=t.svgWidth,t.translateY=this.lgRect.height+h+10,t.translateX=c+(t.svgWidth-t.gridWidth)/2;break;case"left":t.gridWidth=t.svgWidth-this.lgRect.width-a,t.gridHeight=r.chart.height!=="auto"?t.svgHeight:t.gridWidth,t.translateY=h,t.translateX=c+this.lgRect.width+a;break;case"right":t.gridWidth=t.svgWidth-this.lgRect.width-a-5,t.gridHeight=r.chart.height!=="auto"?t.svgHeight:t.gridWidth,t.translateY=h,t.translateX=c+10;break;default:throw new Error("Legend position not supported")}}},{key:"conditionalChecksForAxisCoords",value:function(e,t,r){var a=this.w,o=a.globals.hasGroups?2:1,h=r.height+e.height+t.height,c=a.globals.isMultiLineX?1.2:a.globals.LINE_HEIGHT_RATIO,d=a.globals.rotateXLabels?22:10,p=a.globals.rotateXLabels&&a.config.legend.position==="bottom"?10:0;this.xAxisHeight=h*c+o*d+p,this.xAxisWidth=e.width,this.xAxisHeight-t.height>a.config.xaxis.labels.maxHeight&&(this.xAxisHeight=a.config.xaxis.labels.maxHeight),a.config.xaxis.labels.minHeight&&this.xAxisHeight<a.config.xaxis.labels.minHeight&&(this.xAxisHeight=a.config.xaxis.labels.minHeight),a.config.xaxis.floating&&(this.xAxisHeight=0);var x=0,m=0;a.config.yaxis.forEach(function(y){x+=y.labels.minWidth,m+=y.labels.maxWidth}),this.yAxisWidth<x&&(this.yAxisWidth=x),this.yAxisWidth>m&&(this.yAxisWidth=m)}}]),_}(),$e=function(){function _(e){f(this,_),this.w=e.w,this.lgCtx=e}return b(_,[{key:"getLegendStyles",value:function(){var e=document.createElement("style");e.setAttribute("type","text/css");var t=document.createTextNode(`	
    	
      .apexcharts-legend {	
        display: flex;	
        overflow: auto;	
        padding: 0 10px;	
      }	
      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {	
        flex-wrap: wrap	
      }	
      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {	
        flex-direction: column;	
        bottom: 0;	
      }	
      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {	
        justify-content: flex-start;	
      }	
      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {	
        justify-content: center;  	
      }	
      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {	
        justify-content: flex-end;	
      }	
      .apexcharts-legend-series {	
        cursor: pointer;	
        line-height: normal;	
      }	
      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{	
        display: flex;	
        align-items: center;	
      }	
      .apexcharts-legend-text {	
        position: relative;	
        font-size: 14px;	
      }	
      .apexcharts-legend-text *, .apexcharts-legend-marker * {	
        pointer-events: none;	
      }	
      .apexcharts-legend-marker {	
        position: relative;	
        display: inline-block;	
        cursor: pointer;	
        margin-right: 3px;	
        border-style: solid;
      }	
      	
      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{	
        display: inline-block;	
      }	
      .apexcharts-legend-series.apexcharts-no-click {	
        cursor: auto;	
      }	
      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {	
        display: none !important;	
      }	
      .apexcharts-inactive-legend {	
        opacity: 0.45;	
      }`);return e.appendChild(t),e}},{key:"getLegendBBox",value:function(){var e=this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(),t=e.width;return{clwh:e.height,clww:t}}},{key:"appendToForeignObject",value:function(){var e=this.w.globals;e.dom.elLegendForeign=document.createElementNS(e.SVGNS,"foreignObject");var t=e.dom.elLegendForeign;t.setAttribute("x",0),t.setAttribute("y",0),t.setAttribute("width",e.svgWidth),t.setAttribute("height",e.svgHeight),e.dom.elLegendWrap.setAttribute("xmlns","http://www.w3.org/1999/xhtml"),t.appendChild(e.dom.elLegendWrap),t.appendChild(this.getLegendStyles()),e.dom.Paper.node.insertBefore(t,e.dom.elGraphical.node)}},{key:"toggleDataSeries",value:function(e,t){var r=this,a=this.w;if(a.globals.axisCharts||a.config.chart.type==="radialBar"){a.globals.resized=!0;var o=null,h=null;a.globals.risingSeries=[],a.globals.axisCharts?(o=a.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e,"']")),h=parseInt(o.getAttribute("data:realIndex"),10)):(o=a.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(e+1,"']")),h=parseInt(o.getAttribute("rel"),10)-1),t?[{cs:a.globals.collapsedSeries,csi:a.globals.collapsedSeriesIndices},{cs:a.globals.ancillaryCollapsedSeries,csi:a.globals.ancillaryCollapsedSeriesIndices}].forEach(function(x){r.riseCollapsedSeries(x.cs,x.csi,h)}):this.hideSeries({seriesEl:o,realIndex:h})}else{var c=a.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(e+1,"'] path")),d=a.config.chart.type;if(d==="pie"||d==="polarArea"||d==="donut"){var p=a.config.plotOptions.pie.donut.labels;new X(this.lgCtx.ctx).pathMouseDown(c.members[0],null),this.lgCtx.ctx.pie.printDataLabelsInner(c.members[0].node,p)}c.fire("click")}}},{key:"hideSeries",value:function(e){var t=e.seriesEl,r=e.realIndex,a=this.w,o=P.clone(a.config.series);if(a.globals.axisCharts){var h=!1;if(a.config.yaxis[r]&&a.config.yaxis[r].show&&a.config.yaxis[r].showAlways&&(h=!0,a.globals.ancillaryCollapsedSeriesIndices.indexOf(r)<0&&(a.globals.ancillaryCollapsedSeries.push({index:r,data:o[r].data.slice(),type:t.parentNode.className.baseVal.split("-")[1]}),a.globals.ancillaryCollapsedSeriesIndices.push(r))),!h){a.globals.collapsedSeries.push({index:r,data:o[r].data.slice(),type:t.parentNode.className.baseVal.split("-")[1]}),a.globals.collapsedSeriesIndices.push(r);var c=a.globals.risingSeries.indexOf(r);a.globals.risingSeries.splice(c,1)}}else a.globals.collapsedSeries.push({index:r,data:o[r]}),a.globals.collapsedSeriesIndices.push(r);for(var d=t.childNodes,p=0;p<d.length;p++)d[p].classList.contains("apexcharts-series-markers-wrap")&&(d[p].classList.contains("apexcharts-hide")?d[p].classList.remove("apexcharts-hide"):d[p].classList.add("apexcharts-hide"));a.globals.allSeriesCollapsed=a.globals.collapsedSeries.length===a.config.series.length,o=this._getSeriesBasedOnCollapsedState(o),this.lgCtx.ctx.updateHelpers._updateSeries(o,a.config.chart.animations.dynamicAnimation.enabled)}},{key:"riseCollapsedSeries",value:function(e,t,r){var a=this.w,o=P.clone(a.config.series);if(e.length>0){for(var h=0;h<e.length;h++)e[h].index===r&&(a.globals.axisCharts?(o[r].data=e[h].data.slice(),e.splice(h,1),t.splice(h,1),a.globals.risingSeries.push(r)):(o[r]=e[h].data,e.splice(h,1),t.splice(h,1),a.globals.risingSeries.push(r)));o=this._getSeriesBasedOnCollapsedState(o),this.lgCtx.ctx.updateHelpers._updateSeries(o,a.config.chart.animations.dynamicAnimation.enabled)}}},{key:"_getSeriesBasedOnCollapsedState",value:function(e){var t=this.w;return t.globals.axisCharts?e.forEach(function(r,a){t.globals.collapsedSeriesIndices.indexOf(a)>-1&&(e[a].data=[])}):e.forEach(function(r,a){t.globals.collapsedSeriesIndices.indexOf(a)>-1&&(e[a]=0)}),e}}]),_}(),Ze=function(){function _(e,t){f(this,_),this.ctx=e,this.w=e.w,this.onLegendClick=this.onLegendClick.bind(this),this.onLegendHovered=this.onLegendHovered.bind(this),this.isBarsDistributed=this.w.config.chart.type==="bar"&&this.w.config.plotOptions.bar.distributed&&this.w.config.series.length===1,this.legendHelpers=new $e(this)}return b(_,[{key:"init",value:function(){var e=this.w,t=e.globals,r=e.config;if((r.legend.showForSingleSeries&&t.series.length===1||this.isBarsDistributed||t.series.length>1||!t.axisCharts)&&r.legend.show){for(;t.dom.elLegendWrap.firstChild;)t.dom.elLegendWrap.removeChild(t.dom.elLegendWrap.firstChild);this.drawLegends(),P.isIE11()?document.getElementsByTagName("head")[0].appendChild(this.legendHelpers.getLegendStyles()):this.legendHelpers.appendToForeignObject(),r.legend.position==="bottom"||r.legend.position==="top"?this.legendAlignHorizontal():r.legend.position!=="right"&&r.legend.position!=="left"||this.legendAlignVertical()}}},{key:"drawLegends",value:function(){var e=this,t=this.w,r=t.config.legend.fontFamily,a=t.globals.seriesNames,o=t.globals.colors.slice();if(t.config.chart.type==="heatmap"){var h=t.config.plotOptions.heatmap.colorScale.ranges;a=h.map(function(re){return re.name?re.name:re.from+" - "+re.to}),o=h.map(function(re){return re.color})}else this.isBarsDistributed&&(a=t.globals.labels.slice());t.config.legend.customLegendItems.length&&(a=t.config.legend.customLegendItems);for(var c=t.globals.legendFormatter,d=t.config.legend.inverseOrder,p=d?a.length-1:0;d?p>=0:p<=a.length-1;d?p--:p++){var x=c(a[p],{seriesIndex:p,w:t}),m=!1,y=!1;if(t.globals.collapsedSeries.length>0)for(var A=0;A<t.globals.collapsedSeries.length;A++)t.globals.collapsedSeries[A].index===p&&(m=!0);if(t.globals.ancillaryCollapsedSeriesIndices.length>0)for(var E=0;E<t.globals.ancillaryCollapsedSeriesIndices.length;E++)t.globals.ancillaryCollapsedSeriesIndices[E]===p&&(y=!0);var C=document.createElement("span");C.classList.add("apexcharts-legend-marker");var L=t.config.legend.markers.offsetX,R=t.config.legend.markers.offsetY,F=t.config.legend.markers.height,D=t.config.legend.markers.width,g=t.config.legend.markers.strokeWidth,w=t.config.legend.markers.strokeColor,T=t.config.legend.markers.radius,M=C.style;M.background=o[p],M.color=o[p],M.setProperty("background",o[p],"important"),t.config.legend.markers.fillColors&&t.config.legend.markers.fillColors[p]&&(M.background=t.config.legend.markers.fillColors[p]),t.globals.seriesColors[p]!==void 0&&(M.background=t.globals.seriesColors[p],M.color=t.globals.seriesColors[p]),M.height=Array.isArray(F)?parseFloat(F[p])+"px":parseFloat(F)+"px",M.width=Array.isArray(D)?parseFloat(D[p])+"px":parseFloat(D)+"px",M.left=(Array.isArray(L)?parseFloat(L[p]):parseFloat(L))+"px",M.top=(Array.isArray(R)?parseFloat(R[p]):parseFloat(R))+"px",M.borderWidth=Array.isArray(g)?g[p]:g,M.borderColor=Array.isArray(w)?w[p]:w,M.borderRadius=Array.isArray(T)?parseFloat(T[p])+"px":parseFloat(T)+"px",t.config.legend.markers.customHTML&&(Array.isArray(t.config.legend.markers.customHTML)?t.config.legend.markers.customHTML[p]&&(C.innerHTML=t.config.legend.markers.customHTML[p]()):C.innerHTML=t.config.legend.markers.customHTML()),X.setAttrs(C,{rel:p+1,"data:collapsed":m||y}),(m||y)&&C.classList.add("apexcharts-inactive-legend");var V=document.createElement("div"),J=document.createElement("span");J.classList.add("apexcharts-legend-text"),J.innerHTML=Array.isArray(x)?x.join(" "):x;var G=t.config.legend.labels.useSeriesColors?t.globals.colors[p]:t.config.legend.labels.colors;G||(G=t.config.chart.foreColor),J.style.color=G,J.style.fontSize=parseFloat(t.config.legend.fontSize)+"px",J.style.fontWeight=t.config.legend.fontWeight,J.style.fontFamily=r||t.config.chart.fontFamily,X.setAttrs(J,{rel:p+1,i:p,"data:default-text":encodeURIComponent(x),"data:collapsed":m||y}),V.appendChild(C),V.appendChild(J);var oe=new Z(this.ctx);t.config.legend.showForZeroSeries||oe.getSeriesTotalByIndex(p)===0&&oe.seriesHaveSameValues(p)&&!oe.isSeriesNull(p)&&t.globals.collapsedSeriesIndices.indexOf(p)===-1&&t.globals.ancillaryCollapsedSeriesIndices.indexOf(p)===-1&&V.classList.add("apexcharts-hidden-zero-series"),t.config.legend.showForNullSeries||oe.isSeriesNull(p)&&t.globals.collapsedSeriesIndices.indexOf(p)===-1&&t.globals.ancillaryCollapsedSeriesIndices.indexOf(p)===-1&&V.classList.add("apexcharts-hidden-null-series"),t.globals.dom.elLegendWrap.appendChild(V),t.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(t.config.legend.horizontalAlign)),t.globals.dom.elLegendWrap.classList.add("apx-legend-position-"+t.config.legend.position),V.classList.add("apexcharts-legend-series"),V.style.margin="".concat(t.config.legend.itemMargin.vertical,"px ").concat(t.config.legend.itemMargin.horizontal,"px"),t.globals.dom.elLegendWrap.style.width=t.config.legend.width?t.config.legend.width+"px":"",t.globals.dom.elLegendWrap.style.height=t.config.legend.height?t.config.legend.height+"px":"",X.setAttrs(V,{rel:p+1,seriesName:P.escapeString(a[p]),"data:collapsed":m||y}),(m||y)&&V.classList.add("apexcharts-inactive-legend"),t.config.legend.onItemClick.toggleDataSeries||V.classList.add("apexcharts-no-click")}t.globals.dom.elWrap.addEventListener("click",e.onLegendClick,!0),t.config.legend.onItemHover.highlightDataSeries&&t.config.legend.customLegendItems.length===0&&(t.globals.dom.elWrap.addEventListener("mousemove",e.onLegendHovered,!0),t.globals.dom.elWrap.addEventListener("mouseout",e.onLegendHovered,!0))}},{key:"setLegendWrapXY",value:function(e,t){var r=this.w,a=r.globals.dom.baseEl.querySelector(".apexcharts-legend"),o=a.getBoundingClientRect(),h=0,c=0;if(r.config.legend.position==="bottom")c+=r.globals.svgHeight-o.height/2;else if(r.config.legend.position==="top"){var d=new qe(this.ctx),p=d.dimHelpers.getTitleSubtitleCoords("title").height,x=d.dimHelpers.getTitleSubtitleCoords("subtitle").height;c=c+(p>0?p-10:0)+(x>0?x-10:0)}a.style.position="absolute",h=h+e+r.config.legend.offsetX,c=c+t+r.config.legend.offsetY,a.style.left=h+"px",a.style.top=c+"px",r.config.legend.position==="bottom"?(a.style.top="auto",a.style.bottom=5-r.config.legend.offsetY+"px"):r.config.legend.position==="right"&&(a.style.left="auto",a.style.right=25+r.config.legend.offsetX+"px"),["width","height"].forEach(function(m){a.style[m]&&(a.style[m]=parseInt(r.config.legend[m],10)+"px")})}},{key:"legendAlignHorizontal",value:function(){var e=this.w;e.globals.dom.baseEl.querySelector(".apexcharts-legend").style.right=0;var t=this.legendHelpers.getLegendBBox(),r=new qe(this.ctx),a=r.dimHelpers.getTitleSubtitleCoords("title"),o=r.dimHelpers.getTitleSubtitleCoords("subtitle"),h=0;e.config.legend.position==="bottom"?h=-t.clwh/1.8:e.config.legend.position==="top"&&(h=a.height+o.height+e.config.title.margin+e.config.subtitle.margin-10),this.setLegendWrapXY(20,h)}},{key:"legendAlignVertical",value:function(){var e=this.w,t=this.legendHelpers.getLegendBBox(),r=0;e.config.legend.position==="left"&&(r=20),e.config.legend.position==="right"&&(r=e.globals.svgWidth-t.clww-10),this.setLegendWrapXY(r,20)}},{key:"onLegendHovered",value:function(e){var t=this.w,r=e.target.classList.contains("apexcharts-legend-text")||e.target.classList.contains("apexcharts-legend-marker");if(t.config.chart.type==="heatmap"||this.isBarsDistributed){if(r){var a=parseInt(e.target.getAttribute("rel"),10)-1;this.ctx.events.fireEvent("legendHover",[this.ctx,a,this.w]),new Be(this.ctx).highlightRangeInSeries(e,e.target)}}else!e.target.classList.contains("apexcharts-inactive-legend")&&r&&new Be(this.ctx).toggleSeriesOnHover(e,e.target)}},{key:"onLegendClick",value:function(e){var t=this.w;if(!t.config.legend.customLegendItems.length&&(e.target.classList.contains("apexcharts-legend-text")||e.target.classList.contains("apexcharts-legend-marker"))){var r=parseInt(e.target.getAttribute("rel"),10)-1,a=e.target.getAttribute("data:collapsed")==="true",o=this.w.config.chart.events.legendClick;typeof o=="function"&&o(this.ctx,r,this.w),this.ctx.events.fireEvent("legendClick",[this.ctx,r,this.w]);var h=this.w.config.legend.markers.onClick;typeof h=="function"&&e.target.classList.contains("apexcharts-legend-marker")&&(h(this.ctx,r,this.w),this.ctx.events.fireEvent("legendMarkerClick",[this.ctx,r,this.w])),t.config.chart.type!=="treemap"&&t.config.chart.type!=="heatmap"&&!this.isBarsDistributed&&t.config.legend.onItemClick.toggleDataSeries&&this.legendHelpers.toggleDataSeries(r,a)}}}]),_}(),St=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w;var t=this.w;this.ev=this.w.config.chart.events,this.selectedClass="apexcharts-selected",this.localeValues=this.w.globals.locale.toolbar,this.minX=t.globals.minX,this.maxX=t.globals.maxX}return b(_,[{key:"createToolbar",value:function(){var e=this,t=this.w,r=function(){return document.createElement("div")},a=r();if(a.setAttribute("class","apexcharts-toolbar"),a.style.top=t.config.chart.toolbar.offsetY+"px",a.style.right=3-t.config.chart.toolbar.offsetX+"px",t.globals.dom.elWrap.appendChild(a),this.elZoom=r(),this.elZoomIn=r(),this.elZoomOut=r(),this.elPan=r(),this.elSelection=r(),this.elZoomReset=r(),this.elMenuIcon=r(),this.elMenu=r(),this.elCustomIcons=[],this.t=t.config.chart.toolbar.tools,Array.isArray(this.t.customIcons))for(var o=0;o<this.t.customIcons.length;o++)this.elCustomIcons.push(r());var h=[],c=function(m,y,A){var E=m.toLowerCase();e.t[E]&&t.config.chart.zoom.enabled&&h.push({el:y,icon:typeof e.t[E]=="string"?e.t[E]:A,title:e.localeValues[m],class:"apexcharts-".concat(E,"-icon")})};c("zoomIn",this.elZoomIn,`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
</svg>
`),c("zoomOut",this.elZoomOut,`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
</svg>
`);var d=function(m){e.t[m]&&t.config.chart[m].enabled&&h.push({el:m==="zoom"?e.elZoom:e.elSelection,icon:typeof e.t[m]=="string"?e.t[m]:m==="zoom"?`<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">
    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
    <path d="M0 0h24v24H0V0z" fill="none"/>
    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>
</svg>`:`<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>
</svg>`,title:e.localeValues[m==="zoom"?"selectionZoom":"selection"],class:t.globals.isTouchDevice?"apexcharts-element-hidden":"apexcharts-".concat(m,"-icon")})};d("zoom"),d("selection"),this.t.pan&&t.config.chart.zoom.enabled&&h.push({el:this.elPan,icon:typeof this.t.pan=="string"?this.t.pan:`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">
    <defs>
        <path d="M0 0h24v24H0z" id="a"/>
    </defs>
    <clipPath id="b">
        <use overflow="visible" xlink:href="#a"/>
    </clipPath>
    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>
</svg>`,title:this.localeValues.pan,class:t.globals.isTouchDevice?"apexcharts-element-hidden":"apexcharts-pan-icon"}),c("reset",this.elZoomReset,`<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
    <path d="M0 0h24v24H0z" fill="none"/>
</svg>`),this.t.download&&h.push({el:this.elMenuIcon,icon:typeof this.t.download=="string"?this.t.download:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',title:this.localeValues.menu,class:"apexcharts-menu-icon"});for(var p=0;p<this.elCustomIcons.length;p++)h.push({el:this.elCustomIcons[p],icon:this.t.customIcons[p].icon,title:this.t.customIcons[p].title,index:this.t.customIcons[p].index,class:"apexcharts-toolbar-custom-icon "+this.t.customIcons[p].class});h.forEach(function(m,y){m.index&&P.moveIndexInArray(h,y,m.index)});for(var x=0;x<h.length;x++)X.setAttrs(h[x].el,{class:h[x].class,title:h[x].title}),h[x].el.innerHTML=h[x].icon,a.appendChild(h[x].el);this._createHamburgerMenu(a),t.globals.zoomEnabled?this.elZoom.classList.add(this.selectedClass):t.globals.panEnabled?this.elPan.classList.add(this.selectedClass):t.globals.selectionEnabled&&this.elSelection.classList.add(this.selectedClass),this.addToolbarEventListeners()}},{key:"_createHamburgerMenu",value:function(e){this.elMenuItems=[],e.appendChild(this.elMenu),X.setAttrs(this.elMenu,{class:"apexcharts-menu"});var t=[{name:"exportSVG",title:this.localeValues.exportToSVG},{name:"exportPNG",title:this.localeValues.exportToPNG},{name:"exportCSV",title:this.localeValues.exportToCSV}];this.w.globals.allSeriesHasEqualX||t.splice(2,1);for(var r=0;r<t.length;r++)this.elMenuItems.push(document.createElement("div")),this.elMenuItems[r].innerHTML=t[r].title,X.setAttrs(this.elMenuItems[r],{class:"apexcharts-menu-item ".concat(t[r].name),title:t[r].title}),this.elMenu.appendChild(this.elMenuItems[r])}},{key:"addToolbarEventListeners",value:function(){var e=this;this.elZoomReset.addEventListener("click",this.handleZoomReset.bind(this)),this.elSelection.addEventListener("click",this.toggleZoomSelection.bind(this,"selection")),this.elZoom.addEventListener("click",this.toggleZoomSelection.bind(this,"zoom")),this.elZoomIn.addEventListener("click",this.handleZoomIn.bind(this)),this.elZoomOut.addEventListener("click",this.handleZoomOut.bind(this)),this.elPan.addEventListener("click",this.togglePanning.bind(this)),this.elMenuIcon.addEventListener("click",this.toggleMenu.bind(this)),this.elMenuItems.forEach(function(r){r.classList.contains("exportSVG")?r.addEventListener("click",e.handleDownload.bind(e,"svg")):r.classList.contains("exportPNG")?r.addEventListener("click",e.handleDownload.bind(e,"png")):r.classList.contains("exportCSV")&&r.addEventListener("click",e.handleDownload.bind(e,"csv"))});for(var t=0;t<this.t.customIcons.length;t++)this.elCustomIcons[t].addEventListener("click",this.t.customIcons[t].click.bind(this,this.ctx,this.ctx.w))}},{key:"toggleZoomSelection",value:function(e){this.ctx.getSyncedCharts().forEach(function(t){t.ctx.toolbar.toggleOtherControls();var r=e==="selection"?t.ctx.toolbar.elSelection:t.ctx.toolbar.elZoom,a=e==="selection"?"selectionEnabled":"zoomEnabled";t.w.globals[a]=!t.w.globals[a],r.classList.contains(t.ctx.toolbar.selectedClass)?r.classList.remove(t.ctx.toolbar.selectedClass):r.classList.add(t.ctx.toolbar.selectedClass)})}},{key:"getToolbarIconsReference",value:function(){var e=this.w;this.elZoom||(this.elZoom=e.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")),this.elPan||(this.elPan=e.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")),this.elSelection||(this.elSelection=e.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"))}},{key:"enableZoomPanFromToolbar",value:function(e){this.toggleOtherControls(),e==="pan"?this.w.globals.panEnabled=!0:this.w.globals.zoomEnabled=!0;var t=e==="pan"?this.elPan:this.elZoom,r=e==="pan"?this.elZoom:this.elPan;t&&t.classList.add(this.selectedClass),r&&r.classList.remove(this.selectedClass)}},{key:"togglePanning",value:function(){this.ctx.getSyncedCharts().forEach(function(e){e.ctx.toolbar.toggleOtherControls(),e.w.globals.panEnabled=!e.w.globals.panEnabled,e.ctx.toolbar.elPan.classList.contains(e.ctx.toolbar.selectedClass)?e.ctx.toolbar.elPan.classList.remove(e.ctx.toolbar.selectedClass):e.ctx.toolbar.elPan.classList.add(e.ctx.toolbar.selectedClass)})}},{key:"toggleOtherControls",value:function(){var e=this,t=this.w;t.globals.panEnabled=!1,t.globals.zoomEnabled=!1,t.globals.selectionEnabled=!1,this.getToolbarIconsReference(),[this.elPan,this.elSelection,this.elZoom].forEach(function(r){r&&r.classList.remove(e.selectedClass)})}},{key:"handleZoomIn",value:function(){var e=this.w;e.globals.isRangeBar&&(this.minX=e.globals.minY,this.maxX=e.globals.maxY);var t=(this.minX+this.maxX)/2,r=(this.minX+t)/2,a=(this.maxX+t)/2,o=this._getNewMinXMaxX(r,a);e.globals.disableZoomIn||this.zoomUpdateOptions(o.minX,o.maxX)}},{key:"handleZoomOut",value:function(){var e=this.w;if(e.globals.isRangeBar&&(this.minX=e.globals.minY,this.maxX=e.globals.maxY),!(e.config.xaxis.type==="datetime"&&new Date(this.minX).getUTCFullYear()<1e3)){var t=(this.minX+this.maxX)/2,r=this.minX-(t-this.minX),a=this.maxX-(t-this.maxX),o=this._getNewMinXMaxX(r,a);e.globals.disableZoomOut||this.zoomUpdateOptions(o.minX,o.maxX)}}},{key:"_getNewMinXMaxX",value:function(e,t){var r=this.w.config.xaxis.convertedCatToNumeric;return{minX:r?Math.floor(e):e,maxX:r?Math.floor(t):t}}},{key:"zoomUpdateOptions",value:function(e,t){var r=this.w;if(e!==void 0||t!==void 0){if(!(r.config.xaxis.convertedCatToNumeric&&(e<1&&(e=1,t=r.globals.dataPoints),t-e<2))){var a={min:e,max:t},o=this.getBeforeZoomRange(a);o&&(a=o.xaxis);var h={xaxis:a},c=P.clone(r.globals.initialConfig.yaxis);r.config.chart.zoom.autoScaleYaxis&&(c=new $(this.ctx).autoScaleY(this.ctx,c,{xaxis:a})),r.config.chart.group||(h.yaxis=c),this.w.globals.zoomed=!0,this.ctx.updateHelpers._updateOptions(h,!1,this.w.config.chart.animations.dynamicAnimation.enabled),this.zoomCallback(a,c)}}else this.handleZoomReset()}},{key:"zoomCallback",value:function(e,t){typeof this.ev.zoomed=="function"&&this.ev.zoomed(this.ctx,{xaxis:e,yaxis:t})}},{key:"getBeforeZoomRange",value:function(e,t){var r=null;return typeof this.ev.beforeZoom=="function"&&(r=this.ev.beforeZoom(this,{xaxis:e,yaxis:t})),r}},{key:"toggleMenu",value:function(){var e=this;window.setTimeout(function(){e.elMenu.classList.contains("apexcharts-menu-open")?e.elMenu.classList.remove("apexcharts-menu-open"):e.elMenu.classList.add("apexcharts-menu-open")},0)}},{key:"handleDownload",value:function(e){var t=this.w,r=new Ie(this.ctx);switch(e){case"svg":r.exportToSVG(this.ctx);break;case"png":r.exportToPng(this.ctx);break;case"csv":r.exportToCSV({series:t.config.series,columnDelimiter:t.config.chart.toolbar.export.csv.columnDelimiter})}}},{key:"handleZoomReset",value:function(e){this.ctx.getSyncedCharts().forEach(function(t){var r=t.w;if(r.globals.lastXAxis.min=void 0,r.globals.lastXAxis.max=void 0,t.updateHelpers.revertDefaultAxisMinMax(),typeof r.config.chart.events.beforeResetZoom=="function"){var a=r.config.chart.events.beforeResetZoom(t,r);a&&t.updateHelpers.revertDefaultAxisMinMax(a)}typeof r.config.chart.events.zoomed=="function"&&t.ctx.toolbar.zoomCallback({min:r.config.xaxis.min,max:r.config.xaxis.max}),r.globals.zoomed=!1;var o=t.ctx.series.emptyCollapsedSeries(P.clone(r.globals.initialSeries));t.updateHelpers._updateSeries(o,r.config.chart.animations.dynamicAnimation.enabled)})}},{key:"destroy",value:function(){this.elZoom=null,this.elZoomIn=null,this.elZoomOut=null,this.elPan=null,this.elSelection=null,this.elZoomReset=null,this.elMenuIcon=null}}]),_}(),ki=function(_){S(t,St);var e=z(t);function t(r){var a;return f(this,t),(a=e.call(this,r)).ctx=r,a.w=r.w,a.dragged=!1,a.graphics=new X(a.ctx),a.eventList=["mousedown","mouseleave","mousemove","touchstart","touchmove","mouseup","touchend"],a.clientX=0,a.clientY=0,a.startX=0,a.endX=0,a.dragX=0,a.startY=0,a.endY=0,a.dragY=0,a.moveDirection="none",a}return b(t,[{key:"init",value:function(r){var a=this,o=r.xyRatios,h=this.w,c=this;this.xyRatios=o,this.zoomRect=this.graphics.drawRect(0,0,0,0),this.selectionRect=this.graphics.drawRect(0,0,0,0),this.gridRect=h.globals.dom.baseEl.querySelector(".apexcharts-grid"),this.zoomRect.node.classList.add("apexcharts-zoom-rect"),this.selectionRect.node.classList.add("apexcharts-selection-rect"),h.globals.dom.elGraphical.add(this.zoomRect),h.globals.dom.elGraphical.add(this.selectionRect),h.config.chart.selection.type==="x"?this.slDraggableRect=this.selectionRect.draggable({minX:0,minY:0,maxX:h.globals.gridWidth,maxY:h.globals.gridHeight}).on("dragmove",this.selectionDragging.bind(this,"dragging")):h.config.chart.selection.type==="y"?this.slDraggableRect=this.selectionRect.draggable({minX:0,maxX:h.globals.gridWidth}).on("dragmove",this.selectionDragging.bind(this,"dragging")):this.slDraggableRect=this.selectionRect.draggable().on("dragmove",this.selectionDragging.bind(this,"dragging")),this.preselectedSelection(),this.hoverArea=h.globals.dom.baseEl.querySelector("".concat(h.globals.chartClass," .apexcharts-svg")),this.hoverArea.classList.add("apexcharts-zoomable"),this.eventList.forEach(function(d){a.hoverArea.addEventListener(d,c.svgMouseEvents.bind(c,o),{capture:!1,passive:!0})})}},{key:"destroy",value:function(){this.slDraggableRect&&(this.slDraggableRect.draggable(!1),this.slDraggableRect.off(),this.selectionRect.off()),this.selectionRect=null,this.zoomRect=null,this.gridRect=null}},{key:"svgMouseEvents",value:function(r,a){var o=this.w,h=this,c=this.ctx.toolbar,d=o.globals.zoomEnabled?o.config.chart.zoom.type:o.config.chart.selection.type,p=o.config.chart.toolbar.autoSelected;if(a.shiftKey?(this.shiftWasPressed=!0,c.enableZoomPanFromToolbar(p==="pan"?"zoom":"pan")):this.shiftWasPressed&&(c.enableZoomPanFromToolbar(p),this.shiftWasPressed=!1),a.target){var x,m=a.target.classList;if(a.target.parentNode&&a.target.parentNode!==null&&(x=a.target.parentNode.classList),!(m.contains("apexcharts-selection-rect")||m.contains("apexcharts-legend-marker")||m.contains("apexcharts-legend-text")||x&&x.contains("apexcharts-toolbar"))){if(h.clientX=a.type==="touchmove"||a.type==="touchstart"?a.touches[0].clientX:a.type==="touchend"?a.changedTouches[0].clientX:a.clientX,h.clientY=a.type==="touchmove"||a.type==="touchstart"?a.touches[0].clientY:a.type==="touchend"?a.changedTouches[0].clientY:a.clientY,a.type==="mousedown"&&a.which===1){var y=h.gridRect.getBoundingClientRect();h.startX=h.clientX-y.left,h.startY=h.clientY-y.top,h.dragged=!1,h.w.globals.mousedown=!0}if((a.type==="mousemove"&&a.which===1||a.type==="touchmove")&&(h.dragged=!0,o.globals.panEnabled?(o.globals.selection=null,h.w.globals.mousedown&&h.panDragging({context:h,zoomtype:d,xyRatios:r})):(h.w.globals.mousedown&&o.globals.zoomEnabled||h.w.globals.mousedown&&o.globals.selectionEnabled)&&(h.selection=h.selectionDrawing({context:h,zoomtype:d}))),a.type==="mouseup"||a.type==="touchend"||a.type==="mouseleave"){var A=h.gridRect.getBoundingClientRect();h.w.globals.mousedown&&(h.endX=h.clientX-A.left,h.endY=h.clientY-A.top,h.dragX=Math.abs(h.endX-h.startX),h.dragY=Math.abs(h.endY-h.startY),(o.globals.zoomEnabled||o.globals.selectionEnabled)&&h.selectionDrawn({context:h,zoomtype:d}),o.globals.panEnabled&&o.config.xaxis.convertedCatToNumeric&&h.delayedPanScrolled()),o.globals.zoomEnabled&&h.hideSelectionRect(this.selectionRect),h.dragged=!1,h.w.globals.mousedown=!1}this.makeSelectionRectDraggable()}}}},{key:"makeSelectionRectDraggable",value:function(){var r=this.w;if(this.selectionRect){var a=this.selectionRect.node.getBoundingClientRect();a.width>0&&a.height>0&&this.slDraggableRect.selectize({points:"l, r",pointSize:8,pointType:"rect"}).resize({constraint:{minX:0,minY:0,maxX:r.globals.gridWidth,maxY:r.globals.gridHeight}}).on("resizing",this.selectionDragging.bind(this,"resizing"))}}},{key:"preselectedSelection",value:function(){var r=this.w,a=this.xyRatios;if(!r.globals.zoomEnabled){if(r.globals.selection!==void 0&&r.globals.selection!==null)this.drawSelectionRect(r.globals.selection);else if(r.config.chart.selection.xaxis.min!==void 0&&r.config.chart.selection.xaxis.max!==void 0){var o=(r.config.chart.selection.xaxis.min-r.globals.minX)/a.xRatio,h={x:o,y:0,width:r.globals.gridWidth-(r.globals.maxX-r.config.chart.selection.xaxis.max)/a.xRatio-o,height:r.globals.gridHeight,translateX:0,translateY:0,selectionEnabled:!0};this.drawSelectionRect(h),this.makeSelectionRectDraggable(),typeof r.config.chart.events.selection=="function"&&r.config.chart.events.selection(this.ctx,{xaxis:{min:r.config.chart.selection.xaxis.min,max:r.config.chart.selection.xaxis.max},yaxis:{}})}}}},{key:"drawSelectionRect",value:function(r){var a=r.x,o=r.y,h=r.width,c=r.height,d=r.translateX,p=d===void 0?0:d,x=r.translateY,m=x===void 0?0:x,y=this.w,A=this.zoomRect,E=this.selectionRect;if(this.dragged||y.globals.selection!==null){var C={transform:"translate("+p+", "+m+")"};y.globals.zoomEnabled&&this.dragged&&(h<0&&(h=1),A.attr({x:a,y:o,width:h,height:c,fill:y.config.chart.zoom.zoomedArea.fill.color,"fill-opacity":y.config.chart.zoom.zoomedArea.fill.opacity,stroke:y.config.chart.zoom.zoomedArea.stroke.color,"stroke-width":y.config.chart.zoom.zoomedArea.stroke.width,"stroke-opacity":y.config.chart.zoom.zoomedArea.stroke.opacity}),X.setAttrs(A.node,C)),y.globals.selectionEnabled&&(E.attr({x:a,y:o,width:h>0?h:0,height:c>0?c:0,fill:y.config.chart.selection.fill.color,"fill-opacity":y.config.chart.selection.fill.opacity,stroke:y.config.chart.selection.stroke.color,"stroke-width":y.config.chart.selection.stroke.width,"stroke-dasharray":y.config.chart.selection.stroke.dashArray,"stroke-opacity":y.config.chart.selection.stroke.opacity}),X.setAttrs(E.node,C))}}},{key:"hideSelectionRect",value:function(r){r&&r.attr({x:0,y:0,width:0,height:0})}},{key:"selectionDrawing",value:function(r){var a=r.context,o=r.zoomtype,h=this.w,c=a,d=this.gridRect.getBoundingClientRect(),p=c.startX-1,x=c.startY,m=!1,y=!1,A=c.clientX-d.left-p,E=c.clientY-d.top-x,C={};return Math.abs(A+p)>h.globals.gridWidth?A=h.globals.gridWidth-p:c.clientX-d.left<0&&(A=p),p>c.clientX-d.left&&(m=!0,A=Math.abs(A)),x>c.clientY-d.top&&(y=!0,E=Math.abs(E)),C=o==="x"?{x:m?p-A:p,y:0,width:A,height:h.globals.gridHeight}:o==="y"?{x:0,y:y?x-E:x,width:h.globals.gridWidth,height:E}:{x:m?p-A:p,y:y?x-E:x,width:A,height:E},c.drawSelectionRect(C),c.selectionDragging("resizing"),C}},{key:"selectionDragging",value:function(r,a){var o=this,h=this.w,c=this.xyRatios,d=this.selectionRect,p=0;r==="resizing"&&(p=30);var x=function(y){return parseFloat(d.node.getAttribute(y))},m={x:x("x"),y:x("y"),width:x("width"),height:x("height")};h.globals.selection=m,typeof h.config.chart.events.selection=="function"&&h.globals.selectionEnabled&&(clearTimeout(this.w.globals.selectionResizeTimer),this.w.globals.selectionResizeTimer=window.setTimeout(function(){var y=o.gridRect.getBoundingClientRect(),A=d.node.getBoundingClientRect(),E={xaxis:{min:h.globals.xAxisScale.niceMin+(A.left-y.left)*c.xRatio,max:h.globals.xAxisScale.niceMin+(A.right-y.left)*c.xRatio},yaxis:{min:h.globals.yAxisScale[0].niceMin+(y.bottom-A.bottom)*c.yRatio[0],max:h.globals.yAxisScale[0].niceMax-(A.top-y.top)*c.yRatio[0]}};h.config.chart.events.selection(o.ctx,E),h.config.chart.brush.enabled&&h.config.chart.events.brushScrolled!==void 0&&h.config.chart.events.brushScrolled(o.ctx,E)},p))}},{key:"selectionDrawn",value:function(r){var a=r.context,o=r.zoomtype,h=this.w,c=a,d=this.xyRatios,p=this.ctx.toolbar;if(c.startX>c.endX){var x=c.startX;c.startX=c.endX,c.endX=x}if(c.startY>c.endY){var m=c.startY;c.startY=c.endY,c.endY=m}var y=void 0,A=void 0;h.globals.isRangeBar?(y=h.globals.yAxisScale[0].niceMin+c.startX*d.invertedYRatio,A=h.globals.yAxisScale[0].niceMin+c.endX*d.invertedYRatio):(y=h.globals.xAxisScale.niceMin+c.startX*d.xRatio,A=h.globals.xAxisScale.niceMin+c.endX*d.xRatio);var E=[],C=[];if(h.config.yaxis.forEach(function(M,V){E.push(h.globals.yAxisScale[V].niceMax-d.yRatio[V]*c.startY),C.push(h.globals.yAxisScale[V].niceMax-d.yRatio[V]*c.endY)}),c.dragged&&(c.dragX>10||c.dragY>10)&&y!==A){if(h.globals.zoomEnabled){var L=P.clone(h.globals.initialConfig.yaxis),R=P.clone(h.globals.initialConfig.xaxis);if(h.globals.zoomed=!0,h.config.xaxis.convertedCatToNumeric&&(y=Math.floor(y),A=Math.floor(A),y<1&&(y=1,A=h.globals.dataPoints),A-y<2&&(A=y+1)),o!=="xy"&&o!=="x"||(R={min:y,max:A}),o!=="xy"&&o!=="y"||L.forEach(function(M,V){L[V].min=C[V],L[V].max=E[V]}),h.config.chart.zoom.autoScaleYaxis){var F=new $(c.ctx);L=F.autoScaleY(c.ctx,L,{xaxis:R})}if(p){var D=p.getBeforeZoomRange(R,L);D&&(R=D.xaxis?D.xaxis:R,L=D.yaxis?D.yaxis:L)}var g={xaxis:R};h.config.chart.group||(g.yaxis=L),c.ctx.updateHelpers._updateOptions(g,!1,c.w.config.chart.animations.dynamicAnimation.enabled),typeof h.config.chart.events.zoomed=="function"&&p.zoomCallback(R,L)}else if(h.globals.selectionEnabled){var w,T=null;w={min:y,max:A},o!=="xy"&&o!=="y"||(T=P.clone(h.config.yaxis)).forEach(function(M,V){T[V].min=C[V],T[V].max=E[V]}),h.globals.selection=c.selection,typeof h.config.chart.events.selection=="function"&&h.config.chart.events.selection(c.ctx,{xaxis:w,yaxis:T})}}}},{key:"panDragging",value:function(r){var a=r.context,o=this.w,h=a;if(o.globals.lastClientPosition.x!==void 0){var c=o.globals.lastClientPosition.x-h.clientX,d=o.globals.lastClientPosition.y-h.clientY;Math.abs(c)>Math.abs(d)&&c>0?this.moveDirection="left":Math.abs(c)>Math.abs(d)&&c<0?this.moveDirection="right":Math.abs(d)>Math.abs(c)&&d>0?this.moveDirection="up":Math.abs(d)>Math.abs(c)&&d<0&&(this.moveDirection="down")}o.globals.lastClientPosition={x:h.clientX,y:h.clientY};var p=o.globals.isRangeBar?o.globals.minY:o.globals.minX,x=o.globals.isRangeBar?o.globals.maxY:o.globals.maxX;o.config.xaxis.convertedCatToNumeric||h.panScrolled(p,x)}},{key:"delayedPanScrolled",value:function(){var r=this.w,a=r.globals.minX,o=r.globals.maxX,h=(r.globals.maxX-r.globals.minX)/2;this.moveDirection==="left"?(a=r.globals.minX+h,o=r.globals.maxX+h):this.moveDirection==="right"&&(a=r.globals.minX-h,o=r.globals.maxX-h),a=Math.floor(a),o=Math.floor(o),this.updateScrolledChart({xaxis:{min:a,max:o}},a,o)}},{key:"panScrolled",value:function(r,a){var o=this.w,h=this.xyRatios,c=P.clone(o.globals.initialConfig.yaxis),d=h.xRatio,p=o.globals.minX,x=o.globals.maxX;o.globals.isRangeBar&&(d=h.invertedYRatio,p=o.globals.minY,x=o.globals.maxY),this.moveDirection==="left"?(r=p+o.globals.gridWidth/15*d,a=x+o.globals.gridWidth/15*d):this.moveDirection==="right"&&(r=p-o.globals.gridWidth/15*d,a=x-o.globals.gridWidth/15*d),o.globals.isRangeBar||(r<o.globals.initialMinX||a>o.globals.initialMaxX)&&(r=p,a=x);var m={min:r,max:a};o.config.chart.zoom.autoScaleYaxis&&(c=new $(this.ctx).autoScaleY(this.ctx,c,{xaxis:m}));var y={xaxis:{min:r,max:a}};o.config.chart.group||(y.yaxis=c),this.updateScrolledChart(y,r,a)}},{key:"updateScrolledChart",value:function(r,a,o){var h=this.w;this.ctx.updateHelpers._updateOptions(r,!1,!1),typeof h.config.chart.events.scrolled=="function"&&h.config.chart.events.scrolled(this.ctx,{xaxis:{min:a,max:o}})}}]),t}(),Zn=function(){function _(e){f(this,_),this.w=e.w,this.ttCtx=e,this.ctx=e.ctx}return b(_,[{key:"getNearestValues",value:function(e){var t=e.hoverArea,r=e.elGrid,a=e.clientX,o=e.clientY,h=this.w,c=r.getBoundingClientRect(),d=c.width,p=c.height,x=d/(h.globals.dataPoints-1),m=p/h.globals.dataPoints,y=this.hasBars();!h.globals.comboCharts&&!y||h.config.xaxis.convertedCatToNumeric||(x=d/h.globals.dataPoints);var A=a-c.left-h.globals.barPadForNumericAxis,E=o-c.top;A<0||E<0||A>d||E>p?(t.classList.remove("hovering-zoom"),t.classList.remove("hovering-pan")):h.globals.zoomEnabled?(t.classList.remove("hovering-pan"),t.classList.add("hovering-zoom")):h.globals.panEnabled&&(t.classList.remove("hovering-zoom"),t.classList.add("hovering-pan"));var C=Math.round(A/x),L=Math.floor(E/m);y&&!h.config.xaxis.convertedCatToNumeric&&(C=Math.ceil(A/x),C-=1);var R=null,F=null,D=[],g=[];if(h.globals.seriesXvalues.forEach(function(V){D.push([V[0]+1e-6].concat(V))}),h.globals.seriesYvalues.forEach(function(V){g.push([V[0]+1e-6].concat(V))}),D=D.map(function(V){return V.filter(function(J){return P.isNumber(J)})}),g=g.map(function(V){return V.filter(function(J){return P.isNumber(J)})}),h.globals.isXNumeric){var w=this.ttCtx.getElGrid().getBoundingClientRect(),T=A*(w.width/d),M=E*(w.height/p);R=(F=this.closestInMultiArray(T,M,D,g)).index,C=F.j,R!==null&&(D=h.globals.seriesXvalues[R],C=(F=this.closestInArray(T,D)).index)}return h.globals.capturedSeriesIndex=R===null?-1:R,(!C||C<1)&&(C=0),h.globals.isBarHorizontal?h.globals.capturedDataPointIndex=L:h.globals.capturedDataPointIndex=C,{capturedSeries:R,j:h.globals.isBarHorizontal?L:C,hoverX:A,hoverY:E}}},{key:"closestInMultiArray",value:function(e,t,r,a){var o=this.w,h=0,c=null,d=-1;o.globals.series.length>1?h=this.getFirstActiveXArray(r):c=0;var p=r[h][0],x=Math.abs(e-p);if(r.forEach(function(A){A.forEach(function(E,C){var L=Math.abs(e-E);L<x&&(x=L,d=C)})}),d!==-1){var m=a[h][d],y=Math.abs(t-m);c=h,a.forEach(function(A,E){var C=Math.abs(t-A[d]);C<y&&(y=C,c=E)})}return{index:c,j:d}}},{key:"getFirstActiveXArray",value:function(e){for(var t=this.w,r=0,a=e.map(function(h,c){return h.length>0?c:-1}),o=0;o<a.length;o++)if(a[o]!==-1&&t.globals.collapsedSeriesIndices.indexOf(o)===-1&&t.globals.ancillaryCollapsedSeriesIndices.indexOf(o)===-1){r=a[o];break}return r}},{key:"closestInArray",value:function(e,t){for(var r=t[0],a=null,o=Math.abs(e-r),h=0;h<t.length;h++){var c=Math.abs(e-t[h]);c<o&&(o=c,a=h)}return{index:a}}},{key:"isXoverlap",value:function(e){var t=[],r=this.w.globals.seriesX.filter(function(o){return o[0]!==void 0});if(r.length>0)for(var a=0;a<r.length-1;a++)r[a][e]!==void 0&&r[a+1][e]!==void 0&&r[a][e]!==r[a+1][e]&&t.push("unEqual");return t.length===0}},{key:"isInitialSeriesSameLen",value:function(){for(var e=!0,t=this.w.globals.initialSeries,r=0;r<t.length-1;r++)if(t[r].data.length!==t[r+1].data.length){e=!1;break}return e}},{key:"getBarsHeight",value:function(e){return K(e).reduce(function(t,r){return t+r.getBBox().height},0)}},{key:"getElMarkers",value:function(){return this.w.globals.dom.baseEl.querySelectorAll(" .apexcharts-series-markers")}},{key:"getAllMarkers",value:function(){var e=this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");(e=K(e)).sort(function(r,a){return Number(a.getAttribute("data:realIndex"))<Number(r.getAttribute("data:realIndex"))?0:-1});var t=[];return e.forEach(function(r){t.push(r.querySelector(".apexcharts-marker"))}),t}},{key:"hasMarkers",value:function(){return this.getElMarkers().length>0}},{key:"getElBars",value:function(){return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series")}},{key:"hasBars",value:function(){return this.getElBars().length>0}},{key:"getHoverMarkerSize",value:function(e){var t=this.w,r=t.config.markers.hover.size;return r===void 0&&(r=t.globals.markers.size[e]+t.config.markers.hover.sizeOffset),r}},{key:"toggleAllTooltipSeriesGroups",value:function(e){var t=this.w,r=this.ttCtx;r.allTooltipSeriesGroups.length===0&&(r.allTooltipSeriesGroups=t.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));for(var a=r.allTooltipSeriesGroups,o=0;o<a.length;o++)e==="enable"?(a[o].classList.add("apexcharts-active"),a[o].style.display=t.config.tooltip.items.display):(a[o].classList.remove("apexcharts-active"),a[o].style.display="none")}}]),_}(),Bi=function(){function _(e){f(this,_),this.w=e.w,this.ctx=e.ctx,this.ttCtx=e,this.tooltipUtil=new Zn(e)}return b(_,[{key:"drawSeriesTexts",value:function(e){var t=e.shared,r=t===void 0||t,a=e.ttItems,o=e.i,h=o===void 0?0:o,c=e.j,d=c===void 0?null:c,p=e.y1,x=e.y2,m=e.e,y=this.w;y.config.tooltip.custom!==void 0?this.handleCustomTooltip({i:h,j:d,y1:p,y2:x,w:y}):this.toggleActiveInactiveSeries(r);var A=this.getValuesToPrint({i:h,j:d});this.printLabels({i:h,j:d,values:A,ttItems:a,shared:r,e:m});var E=this.ttCtx.getElTooltip();this.ttCtx.tooltipRect.ttWidth=E.getBoundingClientRect().width,this.ttCtx.tooltipRect.ttHeight=E.getBoundingClientRect().height}},{key:"printLabels",value:function(e){var t,r=this,a=e.i,o=e.j,h=e.values,c=e.ttItems,d=e.shared,p=e.e,x=this.w,m=[],y=function(w){return x.globals.seriesGoals[w]&&x.globals.seriesGoals[w][o]&&Array.isArray(x.globals.seriesGoals[w][o])},A=h.xVal,E=h.zVal,C=h.xAxisTTVal,L="",R=x.globals.colors[a];o!==null&&x.config.plotOptions.bar.distributed&&(R=x.globals.colors[o]);for(var F=function(w,T){var M=r.getFormatters(a);L=r.getSeriesName({fn:M.yLbTitleFormatter,index:a,seriesIndex:a,j:o}),x.config.chart.type==="treemap"&&(L=M.yLbTitleFormatter(String(x.config.series[a].data[o].x),{series:x.globals.series,seriesIndex:a,dataPointIndex:o,w:x}));var V=x.config.tooltip.inverseOrder?T:w;if(x.globals.axisCharts){var J=function(re){return M.yLbFormatter(x.globals.series[re][o],{series:x.globals.series,seriesIndex:re,dataPointIndex:o,w:x})};if(d)M=r.getFormatters(V),L=r.getSeriesName({fn:M.yLbTitleFormatter,index:V,seriesIndex:a,j:o}),R=x.globals.colors[V],t=J(V),y(V)&&(m=x.globals.seriesGoals[V][o].map(function(re){return{attrs:re,val:M.yLbFormatter(re.value,{seriesIndex:V,dataPointIndex:o,w:x})}}));else{var G,oe=p==null||(G=p.target)===null||G===void 0?void 0:G.getAttribute("fill");oe&&(R=oe.indexOf("url")!==-1?document.querySelector(oe.substr(4).slice(0,-1)).childNodes[0].getAttribute("stroke"):oe),t=J(a),y(a)&&Array.isArray(x.globals.seriesGoals[a][o])&&(m=x.globals.seriesGoals[a][o].map(function(re){return{attrs:re,val:M.yLbFormatter(re.value,{seriesIndex:a,dataPointIndex:o,w:x})}}))}}o===null&&(t=M.yLbFormatter(x.globals.series[a],l(l({},x),{},{seriesIndex:a,dataPointIndex:a}))),r.DOMHandling({i:a,t:V,j:o,ttItems:c,values:{val:t,goalVals:m,xVal:A,xAxisTTVal:C,zVal:E},seriesName:L,shared:d,pColor:R})},D=0,g=x.globals.series.length-1;D<x.globals.series.length;D++,g--)F(D,g)}},{key:"getFormatters",value:function(e){var t,r=this.w,a=r.globals.yLabelFormatters[e];return r.globals.ttVal!==void 0?Array.isArray(r.globals.ttVal)?(a=r.globals.ttVal[e]&&r.globals.ttVal[e].formatter,t=r.globals.ttVal[e]&&r.globals.ttVal[e].title&&r.globals.ttVal[e].title.formatter):(a=r.globals.ttVal.formatter,typeof r.globals.ttVal.title.formatter=="function"&&(t=r.globals.ttVal.title.formatter)):t=r.config.tooltip.y.title.formatter,typeof a!="function"&&(a=r.globals.yLabelFormatters[0]?r.globals.yLabelFormatters[0]:function(o){return o}),typeof t!="function"&&(t=function(o){return o}),{yLbFormatter:a,yLbTitleFormatter:t}}},{key:"getSeriesName",value:function(e){var t=e.fn,r=e.index,a=e.seriesIndex,o=e.j,h=this.w;return t(String(h.globals.seriesNames[r]),{series:h.globals.series,seriesIndex:a,dataPointIndex:o,w:h})}},{key:"DOMHandling",value:function(e){e.i;var t=e.t,r=e.j,a=e.ttItems,o=e.values,h=e.seriesName,c=e.shared,d=e.pColor,p=this.w,x=this.ttCtx,m=o.val,y=o.goalVals,A=o.xVal,E=o.xAxisTTVal,C=o.zVal,L=null;L=a[t].children,p.config.tooltip.fillSeriesColor&&(a[t].style.backgroundColor=d,L[0].style.display="none"),x.showTooltipTitle&&(x.tooltipTitle===null&&(x.tooltipTitle=p.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")),x.tooltipTitle.innerHTML=A),x.isXAxisTooltipEnabled&&(x.xaxisTooltipText.innerHTML=E!==""?E:A);var R=a[t].querySelector(".apexcharts-tooltip-text-y-label");R&&(R.innerHTML=h||"");var F=a[t].querySelector(".apexcharts-tooltip-text-y-value");F&&(F.innerHTML=m!==void 0?m:""),L[0]&&L[0].classList.contains("apexcharts-tooltip-marker")&&(p.config.tooltip.marker.fillColors&&Array.isArray(p.config.tooltip.marker.fillColors)&&(d=p.config.tooltip.marker.fillColors[t]),L[0].style.backgroundColor=d),p.config.tooltip.marker.show||(L[0].style.display="none");var D=a[t].querySelector(".apexcharts-tooltip-text-goals-label"),g=a[t].querySelector(".apexcharts-tooltip-text-goals-value");if(y.length&&p.globals.seriesGoals[t]){var w=function(){var T="<div >",M="<div>";y.forEach(function(V,J){T+=' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(V.attrs.strokeColor,'; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(V.attrs.name,"</div>"),M+="<div>".concat(V.val,"</div>")}),D.innerHTML=T+"</div>",g.innerHTML=M+"</div>"};c?p.globals.seriesGoals[t][r]&&Array.isArray(p.globals.seriesGoals[t][r])?w():(D.innerHTML="",g.innerHTML=""):w()}else D.innerHTML="",g.innerHTML="";C!==null&&(a[t].querySelector(".apexcharts-tooltip-text-z-label").innerHTML=p.config.tooltip.z.title,a[t].querySelector(".apexcharts-tooltip-text-z-value").innerHTML=C!==void 0?C:""),c&&L[0]&&(m==null||p.globals.ancillaryCollapsedSeriesIndices.indexOf(t)>-1||p.globals.collapsedSeriesIndices.indexOf(t)>-1?L[0].parentNode.style.display="none":L[0].parentNode.style.display=p.config.tooltip.items.display)}},{key:"toggleActiveInactiveSeries",value:function(e){var t=this.w;if(e)this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");else{this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");var r=t.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");r&&(r.classList.add("apexcharts-active"),r.style.display=t.config.tooltip.items.display)}}},{key:"getValuesToPrint",value:function(e){var t=e.i,r=e.j,a=this.w,o=this.ctx.series.filteredSeriesX(),h="",c="",d=null,p=null,x={series:a.globals.series,seriesIndex:t,dataPointIndex:r,w:a},m=a.globals.ttZFormatter;r===null?p=a.globals.series[t]:a.globals.isXNumeric&&a.config.chart.type!=="treemap"?(h=o[t][r],o[t].length===0&&(h=o[this.tooltipUtil.getFirstActiveXArray(o)][r])):h=a.globals.labels[r]!==void 0?a.globals.labels[r]:"";var y=h;return a.globals.isXNumeric&&a.config.xaxis.type==="datetime"?h=new ze(this.ctx).xLabelFormat(a.globals.ttKeyFormatter,y,y,{i:void 0,dateFormatter:new je(this.ctx).formatDate,w:this.w}):h=a.globals.isBarHorizontal?a.globals.yLabelFormatters[0](y,x):a.globals.xLabelFormatter(y,x),a.config.tooltip.x.formatter!==void 0&&(h=a.globals.ttKeyFormatter(y,x)),a.globals.seriesZ.length>0&&a.globals.seriesZ[t].length>0&&(d=m(a.globals.seriesZ[t][r],a)),c=typeof a.config.xaxis.tooltip.formatter=="function"?a.globals.xaxisTooltipFormatter(y,x):h,{val:Array.isArray(p)?p.join(" "):p,xVal:Array.isArray(h)?h.join(" "):h,xAxisTTVal:Array.isArray(c)?c.join(" "):c,zVal:d}}},{key:"handleCustomTooltip",value:function(e){var t=e.i,r=e.j,a=e.y1,o=e.y2,h=e.w,c=this.ttCtx.getElTooltip(),d=h.config.tooltip.custom;Array.isArray(d)&&d[t]&&(d=d[t]),c.innerHTML=d({ctx:this.ctx,series:h.globals.series,seriesIndex:t,dataPointIndex:r,y1:a,y2:o,w:h})}}]),_}(),Jn=function(){function _(e){f(this,_),this.ttCtx=e,this.ctx=e.ctx,this.w=e.w}return b(_,[{key:"moveXCrosshairs",value:function(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null,r=this.ttCtx,a=this.w,o=r.getElXCrosshairs(),h=e-r.xcrosshairsWidth/2,c=a.globals.labels.slice().length;if(t!==null&&(h=a.globals.gridWidth/c*t),o===null||a.globals.isBarHorizontal||(o.setAttribute("x",h),o.setAttribute("x1",h),o.setAttribute("x2",h),o.setAttribute("y2",a.globals.gridHeight),o.classList.add("apexcharts-active")),h<0&&(h=0),h>a.globals.gridWidth&&(h=a.globals.gridWidth),r.isXAxisTooltipEnabled){var d=h;a.config.xaxis.crosshairs.width!=="tickWidth"&&a.config.xaxis.crosshairs.width!=="barWidth"||(d=h+r.xcrosshairsWidth/2),this.moveXAxisTooltip(d)}}},{key:"moveYCrosshairs",value:function(e){var t=this.ttCtx;t.ycrosshairs!==null&&X.setAttrs(t.ycrosshairs,{y1:e,y2:e}),t.ycrosshairsHidden!==null&&X.setAttrs(t.ycrosshairsHidden,{y1:e,y2:e})}},{key:"moveXAxisTooltip",value:function(e){var t=this.w,r=this.ttCtx;if(r.xaxisTooltip!==null&&r.xcrosshairsWidth!==0){r.xaxisTooltip.classList.add("apexcharts-active");var a=r.xaxisOffY+t.config.xaxis.tooltip.offsetY+t.globals.translateY+1+t.config.xaxis.offsetY;if(e-=r.xaxisTooltip.getBoundingClientRect().width/2,!isNaN(e)){e+=t.globals.translateX;var o;o=new X(this.ctx).getTextRects(r.xaxisTooltipText.innerHTML),r.xaxisTooltipText.style.minWidth=o.width+"px",r.xaxisTooltip.style.left=e+"px",r.xaxisTooltip.style.top=a+"px"}}}},{key:"moveYAxisTooltip",value:function(e){var t=this.w,r=this.ttCtx;r.yaxisTTEls===null&&(r.yaxisTTEls=t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));var a=parseInt(r.ycrosshairsHidden.getAttribute("y1"),10),o=t.globals.translateY+a,h=r.yaxisTTEls[e].getBoundingClientRect().height,c=t.globals.translateYAxisX[e]-2;t.config.yaxis[e].opposite&&(c-=26),o-=h/2,t.globals.ignoreYAxisIndexes.indexOf(e)===-1?(r.yaxisTTEls[e].classList.add("apexcharts-active"),r.yaxisTTEls[e].style.top=o+"px",r.yaxisTTEls[e].style.left=c+t.config.yaxis[e].tooltip.offsetX+"px"):r.yaxisTTEls[e].classList.remove("apexcharts-active")}},{key:"moveTooltip",value:function(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null,a=this.w,o=this.ttCtx,h=o.getElTooltip(),c=o.tooltipRect,d=r!==null?parseFloat(r):1,p=parseFloat(e)+d+5,x=parseFloat(t)+d/2;if(p>a.globals.gridWidth/2&&(p=p-c.ttWidth-d-10),p>a.globals.gridWidth-c.ttWidth-10&&(p=a.globals.gridWidth-c.ttWidth),p<-20&&(p=-20),a.config.tooltip.followCursor){var m=o.getElGrid(),y=m.getBoundingClientRect();x=o.e.clientY+a.globals.translateY-y.top-c.ttHeight/2}else a.globals.isBarHorizontal||(c.ttHeight/2+x>a.globals.gridHeight&&(x=a.globals.gridHeight-c.ttHeight+a.globals.translateY),x<0&&(x=0));isNaN(p)||(p+=a.globals.translateX,h.style.left=p+"px",h.style.top=x+"px")}},{key:"moveMarkers",value:function(e,t){var r=this.w,a=this.ttCtx;if(r.globals.markers.size[e]>0)for(var o=r.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(e,"'] .apexcharts-marker")),h=0;h<o.length;h++)parseInt(o[h].getAttribute("rel"),10)===t&&(a.marker.resetPointsSize(),a.marker.enlargeCurrentPoint(t,o[h]));else a.marker.resetPointsSize(),this.moveDynamicPointOnHover(t,e)}},{key:"moveDynamicPointOnHover",value:function(e,t){var r,a,o=this.w,h=this.ttCtx,c=o.globals.pointsArray,d=h.tooltipUtil.getHoverMarkerSize(t),p=o.config.series[t].type;if(!p||p!=="column"&&p!=="candlestick"&&p!=="boxPlot"){r=c[t][e][0],a=c[t][e][1]?c[t][e][1]:0;var x=o.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t,"'] .apexcharts-series-markers circle"));x&&a<o.globals.gridHeight&&a>0&&(x.setAttribute("r",d),x.setAttribute("cx",r),x.setAttribute("cy",a)),this.moveXCrosshairs(r),h.fixedTooltip||this.moveTooltip(r,a,d)}}},{key:"moveDynamicPointsOnHover",value:function(e){var t,r=this.ttCtx,a=r.w,o=0,h=0,c=a.globals.pointsArray;t=new Be(this.ctx).getActiveConfigSeriesIndex(!0);var d=r.tooltipUtil.getHoverMarkerSize(t);c[t]&&(o=c[t][e][0],h=c[t][e][1]);var p=r.tooltipUtil.getAllMarkers();if(p!==null)for(var x=0;x<a.globals.series.length;x++){var m=c[x];if(a.globals.comboCharts&&m===void 0&&p.splice(x,0,null),m&&m.length){var y=c[x][e][1];p[x].setAttribute("cx",o),y!==null&&!isNaN(y)&&y<a.globals.gridHeight+d&&y+d>0?(p[x]&&p[x].setAttribute("r",d),p[x]&&p[x].setAttribute("cy",y)):p[x]&&p[x].setAttribute("r",0)}}if(this.moveXCrosshairs(o),!r.fixedTooltip){var A=h||a.globals.gridHeight;this.moveTooltip(o,A,d)}}},{key:"moveStickyTooltipOverBars",value:function(e){var t=this.w,r=this.ttCtx,a=t.globals.columnSeries?t.globals.columnSeries.length:t.globals.series.length,o=a>=2&&a%2==0?Math.floor(a/2):Math.floor(a/2)+1;t.globals.isBarHorizontal&&(o=new Be(this.ctx).getActiveConfigSeriesIndex(!1,"desc")+1);var h=t.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(o,"'] path[j='").concat(e,"'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(o,"'] path[j='").concat(e,"'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(o,"'] path[j='").concat(e,"'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(o,"'] path[j='").concat(e,"']")),c=h?parseFloat(h.getAttribute("cx")):0,d=h?parseFloat(h.getAttribute("cy")):0,p=h?parseFloat(h.getAttribute("barWidth")):0,x=h?parseFloat(h.getAttribute("barHeight")):0,m=r.getElGrid().getBoundingClientRect(),y=h.classList.contains("apexcharts-candlestick-area")||h.classList.contains("apexcharts-boxPlot-area");if(t.globals.isXNumeric?(h&&!y&&(c-=a%2!=0?p/2:0),h&&y&&t.globals.comboCharts&&(c-=p/2)):t.globals.isBarHorizontal||(c=r.xAxisTicksPositions[e-1]+r.dataPointsDividedWidth/2,isNaN(c)&&(c=r.xAxisTicksPositions[e]-r.dataPointsDividedWidth/2)),t.globals.isBarHorizontal?(d>t.globals.gridHeight/2&&(d-=r.tooltipRect.ttHeight),(d=d+t.config.grid.padding.top+x/3)+x>t.globals.gridHeight&&(d=t.globals.gridHeight-x)):t.config.tooltip.followCursor?d=r.e.clientY-m.top-r.tooltipRect.ttHeight/2:d+r.tooltipRect.ttHeight+15>t.globals.gridHeight&&(d=t.globals.gridHeight),d<-10&&(d=-10),t.globals.isBarHorizontal||this.moveXCrosshairs(c),!r.fixedTooltip){var A=d||t.globals.gridHeight;this.moveTooltip(c,A)}}}]),_}(),yt=function(){function _(e){f(this,_),this.w=e.w,this.ttCtx=e,this.ctx=e.ctx,this.tooltipPosition=new Jn(e)}return b(_,[{key:"drawDynamicPoints",value:function(){var e=this.w,t=new X(this.ctx),r=new Re(this.ctx),a=e.globals.dom.baseEl.querySelectorAll(".apexcharts-series");a=K(a),e.config.chart.stacked&&a.sort(function(m,y){return parseFloat(m.getAttribute("data:realIndex"))-parseFloat(y.getAttribute("data:realIndex"))});for(var o=0;o<a.length;o++){var h=a[o].querySelector(".apexcharts-series-markers-wrap");if(h!==null){var c=void 0,d="apexcharts-marker w".concat((Math.random()+1).toString(36).substring(4));e.config.chart.type!=="line"&&e.config.chart.type!=="area"||e.globals.comboCharts||e.config.tooltip.intersect||(d+=" no-pointer-events");var p=r.getMarkerConfig({cssClass:d,seriesIndex:Number(h.getAttribute("data:realIndex"))});(c=t.drawMarker(0,0,p)).node.setAttribute("default-marker-size",0);var x=document.createElementNS(e.globals.SVGNS,"g");x.classList.add("apexcharts-series-markers"),x.appendChild(c.node),h.appendChild(x)}}}},{key:"enlargeCurrentPoint",value:function(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:null,a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:null,o=this.w;o.config.chart.type!=="bubble"&&this.newPointSize(e,t);var h=t.getAttribute("cx"),c=t.getAttribute("cy");if(r!==null&&a!==null&&(h=r,c=a),this.tooltipPosition.moveXCrosshairs(h),!this.fixedTooltip){if(o.config.chart.type==="radar"){var d=this.ttCtx.getElGrid(),p=d.getBoundingClientRect();h=this.ttCtx.e.clientX-p.left}this.tooltipPosition.moveTooltip(h,c,o.config.markers.hover.size)}}},{key:"enlargePoints",value:function(e){for(var t=this.w,r=this,a=this.ttCtx,o=e,h=t.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"),c=t.config.markers.hover.size,d=0;d<h.length;d++){var p=h[d].getAttribute("rel"),x=h[d].getAttribute("index");if(c===void 0&&(c=t.globals.markers.size[x]+t.config.markers.hover.sizeOffset),o===parseInt(p,10)){r.newPointSize(o,h[d]);var m=h[d].getAttribute("cx"),y=h[d].getAttribute("cy");r.tooltipPosition.moveXCrosshairs(m),a.fixedTooltip||r.tooltipPosition.moveTooltip(m,y,c)}else r.oldPointSize(h[d])}}},{key:"newPointSize",value:function(e,t){var r=this.w,a=r.config.markers.hover.size,o=e===0?t.parentNode.firstChild:t.parentNode.lastChild;if(o.getAttribute("default-marker-size")!=="0"){var h=parseInt(o.getAttribute("index"),10);a===void 0&&(a=r.globals.markers.size[h]+r.config.markers.hover.sizeOffset),a<0&&(a=0),o.setAttribute("r",a)}}},{key:"oldPointSize",value:function(e){var t=parseFloat(e.getAttribute("default-marker-size"));e.setAttribute("r",t)}},{key:"resetPointsSize",value:function(){for(var e=this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"),t=0;t<e.length;t++){var r=parseFloat(e[t].getAttribute("default-marker-size"));P.isNumber(r)&&r>=0?e[t].setAttribute("r",r):e[t].setAttribute("r",0)}}}]),_}(),Bt=function(){function _(e){f(this,_),this.w=e.w,this.ttCtx=e}return b(_,[{key:"getAttr",value:function(e,t){return parseFloat(e.target.getAttribute(t))}},{key:"handleHeatTreeTooltip",value:function(e){var t=e.e,r=e.opt,a=e.x,o=e.y,h=e.type,c=this.ttCtx,d=this.w;if(t.target.classList.contains("apexcharts-".concat(h,"-rect"))){var p=this.getAttr(t,"i"),x=this.getAttr(t,"j"),m=this.getAttr(t,"cx"),y=this.getAttr(t,"cy"),A=this.getAttr(t,"width"),E=this.getAttr(t,"height");if(c.tooltipLabels.drawSeriesTexts({ttItems:r.ttItems,i:p,j:x,shared:!1,e:t}),d.globals.capturedSeriesIndex=p,d.globals.capturedDataPointIndex=x,a=m+c.tooltipRect.ttWidth/2+A,o=y+c.tooltipRect.ttHeight/2-E/2,c.tooltipPosition.moveXCrosshairs(m+A/2),a>d.globals.gridWidth/2&&(a=m-c.tooltipRect.ttWidth/2+A),c.w.config.tooltip.followCursor){var C=d.globals.dom.elWrap.getBoundingClientRect();a=d.globals.clientX-C.left-(a>d.globals.gridWidth/2?c.tooltipRect.ttWidth:0),o=d.globals.clientY-C.top-(o>d.globals.gridHeight/2?c.tooltipRect.ttHeight:0)}}return{x:a,y:o}}},{key:"handleMarkerTooltip",value:function(e){var t,r,a=e.e,o=e.opt,h=e.x,c=e.y,d=this.w,p=this.ttCtx;if(a.target.classList.contains("apexcharts-marker")){var x=parseInt(o.paths.getAttribute("cx"),10),m=parseInt(o.paths.getAttribute("cy"),10),y=parseFloat(o.paths.getAttribute("val"));if(r=parseInt(o.paths.getAttribute("rel"),10),t=parseInt(o.paths.parentNode.parentNode.parentNode.getAttribute("rel"),10)-1,p.intersect){var A=P.findAncestor(o.paths,"apexcharts-series");A&&(t=parseInt(A.getAttribute("data:realIndex"),10))}if(p.tooltipLabels.drawSeriesTexts({ttItems:o.ttItems,i:t,j:r,shared:!p.showOnIntersect&&d.config.tooltip.shared,e:a}),a.type==="mouseup"&&p.markerClick(a,t,r),d.globals.capturedSeriesIndex=t,d.globals.capturedDataPointIndex=r,h=x,c=m+d.globals.translateY-1.4*p.tooltipRect.ttHeight,p.w.config.tooltip.followCursor){var E=p.getElGrid().getBoundingClientRect();c=p.e.clientY+d.globals.translateY-E.top}y<0&&(c=m),p.marker.enlargeCurrentPoint(r,o.paths,h,c)}return{x:h,y:c}}},{key:"handleBarTooltip",value:function(e){var t,r,a=e.e,o=e.opt,h=this.w,c=this.ttCtx,d=c.getElTooltip(),p=0,x=0,m=0,y=this.getBarTooltipXY({e:a,opt:o});t=y.i;var A=y.barHeight,E=y.j;h.globals.capturedSeriesIndex=t,h.globals.capturedDataPointIndex=E,h.globals.isBarHorizontal&&c.tooltipUtil.hasBars()||!h.config.tooltip.shared?(x=y.x,m=y.y,r=Array.isArray(h.config.stroke.width)?h.config.stroke.width[t]:h.config.stroke.width,p=x):h.globals.comboCharts||h.config.tooltip.shared||(p/=2),isNaN(m)?m=h.globals.svgHeight-c.tooltipRect.ttHeight:m<0&&(m=0);var C=parseInt(o.paths.parentNode.getAttribute("data:realIndex"),10),L=h.globals.isMultipleYAxis?h.config.yaxis[C]&&h.config.yaxis[C].reversed:h.config.yaxis[0].reversed;if(x+c.tooltipRect.ttWidth>h.globals.gridWidth&&!L?x-=c.tooltipRect.ttWidth:x<0&&(x=0),c.w.config.tooltip.followCursor){var R=c.getElGrid().getBoundingClientRect();m=c.e.clientY-R.top}c.tooltip===null&&(c.tooltip=h.globals.dom.baseEl.querySelector(".apexcharts-tooltip")),h.config.tooltip.shared||(h.globals.comboBarCount>0?c.tooltipPosition.moveXCrosshairs(p+r/2):c.tooltipPosition.moveXCrosshairs(p)),!c.fixedTooltip&&(!h.config.tooltip.shared||h.globals.isBarHorizontal&&c.tooltipUtil.hasBars())&&(L&&(x-=c.tooltipRect.ttWidth)<0&&(x=0),!L||h.globals.isBarHorizontal&&c.tooltipUtil.hasBars()||(m=m+A-2*(h.globals.series[t][E]<0?A:0)),c.tooltipRect.ttHeight+m>h.globals.gridHeight?m=h.globals.gridHeight-c.tooltipRect.ttHeight+h.globals.translateY:(m=m+h.globals.translateY-c.tooltipRect.ttHeight/2)<0&&(m=0),d.style.left=x+h.globals.translateX+"px",d.style.top=m+"px")}},{key:"getBarTooltipXY",value:function(e){var t=e.e,r=e.opt,a=this.w,o=null,h=this.ttCtx,c=0,d=0,p=0,x=0,m=0,y=t.target.classList;if(y.contains("apexcharts-bar-area")||y.contains("apexcharts-candlestick-area")||y.contains("apexcharts-boxPlot-area")||y.contains("apexcharts-rangebar-area")){var A=t.target,E=A.getBoundingClientRect(),C=r.elGrid.getBoundingClientRect(),L=E.height;m=E.height;var R=E.width,F=parseInt(A.getAttribute("cx"),10),D=parseInt(A.getAttribute("cy"),10);x=parseFloat(A.getAttribute("barWidth"));var g=t.type==="touchmove"?t.touches[0].clientX:t.clientX;o=parseInt(A.getAttribute("j"),10),c=parseInt(A.parentNode.getAttribute("rel"),10)-1;var w=A.getAttribute("data-range-y1"),T=A.getAttribute("data-range-y2");a.globals.comboCharts&&(c=parseInt(A.parentNode.getAttribute("data:realIndex"),10)),h.tooltipLabels.drawSeriesTexts({ttItems:r.ttItems,i:c,j:o,y1:w?parseInt(w,10):null,y2:T?parseInt(T,10):null,shared:!h.showOnIntersect&&a.config.tooltip.shared,e:t}),a.config.tooltip.followCursor?a.globals.isBarHorizontal?(d=g-C.left+15,p=D-h.dataPointsDividedHeight+L/2-h.tooltipRect.ttHeight/2):(d=a.globals.isXNumeric?F-R/2:F-h.dataPointsDividedWidth+R/2,p=t.clientY-C.top-h.tooltipRect.ttHeight/2-15):a.globals.isBarHorizontal?((d=F)<h.xyRatios.baseLineInvertedY&&(d=F-h.tooltipRect.ttWidth),p=D-h.dataPointsDividedHeight+L/2-h.tooltipRect.ttHeight/2):(d=a.globals.isXNumeric?F-R/2:F-h.dataPointsDividedWidth+R/2,p=D)}return{x:d,y:p,barHeight:m,barWidth:x,i:c,j:o}}}]),_}(),Yr=function(){function _(e){f(this,_),this.w=e.w,this.ttCtx=e}return b(_,[{key:"drawXaxisTooltip",value:function(){var e=this.w,t=this.ttCtx,r=e.config.xaxis.position==="bottom";t.xaxisOffY=r?e.globals.gridHeight+1:-e.globals.xAxisHeight-e.config.xaxis.axisTicks.height+3;var a=r?"apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom":"apexcharts-xaxistooltip apexcharts-xaxistooltip-top",o=e.globals.dom.elWrap;t.isXAxisTooltipEnabled&&e.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip")===null&&(t.xaxisTooltip=document.createElement("div"),t.xaxisTooltip.setAttribute("class",a+" apexcharts-theme-"+e.config.tooltip.theme),o.appendChild(t.xaxisTooltip),t.xaxisTooltipText=document.createElement("div"),t.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"),t.xaxisTooltipText.style.fontFamily=e.config.xaxis.tooltip.style.fontFamily||e.config.chart.fontFamily,t.xaxisTooltipText.style.fontSize=e.config.xaxis.tooltip.style.fontSize,t.xaxisTooltip.appendChild(t.xaxisTooltipText))}},{key:"drawYaxisTooltip",value:function(){for(var e=this.w,t=this.ttCtx,r=function(o){var h=e.config.yaxis[o].opposite||e.config.yaxis[o].crosshairs.opposite;t.yaxisOffX=h?e.globals.gridWidth+1:1;var c="apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(o,h?" apexcharts-yaxistooltip-right":" apexcharts-yaxistooltip-left");e.globals.yAxisSameScaleIndices.map(function(p,x){p.map(function(m,y){y===o&&(c+=e.config.yaxis[y].show?" ":" apexcharts-yaxistooltip-hidden")})});var d=e.globals.dom.elWrap;e.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(o))===null&&(t.yaxisTooltip=document.createElement("div"),t.yaxisTooltip.setAttribute("class",c+" apexcharts-theme-"+e.config.tooltip.theme),d.appendChild(t.yaxisTooltip),o===0&&(t.yaxisTooltipText=[]),t.yaxisTooltipText[o]=document.createElement("div"),t.yaxisTooltipText[o].classList.add("apexcharts-yaxistooltip-text"),t.yaxisTooltip.appendChild(t.yaxisTooltipText[o]))},a=0;a<e.config.yaxis.length;a++)r(a)}},{key:"setXCrosshairWidth",value:function(){var e=this.w,t=this.ttCtx,r=t.getElXCrosshairs();if(t.xcrosshairsWidth=parseInt(e.config.xaxis.crosshairs.width,10),e.globals.comboCharts){var a=e.globals.dom.baseEl.querySelector(".apexcharts-bar-area");if(a!==null&&e.config.xaxis.crosshairs.width==="barWidth"){var o=parseFloat(a.getAttribute("barWidth"));t.xcrosshairsWidth=o}else if(e.config.xaxis.crosshairs.width==="tickWidth"){var h=e.globals.labels.length;t.xcrosshairsWidth=e.globals.gridWidth/h}}else if(e.config.xaxis.crosshairs.width==="tickWidth"){var c=e.globals.labels.length;t.xcrosshairsWidth=e.globals.gridWidth/c}else if(e.config.xaxis.crosshairs.width==="barWidth"){var d=e.globals.dom.baseEl.querySelector(".apexcharts-bar-area");if(d!==null){var p=parseFloat(d.getAttribute("barWidth"));t.xcrosshairsWidth=p}else t.xcrosshairsWidth=1}e.globals.isBarHorizontal&&(t.xcrosshairsWidth=0),r!==null&&t.xcrosshairsWidth>0&&r.setAttribute("width",t.xcrosshairsWidth)}},{key:"handleYCrosshair",value:function(){var e=this.w,t=this.ttCtx;t.ycrosshairs=e.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"),t.ycrosshairsHidden=e.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden")}},{key:"drawYaxisTooltipText",value:function(e,t,r){var a=this.ttCtx,o=this.w,h=o.globals.yLabelFormatters[e];if(a.yaxisTooltips[e]){var c=a.getElGrid().getBoundingClientRect(),d=(t-c.top)*r.yRatio[e],p=o.globals.maxYArr[e]-o.globals.minYArr[e],x=o.globals.minYArr[e]+(p-d);a.tooltipPosition.moveYCrosshairs(t-c.top),a.yaxisTooltipText[e].innerHTML=h(x),a.tooltipPosition.moveYAxisTooltip(e)}}}]),_}(),xf=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w;var t=this.w;this.tConfig=t.config.tooltip,this.tooltipUtil=new Zn(this),this.tooltipLabels=new Bi(this),this.tooltipPosition=new Jn(this),this.marker=new yt(this),this.intersect=new Bt(this),this.axesTooltip=new Yr(this),this.showOnIntersect=this.tConfig.intersect,this.showTooltipTitle=this.tConfig.x.show,this.fixedTooltip=this.tConfig.fixed.enabled,this.xaxisTooltip=null,this.yaxisTTEls=null,this.isBarShared=!t.globals.isBarHorizontal&&this.tConfig.shared,this.lastHoverTime=Date.now()}return b(_,[{key:"getElTooltip",value:function(e){return e||(e=this),e.w.globals.dom.baseEl?e.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip"):null}},{key:"getElXCrosshairs",value:function(){return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs")}},{key:"getElGrid",value:function(){return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid")}},{key:"drawTooltip",value:function(e){var t=this.w;this.xyRatios=e,this.isXAxisTooltipEnabled=t.config.xaxis.tooltip.enabled&&t.globals.axisCharts,this.yaxisTooltips=t.config.yaxis.map(function(h,c){return!!(h.show&&h.tooltip.enabled&&t.globals.axisCharts)}),this.allTooltipSeriesGroups=[],t.globals.axisCharts||(this.showTooltipTitle=!1);var r=document.createElement("div");if(r.classList.add("apexcharts-tooltip"),t.config.tooltip.cssClass&&r.classList.add(t.config.tooltip.cssClass),r.classList.add("apexcharts-theme-".concat(this.tConfig.theme)),t.globals.dom.elWrap.appendChild(r),t.globals.axisCharts){this.axesTooltip.drawXaxisTooltip(),this.axesTooltip.drawYaxisTooltip(),this.axesTooltip.setXCrosshairWidth(),this.axesTooltip.handleYCrosshair();var a=new Le(this.ctx);this.xAxisTicksPositions=a.getXAxisTicksPositions()}if(!t.globals.comboCharts&&!this.tConfig.intersect&&t.config.chart.type!=="rangeBar"||this.tConfig.shared||(this.showOnIntersect=!0),t.config.markers.size!==0&&t.globals.markers.largestSize!==0||this.marker.drawDynamicPoints(this),t.globals.collapsedSeries.length!==t.globals.series.length){this.dataPointsDividedHeight=t.globals.gridHeight/t.globals.dataPoints,this.dataPointsDividedWidth=t.globals.gridWidth/t.globals.dataPoints,this.showTooltipTitle&&(this.tooltipTitle=document.createElement("div"),this.tooltipTitle.classList.add("apexcharts-tooltip-title"),this.tooltipTitle.style.fontFamily=this.tConfig.style.fontFamily||t.config.chart.fontFamily,this.tooltipTitle.style.fontSize=this.tConfig.style.fontSize,r.appendChild(this.tooltipTitle));var o=t.globals.series.length;(t.globals.xyCharts||t.globals.comboCharts)&&this.tConfig.shared&&(o=this.showOnIntersect?1:t.globals.series.length),this.legendLabels=t.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"),this.ttItems=this.createTTElements(o),this.addSVGEvents()}}},{key:"createTTElements",value:function(e){for(var t=this,r=this.w,a=[],o=this.getElTooltip(),h=function(d){var p=document.createElement("div");p.classList.add("apexcharts-tooltip-series-group"),p.style.order=r.config.tooltip.inverseOrder?e-d:d+1,t.tConfig.shared&&t.tConfig.enabledOnSeries&&Array.isArray(t.tConfig.enabledOnSeries)&&t.tConfig.enabledOnSeries.indexOf(d)<0&&p.classList.add("apexcharts-tooltip-series-group-hidden");var x=document.createElement("span");x.classList.add("apexcharts-tooltip-marker"),x.style.backgroundColor=r.globals.colors[d],p.appendChild(x);var m=document.createElement("div");m.classList.add("apexcharts-tooltip-text"),m.style.fontFamily=t.tConfig.style.fontFamily||r.config.chart.fontFamily,m.style.fontSize=t.tConfig.style.fontSize,["y","goals","z"].forEach(function(y){var A=document.createElement("div");A.classList.add("apexcharts-tooltip-".concat(y,"-group"));var E=document.createElement("span");E.classList.add("apexcharts-tooltip-text-".concat(y,"-label")),A.appendChild(E);var C=document.createElement("span");C.classList.add("apexcharts-tooltip-text-".concat(y,"-value")),A.appendChild(C),m.appendChild(A)}),p.appendChild(m),o.appendChild(p),a.push(p)},c=0;c<e;c++)h(c);return a}},{key:"addSVGEvents",value:function(){var e=this.w,t=e.config.chart.type,r=this.getElTooltip(),a=!(t!=="bar"&&t!=="candlestick"&&t!=="boxPlot"&&t!=="rangeBar"),o=t==="area"||t==="line"||t==="scatter"||t==="bubble"||t==="radar",h=e.globals.dom.Paper.node,c=this.getElGrid();c&&(this.seriesBound=c.getBoundingClientRect());var d,p=[],x=[],m={hoverArea:h,elGrid:c,tooltipEl:r,tooltipY:p,tooltipX:x,ttItems:this.ttItems};if(e.globals.axisCharts&&(o?d=e.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker"):a?d=e.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area"):t!=="heatmap"&&t!=="treemap"||(d=e.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")),d&&d.length))for(var y=0;y<d.length;y++)p.push(d[y].getAttribute("cy")),x.push(d[y].getAttribute("cx"));if(e.globals.xyCharts&&!this.showOnIntersect||e.globals.comboCharts&&!this.showOnIntersect||a&&this.tooltipUtil.hasBars()&&this.tConfig.shared)this.addPathsEventListeners([h],m);else if(a&&!e.globals.comboCharts||o&&this.showOnIntersect)this.addDatapointEventsListeners(m);else if(!e.globals.axisCharts||t==="heatmap"||t==="treemap"){var A=e.globals.dom.baseEl.querySelectorAll(".apexcharts-series");this.addPathsEventListeners(A,m)}if(this.showOnIntersect){var E=e.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");E.length>0&&this.addPathsEventListeners(E,m),this.tooltipUtil.hasBars()&&!this.tConfig.shared&&this.addDatapointEventsListeners(m)}}},{key:"drawFixedTooltipRect",value:function(){var e=this.w,t=this.getElTooltip(),r=t.getBoundingClientRect(),a=r.width+10,o=r.height+10,h=this.tConfig.fixed.offsetX,c=this.tConfig.fixed.offsetY,d=this.tConfig.fixed.position.toLowerCase();return d.indexOf("right")>-1&&(h=h+e.globals.svgWidth-a+10),d.indexOf("bottom")>-1&&(c=c+e.globals.svgHeight-o-10),t.style.left=h+"px",t.style.top=c+"px",{x:h,y:c,ttWidth:a,ttHeight:o}}},{key:"addDatapointEventsListeners",value:function(e){var t=this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");this.addPathsEventListeners(t,e)}},{key:"addPathsEventListeners",value:function(e,t){for(var r=this,a=function(h){var c={paths:e[h],tooltipEl:t.tooltipEl,tooltipY:t.tooltipY,tooltipX:t.tooltipX,elGrid:t.elGrid,hoverArea:t.hoverArea,ttItems:t.ttItems};["mousemove","mouseup","touchmove","mouseout","touchend"].map(function(d){return e[h].addEventListener(d,r.onSeriesHover.bind(r,c),{capture:!1,passive:!0})})},o=0;o<e.length;o++)a(o)}},{key:"onSeriesHover",value:function(e,t){var r=this,a=Date.now()-this.lastHoverTime;a>=100?this.seriesHover(e,t):(clearTimeout(this.seriesHoverTimeout),this.seriesHoverTimeout=setTimeout(function(){r.seriesHover(e,t)},100-a))}},{key:"seriesHover",value:function(e,t){var r=this;this.lastHoverTime=Date.now();var a=[],o=this.w;o.config.chart.group&&(a=this.ctx.getGroupedCharts()),o.globals.axisCharts&&(o.globals.minX===-1/0&&o.globals.maxX===1/0||o.globals.dataPoints===0)||(a.length?a.forEach(function(h){var c=r.getElTooltip(h),d={paths:e.paths,tooltipEl:c,tooltipY:e.tooltipY,tooltipX:e.tooltipX,elGrid:e.elGrid,hoverArea:e.hoverArea,ttItems:h.w.globals.tooltip.ttItems};h.w.globals.minX===r.w.globals.minX&&h.w.globals.maxX===r.w.globals.maxX&&h.w.globals.tooltip.seriesHoverByContext({chartCtx:h,ttCtx:h.w.globals.tooltip,opt:d,e:t})}):this.seriesHoverByContext({chartCtx:this.ctx,ttCtx:this.w.globals.tooltip,opt:e,e:t}))}},{key:"seriesHoverByContext",value:function(e){var t=e.chartCtx,r=e.ttCtx,a=e.opt,o=e.e,h=t.w,c=this.getElTooltip();c&&(r.tooltipRect={x:0,y:0,ttWidth:c.getBoundingClientRect().width,ttHeight:c.getBoundingClientRect().height},r.e=o,r.tooltipUtil.hasBars()&&!h.globals.comboCharts&&!r.isBarShared&&this.tConfig.onDatasetHover.highlightDataSeries&&new Be(t).toggleSeriesOnHover(o,o.target.parentNode),r.fixedTooltip&&r.drawFixedTooltipRect(),h.globals.axisCharts?r.axisChartsTooltips({e:o,opt:a,tooltipRect:r.tooltipRect}):r.nonAxisChartsTooltips({e:o,opt:a,tooltipRect:r.tooltipRect}))}},{key:"axisChartsTooltips",value:function(e){var t,r,a=e.e,o=e.opt,h=this.w,c=o.elGrid.getBoundingClientRect(),d=a.type==="touchmove"?a.touches[0].clientX:a.clientX,p=a.type==="touchmove"?a.touches[0].clientY:a.clientY;if(this.clientY=p,this.clientX=d,h.globals.capturedSeriesIndex=-1,h.globals.capturedDataPointIndex=-1,p<c.top||p>c.top+c.height)this.handleMouseOut(o);else{if(Array.isArray(this.tConfig.enabledOnSeries)&&!h.config.tooltip.shared){var x=parseInt(o.paths.getAttribute("index"),10);if(this.tConfig.enabledOnSeries.indexOf(x)<0)return void this.handleMouseOut(o)}var m=this.getElTooltip(),y=this.getElXCrosshairs(),A=h.globals.xyCharts||h.config.chart.type==="bar"&&!h.globals.isBarHorizontal&&this.tooltipUtil.hasBars()&&this.tConfig.shared||h.globals.comboCharts&&this.tooltipUtil.hasBars();if(a.type==="mousemove"||a.type==="touchmove"||a.type==="mouseup"){if(h.globals.collapsedSeries.length+h.globals.ancillaryCollapsedSeries.length===h.globals.series.length)return;y!==null&&y.classList.add("apexcharts-active");var E=this.yaxisTooltips.filter(function(R){return R===!0});if(this.ycrosshairs!==null&&E.length&&this.ycrosshairs.classList.add("apexcharts-active"),A&&!this.showOnIntersect)this.handleStickyTooltip(a,d,p,o);else if(h.config.chart.type==="heatmap"||h.config.chart.type==="treemap"){var C=this.intersect.handleHeatTreeTooltip({e:a,opt:o,x:t,y:r,type:h.config.chart.type});t=C.x,r=C.y,m.style.left=t+"px",m.style.top=r+"px"}else this.tooltipUtil.hasBars()&&this.intersect.handleBarTooltip({e:a,opt:o}),this.tooltipUtil.hasMarkers()&&this.intersect.handleMarkerTooltip({e:a,opt:o,x:t,y:r});if(this.yaxisTooltips.length)for(var L=0;L<h.config.yaxis.length;L++)this.axesTooltip.drawYaxisTooltipText(L,p,this.xyRatios);o.tooltipEl.classList.add("apexcharts-active")}else a.type!=="mouseout"&&a.type!=="touchend"||this.handleMouseOut(o)}}},{key:"nonAxisChartsTooltips",value:function(e){var t=e.e,r=e.opt,a=e.tooltipRect,o=this.w,h=r.paths.getAttribute("rel"),c=this.getElTooltip(),d=o.globals.dom.elWrap.getBoundingClientRect();if(t.type==="mousemove"||t.type==="touchmove"){c.classList.add("apexcharts-active"),this.tooltipLabels.drawSeriesTexts({ttItems:r.ttItems,i:parseInt(h,10)-1,shared:!1});var p=o.globals.clientX-d.left-a.ttWidth/2,x=o.globals.clientY-d.top-a.ttHeight-10;if(c.style.left=p+"px",c.style.top=x+"px",o.config.legend.tooltipHoverFormatter){var m=h-1,y=(0,o.config.legend.tooltipHoverFormatter)(this.legendLabels[m].getAttribute("data:default-text"),{seriesIndex:m,dataPointIndex:m,w:o});this.legendLabels[m].innerHTML=y}}else t.type!=="mouseout"&&t.type!=="touchend"||(c.classList.remove("apexcharts-active"),o.config.legend.tooltipHoverFormatter&&this.legendLabels.forEach(function(A){var E=A.getAttribute("data:default-text");A.innerHTML=decodeURIComponent(E)}))}},{key:"handleStickyTooltip",value:function(e,t,r,a){var o=this.w,h=this.tooltipUtil.getNearestValues({context:this,hoverArea:a.hoverArea,elGrid:a.elGrid,clientX:t,clientY:r}),c=h.j,d=h.capturedSeries,p=a.elGrid.getBoundingClientRect();h.hoverX<0||h.hoverX>p.width?this.handleMouseOut(a):d!==null?this.handleStickyCapturedSeries(e,d,a,c):(this.tooltipUtil.isXoverlap(c)||o.globals.isBarHorizontal)&&this.create(e,this,0,c,a.ttItems)}},{key:"handleStickyCapturedSeries",value:function(e,t,r,a){var o=this.w;if(!this.tConfig.shared&&o.globals.series[t][a]===null)return void this.handleMouseOut(r);o.globals.series[t][a]!==void 0?this.tConfig.shared&&this.tooltipUtil.isXoverlap(a)&&this.tooltipUtil.isInitialSeriesSameLen()?this.create(e,this,t,a,r.ttItems):this.create(e,this,t,a,r.ttItems,!1):this.tooltipUtil.isXoverlap(a)&&this.create(e,this,0,a,r.ttItems)}},{key:"deactivateHoverFilter",value:function(){for(var e=this.w,t=new X(this.ctx),r=e.globals.dom.Paper.select(".apexcharts-bar-area"),a=0;a<r.length;a++)t.pathMouseLeave(r[a])}},{key:"handleMouseOut",value:function(e){var t=this.w,r=this.getElXCrosshairs();if(e.tooltipEl.classList.remove("apexcharts-active"),this.deactivateHoverFilter(),t.config.chart.type!=="bubble"&&this.marker.resetPointsSize(),r!==null&&r.classList.remove("apexcharts-active"),this.ycrosshairs!==null&&this.ycrosshairs.classList.remove("apexcharts-active"),this.isXAxisTooltipEnabled&&this.xaxisTooltip.classList.remove("apexcharts-active"),this.yaxisTooltips.length){this.yaxisTTEls===null&&(this.yaxisTTEls=t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));for(var a=0;a<this.yaxisTTEls.length;a++)this.yaxisTTEls[a].classList.remove("apexcharts-active")}t.config.legend.tooltipHoverFormatter&&this.legendLabels.forEach(function(o){var h=o.getAttribute("data:default-text");o.innerHTML=decodeURIComponent(h)})}},{key:"markerClick",value:function(e,t,r){var a=this.w;typeof a.config.chart.events.markerClick=="function"&&a.config.chart.events.markerClick(e,this.ctx,{seriesIndex:t,dataPointIndex:r,w:a}),this.ctx.events.fireEvent("markerClick",[e,this.ctx,{seriesIndex:t,dataPointIndex:r,w:a}])}},{key:"create",value:function(e,t,r,a,o){var h=arguments.length>5&&arguments[5]!==void 0?arguments[5]:null,c=this.w,d=t;e.type==="mouseup"&&this.markerClick(e,r,a),h===null&&(h=this.tConfig.shared);var p=this.tooltipUtil.hasMarkers(),x=this.tooltipUtil.getElBars();if(c.config.legend.tooltipHoverFormatter){var m=c.config.legend.tooltipHoverFormatter,y=Array.from(this.legendLabels);y.forEach(function(w){var T=w.getAttribute("data:default-text");w.innerHTML=decodeURIComponent(T)});for(var A=0;A<y.length;A++){var E=y[A],C=parseInt(E.getAttribute("i"),10),L=decodeURIComponent(E.getAttribute("data:default-text")),R=m(L,{seriesIndex:h?C:r,dataPointIndex:a,w:c});if(h)E.innerHTML=c.globals.collapsedSeriesIndices.indexOf(C)<0?R:L;else if(E.innerHTML=C===r?R:L,r===C)break}}if(h){if(d.tooltipLabels.drawSeriesTexts({ttItems:o,i:r,j:a,shared:!this.showOnIntersect&&this.tConfig.shared}),p&&(c.globals.markers.largestSize>0?d.marker.enlargePoints(a):d.tooltipPosition.moveDynamicPointsOnHover(a)),this.tooltipUtil.hasBars()&&(this.barSeriesHeight=this.tooltipUtil.getBarsHeight(x),this.barSeriesHeight>0)){var F=new X(this.ctx),D=c.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(a,"']"));this.deactivateHoverFilter(),this.tooltipPosition.moveStickyTooltipOverBars(a);for(var g=0;g<D.length;g++)F.pathMouseEnter(D[g])}}else d.tooltipLabels.drawSeriesTexts({shared:!1,ttItems:o,i:r,j:a}),this.tooltipUtil.hasBars()&&d.tooltipPosition.moveStickyTooltipOverBars(a),p&&d.tooltipPosition.moveMarkers(r,a)}}]),_}(),El=function(_){S(t,nt);var e=z(t);function t(){return f(this,t),e.apply(this,arguments)}return b(t,[{key:"draw",value:function(r,a){var o=this,h=this.w;this.graphics=new X(this.ctx),this.bar=new nt(this.ctx,this.xyRatios);var c=new Z(this.ctx,h);r=c.getLogSeries(r),this.yRatio=c.getLogYRatios(this.yRatio),this.barHelpers.initVariables(r),h.config.chart.stackType==="100%"&&(r=h.globals.seriesPercent.slice()),this.series=r,this.totalItems=0,this.prevY=[],this.prevX=[],this.prevYF=[],this.prevXF=[],this.prevYVal=[],this.prevXVal=[],this.xArrj=[],this.xArrjF=[],this.xArrjVal=[],this.yArrj=[],this.yArrjF=[],this.yArrjVal=[];for(var d=0;d<r.length;d++)r[d].length>0&&(this.totalItems+=r[d].length);for(var p=this.graphics.group({class:"apexcharts-bar-series apexcharts-plot-series"}),x=0,m=0,y=function(C,L){var R=void 0,F=void 0,D=void 0,g=void 0,w=[],T=[],M=h.globals.comboCharts?a[C]:C;o.yRatio.length>1&&(o.yaxisIndex=M),o.isReversed=h.config.yaxis[o.yaxisIndex]&&h.config.yaxis[o.yaxisIndex].reversed;var V=o.graphics.group({class:"apexcharts-series",seriesName:P.escapeString(h.globals.seriesNames[M]),rel:C+1,"data:realIndex":M});o.ctx.series.addCollapsedClassToSeries(V,M);var J=o.graphics.group({class:"apexcharts-datalabels","data:realIndex":M}),G=0,oe=0,re=o.initialPositions(x,m,R,F,D,g);m=re.y,G=re.barHeight,F=re.yDivision,g=re.zeroW,x=re.x,oe=re.barWidth,R=re.xDivision,D=re.zeroH,o.yArrj=[],o.yArrjF=[],o.yArrjVal=[],o.xArrj=[],o.xArrjF=[],o.xArrjVal=[],o.prevY.length===1&&o.prevY[0].every(function(Ct){return isNaN(Ct)})&&(o.prevY[0]=o.prevY[0].map(function(Ct){return D}),o.prevYF[0]=o.prevYF[0].map(function(Ct){return 0}));for(var ge=0;ge<h.globals.dataPoints;ge++){var Pe=o.barHelpers.getStrokeWidth(C,ge,M),et={indexes:{i:C,j:ge,realIndex:M,bc:L},strokeWidth:Pe,x,y:m,elSeries:V},We=null;o.isHorizontal?(We=o.drawStackedBarPaths(l(l({},et),{},{zeroW:g,barHeight:G,yDivision:F})),oe=o.series[C][ge]/o.invertedYRatio):(We=o.drawStackedColumnPaths(l(l({},et),{},{xDivision:R,barWidth:oe,zeroH:D})),G=o.series[C][ge]/o.yRatio[o.yaxisIndex]),m=We.y,x=We.x,w.push(x),T.push(m);var gt=o.barHelpers.getPathFillColor(r,C,ge,M);V=o.renderSeries({realIndex:M,pathFill:gt,j:ge,i:C,pathFrom:We.pathFrom,pathTo:We.pathTo,strokeWidth:Pe,elSeries:V,x,y:m,series:r,barHeight:G,barWidth:oe,elDataLabelsWrap:J,type:"bar",visibleSeries:0})}h.globals.seriesXvalues[M]=w,h.globals.seriesYvalues[M]=T,o.prevY.push(o.yArrj),o.prevYF.push(o.yArrjF),o.prevYVal.push(o.yArrjVal),o.prevX.push(o.xArrj),o.prevXF.push(o.xArrjF),o.prevXVal.push(o.xArrjVal),p.add(V)},A=0,E=0;A<r.length;A++,E++)y(A,E);return p}},{key:"initialPositions",value:function(r,a,o,h,c,d){var p,x,m=this.w;return this.isHorizontal?(p=(p=h=m.globals.gridHeight/m.globals.dataPoints)*parseInt(m.config.plotOptions.bar.barHeight,10)/100,d=this.baseLineInvertedY+m.globals.padHorizontal+(this.isReversed?m.globals.gridWidth:0)-(this.isReversed?2*this.baseLineInvertedY:0),a=(h-p)/2):(x=o=m.globals.gridWidth/m.globals.dataPoints,x=m.globals.isXNumeric&&m.globals.dataPoints>1?(o=m.globals.minXDiff/this.xRatio)*parseInt(this.barOptions.columnWidth,10)/100:x*parseInt(m.config.plotOptions.bar.columnWidth,10)/100,c=this.baseLineY[this.yaxisIndex]+(this.isReversed?m.globals.gridHeight:0)-(this.isReversed?2*this.baseLineY[this.yaxisIndex]:0),r=m.globals.padHorizontal+(o-x)/2),{x:r,y:a,yDivision:h,xDivision:o,barHeight:p,barWidth:x,zeroH:c,zeroW:d}}},{key:"drawStackedBarPaths",value:function(r){for(var a,o=r.indexes,h=r.barHeight,c=r.strokeWidth,d=r.zeroW,p=r.x,x=r.y,m=r.yDivision,y=r.elSeries,A=this.w,E=x,C=o.i,L=o.j,R=0,F=0;F<this.prevXF.length;F++)R+=this.prevXF[F][L];if(C>0){var D=d;this.prevXVal[C-1][L]<0?D=this.series[C][L]>=0?this.prevX[C-1][L]+R-2*(this.isReversed?R:0):this.prevX[C-1][L]:this.prevXVal[C-1][L]>=0&&(D=this.series[C][L]>=0?this.prevX[C-1][L]:this.prevX[C-1][L]-R+2*(this.isReversed?R:0)),a=D}else a=d;p=this.series[C][L]===null?a:a+this.series[C][L]/this.invertedYRatio-2*(this.isReversed?this.series[C][L]/this.invertedYRatio:0);var g=this.barHelpers.getBarpaths({barYPosition:E,barHeight:h,x1:a,x2:p,strokeWidth:c,series:this.series,realIndex:o.realIndex,i:C,j:L,w:A});return this.barHelpers.barBackground({j:L,i:C,y1:E,y2:h,elSeries:y}),x+=m,{pathTo:g.pathTo,pathFrom:g.pathFrom,x:p,y:x}}},{key:"drawStackedColumnPaths",value:function(r){var a=r.indexes,o=r.x,h=r.y,c=r.xDivision,d=r.barWidth,p=r.zeroH;r.strokeWidth;var x=r.elSeries,m=this.w,y=a.i,A=a.j,E=a.bc;if(m.globals.isXNumeric){var C=m.globals.seriesX[y][A];C||(C=0),o=(C-m.globals.minX)/this.xRatio-d/2}for(var L,R=o,F=0,D=0;D<this.prevYF.length;D++)F+=isNaN(this.prevYF[D][A])?0:this.prevYF[D][A];if(y>0&&!m.globals.isXNumeric||y>0&&m.globals.isXNumeric&&m.globals.seriesX[y-1][A]===m.globals.seriesX[y][A]){var g,w,T=Math.min(this.yRatio.length+1,y+1);if(this.prevY[y-1]!==void 0){for(var M=1;M<T;M++)if(!isNaN(this.prevY[y-M][A])){w=this.prevY[y-M][A];break}}for(var V=1;V<T;V++){if(this.prevYVal[y-V][A]<0){g=this.series[y][A]>=0?w-F+2*(this.isReversed?F:0):w;break}if(this.prevYVal[y-V][A]>=0){g=this.series[y][A]>=0?w:w+F-2*(this.isReversed?F:0);break}}g===void 0&&(g=m.globals.gridHeight),L=this.prevYF[0].every(function(G){return G===0})&&this.prevYF.slice(1,y).every(function(G){return G.every(function(oe){return isNaN(oe)})})?m.globals.gridHeight-p:g}else L=m.globals.gridHeight-p;h=L-this.series[y][A]/this.yRatio[this.yaxisIndex]+2*(this.isReversed?this.series[y][A]/this.yRatio[this.yaxisIndex]:0);var J=this.barHelpers.getColumnPaths({barXPosition:R,barWidth:d,y1:L,y2:h,yRatio:this.yRatio[this.yaxisIndex],strokeWidth:this.strokeWidth,series:this.series,realIndex:a.realIndex,i:y,j:A,w:m});return this.barHelpers.barBackground({bc:E,j:A,i:y,x1:R,x2:d,elSeries:x}),o+=c,{pathTo:J.pathTo,pathFrom:J.pathFrom,x:m.globals.isXNumeric?o-c:o,y:h}}}]),t}(),cs=function(_){S(t,nt);var e=z(t);function t(){return f(this,t),e.apply(this,arguments)}return b(t,[{key:"draw",value:function(r,a){var o=this,h=this.w,c=new X(this.ctx),d=new he(this.ctx);this.candlestickOptions=this.w.config.plotOptions.candlestick,this.boxOptions=this.w.config.plotOptions.boxPlot,this.isHorizontal=h.config.plotOptions.bar.horizontal;var p=new Z(this.ctx,h);r=p.getLogSeries(r),this.series=r,this.yRatio=p.getLogYRatios(this.yRatio),this.barHelpers.initVariables(r);for(var x=c.group({class:"apexcharts-".concat(h.config.chart.type,"-series apexcharts-plot-series")}),m=function(A){o.isBoxPlot=h.config.chart.type==="boxPlot"||h.config.series[A].type==="boxPlot";var E,C,L,R,F=void 0,D=void 0,g=[],w=[],T=h.globals.comboCharts?a[A]:A,M=c.group({class:"apexcharts-series",seriesName:P.escapeString(h.globals.seriesNames[T]),rel:A+1,"data:realIndex":T});o.ctx.series.addCollapsedClassToSeries(M,T),r[A].length>0&&(o.visibleI=o.visibleI+1);var V,J;o.yRatio.length>1&&(o.yaxisIndex=T);var G=o.barHelpers.initialPositions();D=G.y,V=G.barHeight,C=G.yDivision,R=G.zeroW,F=G.x,J=G.barWidth,E=G.xDivision,L=G.zeroH,w.push(F+J/2);for(var oe=c.group({class:"apexcharts-datalabels","data:realIndex":T}),re=function(Pe){var et=o.barHelpers.getStrokeWidth(A,Pe,T),We=null,gt={indexes:{i:A,j:Pe,realIndex:T},x:F,y:D,strokeWidth:et,elSeries:M};We=o.isHorizontal?o.drawHorizontalBoxPaths(l(l({},gt),{},{yDivision:C,barHeight:V,zeroW:R})):o.drawVerticalBoxPaths(l(l({},gt),{},{xDivision:E,barWidth:J,zeroH:L})),D=We.y,F=We.x,Pe>0&&w.push(F+J/2),g.push(D),We.pathTo.forEach(function(Ct,Gt){var Ai=!o.isBoxPlot&&o.candlestickOptions.wick.useFillColor?We.color[Gt]:h.globals.stroke.colors[A],Vi=d.fillPath({seriesNumber:T,dataPointIndex:Pe,color:We.color[Gt],value:r[A][Pe]});o.renderSeries({realIndex:T,pathFill:Vi,lineFill:Ai,j:Pe,i:A,pathFrom:We.pathFrom,pathTo:Ct,strokeWidth:et,elSeries:M,x:F,y:D,series:r,barHeight:V,barWidth:J,elDataLabelsWrap:oe,visibleSeries:o.visibleI,type:h.config.chart.type})})},ge=0;ge<h.globals.dataPoints;ge++)re(ge);h.globals.seriesXvalues[T]=w,h.globals.seriesYvalues[T]=g,x.add(M)},y=0;y<r.length;y++)m(y);return x}},{key:"drawVerticalBoxPaths",value:function(r){var a=r.indexes,o=r.x;r.y;var h=r.xDivision,c=r.barWidth,d=r.zeroH,p=r.strokeWidth,x=this.w,m=new X(this.ctx),y=a.i,A=a.j,E=!0,C=x.config.plotOptions.candlestick.colors.upward,L=x.config.plotOptions.candlestick.colors.downward,R="";this.isBoxPlot&&(R=[this.boxOptions.colors.lower,this.boxOptions.colors.upper]);var F=this.yRatio[this.yaxisIndex],D=a.realIndex,g=this.getOHLCValue(D,A),w=d,T=d;g.o>g.c&&(E=!1);var M=Math.min(g.o,g.c),V=Math.max(g.o,g.c),J=g.m;x.globals.isXNumeric&&(o=(x.globals.seriesX[D][A]-x.globals.minX)/this.xRatio-c/2);var G=o+c*this.visibleI;this.series[y][A]===void 0||this.series[y][A]===null?(M=d,V=d):(M=d-M/F,V=d-V/F,w=d-g.h/F,T=d-g.l/F,J=d-g.m/F);var oe=m.move(G,d),re=m.move(G+c/2,M);return x.globals.previousPaths.length>0&&(re=this.getPreviousPath(D,A,!0)),oe=this.isBoxPlot?[m.move(G,M)+m.line(G+c/2,M)+m.line(G+c/2,w)+m.line(G+c/4,w)+m.line(G+c-c/4,w)+m.line(G+c/2,w)+m.line(G+c/2,M)+m.line(G+c,M)+m.line(G+c,J)+m.line(G,J)+m.line(G,M+p/2),m.move(G,J)+m.line(G+c,J)+m.line(G+c,V)+m.line(G+c/2,V)+m.line(G+c/2,T)+m.line(G+c-c/4,T)+m.line(G+c/4,T)+m.line(G+c/2,T)+m.line(G+c/2,V)+m.line(G,V)+m.line(G,J)+"z"]:[m.move(G,V)+m.line(G+c/2,V)+m.line(G+c/2,w)+m.line(G+c/2,V)+m.line(G+c,V)+m.line(G+c,M)+m.line(G+c/2,M)+m.line(G+c/2,T)+m.line(G+c/2,M)+m.line(G,M)+m.line(G,V-p/2)],re+=m.move(G,M),x.globals.isXNumeric||(o+=h),{pathTo:oe,pathFrom:re,x:o,y:V,barXPosition:G,color:this.isBoxPlot?R:E?[C]:[L]}}},{key:"drawHorizontalBoxPaths",value:function(r){var a=r.indexes;r.x;var o=r.y,h=r.yDivision,c=r.barHeight,d=r.zeroW,p=r.strokeWidth,x=this.w,m=new X(this.ctx),y=a.i,A=a.j,E=this.boxOptions.colors.lower;this.isBoxPlot&&(E=[this.boxOptions.colors.lower,this.boxOptions.colors.upper]);var C=this.invertedYRatio,L=a.realIndex,R=this.getOHLCValue(L,A),F=d,D=d,g=Math.min(R.o,R.c),w=Math.max(R.o,R.c),T=R.m;x.globals.isXNumeric&&(o=(x.globals.seriesX[L][A]-x.globals.minX)/this.invertedXRatio-c/2);var M=o+c*this.visibleI;this.series[y][A]===void 0||this.series[y][A]===null?(g=d,w=d):(g=d+g/C,w=d+w/C,F=d+R.h/C,D=d+R.l/C,T=d+R.m/C);var V=m.move(d,M),J=m.move(g,M+c/2);return x.globals.previousPaths.length>0&&(J=this.getPreviousPath(L,A,!0)),V=[m.move(g,M)+m.line(g,M+c/2)+m.line(F,M+c/2)+m.line(F,M+c/2-c/4)+m.line(F,M+c/2+c/4)+m.line(F,M+c/2)+m.line(g,M+c/2)+m.line(g,M+c)+m.line(T,M+c)+m.line(T,M)+m.line(g+p/2,M),m.move(T,M)+m.line(T,M+c)+m.line(w,M+c)+m.line(w,M+c/2)+m.line(D,M+c/2)+m.line(D,M+c-c/4)+m.line(D,M+c/4)+m.line(D,M+c/2)+m.line(w,M+c/2)+m.line(w,M)+m.line(T,M)+"z"],J+=m.move(g,M),x.globals.isXNumeric||(o+=h),{pathTo:V,pathFrom:J,x:w,y:o,barYPosition:M,color:E}}},{key:"getOHLCValue",value:function(r,a){var o=this.w;return{o:this.isBoxPlot?o.globals.seriesCandleH[r][a]:o.globals.seriesCandleO[r][a],h:this.isBoxPlot?o.globals.seriesCandleO[r][a]:o.globals.seriesCandleH[r][a],m:o.globals.seriesCandleM[r][a],l:this.isBoxPlot?o.globals.seriesCandleC[r][a]:o.globals.seriesCandleL[r][a],c:this.isBoxPlot?o.globals.seriesCandleL[r][a]:o.globals.seriesCandleC[r][a]}}}]),t}(),Tl=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"checkColorRange",value:function(){var e=this.w,t=!1,r=e.config.plotOptions[e.config.chart.type];return r.colorScale.ranges.length>0&&r.colorScale.ranges.map(function(a,o){a.from<=0&&(t=!0)}),t}},{key:"getShadeColor",value:function(e,t,r,a){var o=this.w,h=1,c=o.config.plotOptions[e].shadeIntensity,d=this.determineColor(e,t,r);o.globals.hasNegs||a?h=o.config.plotOptions[e].reverseNegativeShade?d.percent<0?d.percent/100*(1.25*c):(1-d.percent/100)*(1.25*c):d.percent<=0?1-(1+d.percent/100)*c:(1-d.percent/100)*c:(h=1-d.percent/100,e==="treemap"&&(h=(1-d.percent/100)*(1.25*c)));var p=d.color,x=new P;return o.config.plotOptions[e].enableShades&&(p=this.w.config.theme.mode==="dark"?P.hexToRgba(x.shadeColor(-1*h,d.color),o.config.fill.opacity):P.hexToRgba(x.shadeColor(h,d.color),o.config.fill.opacity)),{color:p,colorProps:d}}},{key:"determineColor",value:function(e,t,r){var a=this.w,o=a.globals.series[t][r],h=a.config.plotOptions[e],c=h.colorScale.inverse?r:t;h.distributed&&a.config.chart.type==="treemap"&&(c=r);var d=a.globals.colors[c],p=null,x=Math.min.apply(Math,K(a.globals.series[t])),m=Math.max.apply(Math,K(a.globals.series[t]));h.distributed||e!=="heatmap"||(x=a.globals.minY,m=a.globals.maxY),h.colorScale.min!==void 0&&(x=h.colorScale.min<a.globals.minY?h.colorScale.min:a.globals.minY,m=h.colorScale.max>a.globals.maxY?h.colorScale.max:a.globals.maxY);var y=Math.abs(m)+Math.abs(x),A=100*o/(y===0?y-1e-6:y);return h.colorScale.ranges.length>0&&h.colorScale.ranges.map(function(E,C){if(o>=E.from&&o<=E.to){d=E.color,p=E.foreColor?E.foreColor:null,x=E.from,m=E.to;var L=Math.abs(m)+Math.abs(x);A=100*o/(L===0?L-1e-6:L)}}),{color:d,foreColor:p,percent:A}}},{key:"calculateDataLabels",value:function(e){var t=e.text,r=e.x,a=e.y,o=e.i,h=e.j,c=e.colorProps,d=e.fontSize,p=this.w.config.dataLabels,x=new X(this.ctx),m=new Me(this.ctx),y=null;if(p.enabled){y=x.group({class:"apexcharts-data-labels"});var A=p.offsetX,E=p.offsetY,C=r+A,L=a+parseFloat(p.style.fontSize)/3+E;m.plotDataLabelsText({x:C,y:L,text:t,i:o,j:h,color:c.foreColor,parent:y,fontSize:d,dataLabelsConfig:p})}return y}},{key:"addListeners",value:function(e){var t=new X(this.ctx);e.node.addEventListener("mouseenter",t.pathMouseEnter.bind(this,e)),e.node.addEventListener("mouseleave",t.pathMouseLeave.bind(this,e)),e.node.addEventListener("mousedown",t.pathMouseDown.bind(this,e))}}]),_}(),mf=function(){function _(e,t){f(this,_),this.ctx=e,this.w=e.w,this.xRatio=t.xRatio,this.yRatio=t.yRatio,this.dynamicAnim=this.w.config.chart.animations.dynamicAnimation,this.helpers=new Tl(e),this.rectRadius=this.w.config.plotOptions.heatmap.radius,this.strokeWidth=this.w.config.stroke.show?this.w.config.stroke.width:0}return b(_,[{key:"draw",value:function(e){var t=this.w,r=new X(this.ctx),a=r.group({class:"apexcharts-heatmap"});a.attr("clip-path","url(#gridRectMask".concat(t.globals.cuid,")"));var o=t.globals.gridWidth/t.globals.dataPoints,h=t.globals.gridHeight/t.globals.series.length,c=0,d=!1;this.negRange=this.helpers.checkColorRange();var p=e.slice();t.config.yaxis[0].reversed&&(d=!0,p.reverse());for(var x=d?0:p.length-1;d?x<p.length:x>=0;d?x++:x--){var m=r.group({class:"apexcharts-series apexcharts-heatmap-series",seriesName:P.escapeString(t.globals.seriesNames[x]),rel:x+1,"data:realIndex":x});if(this.ctx.series.addCollapsedClassToSeries(m,x),t.config.chart.dropShadow.enabled){var y=t.config.chart.dropShadow;new H(this.ctx).dropShadow(m,y,x)}for(var A=0,E=t.config.plotOptions.heatmap.shadeIntensity,C=0;C<p[x].length;C++){var L=this.helpers.getShadeColor(t.config.chart.type,x,C,this.negRange),R=L.color,F=L.colorProps;t.config.fill.type==="image"&&(R=new he(this.ctx).fillPath({seriesNumber:x,dataPointIndex:C,opacity:t.globals.hasNegs?F.percent<0?1-(1+F.percent/100):E+F.percent/100:F.percent/100,patternID:P.randomId(),width:t.config.fill.image.width?t.config.fill.image.width:o,height:t.config.fill.image.height?t.config.fill.image.height:h}));var D=this.rectRadius,g=r.drawRect(A,c,o,h,D);if(g.attr({cx:A,cy:c}),g.node.classList.add("apexcharts-heatmap-rect"),m.add(g),g.attr({fill:R,i:x,index:x,j:C,val:p[x][C],"stroke-width":this.strokeWidth,stroke:t.config.plotOptions.heatmap.useFillColorAsStroke?R:t.globals.stroke.colors[0],color:R}),this.helpers.addListeners(g),t.config.chart.animations.enabled&&!t.globals.dataChanged){var w=1;t.globals.resized||(w=t.config.chart.animations.speed),this.animateHeatMap(g,A,c,o,h,w)}if(t.globals.dataChanged){var T=1;if(this.dynamicAnim.enabled&&t.globals.shouldAnimate){T=this.dynamicAnim.speed;var M=t.globals.previousPaths[x]&&t.globals.previousPaths[x][C]&&t.globals.previousPaths[x][C].color;M||(M="rgba(255, 255, 255, 0)"),this.animateHeatColor(g,P.isColorHex(M)?M:P.rgb2hex(M),P.isColorHex(R)?R:P.rgb2hex(R),T)}}var V=(0,t.config.dataLabels.formatter)(t.globals.series[x][C],{value:t.globals.series[x][C],seriesIndex:x,dataPointIndex:C,w:t}),J=this.helpers.calculateDataLabels({text:V,x:A+o/2,y:c+h/2,i:x,j:C,colorProps:F,series:p});J!==null&&m.add(J),A+=o}c+=h,a.add(m)}var G=t.globals.yAxisScale[0].result.slice();t.config.yaxis[0].reversed?G.unshift(""):G.push(""),t.globals.yAxisScale[0].result=G;var oe=t.globals.gridHeight/t.globals.series.length;return t.config.yaxis[0].labels.offsetY=-oe/2,a}},{key:"animateHeatMap",value:function(e,t,r,a,o,h){var c=new q(this.ctx);c.animateRect(e,{x:t+a/2,y:r+o/2,width:0,height:0},{x:t,y:r,width:a,height:o},h,function(){c.animationCompleted(e)})}},{key:"animateHeatColor",value:function(e,t,r,a){e.attr({fill:t}).animate(a).attr({fill:r})}}]),_}(),Pl=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"drawYAxisTexts",value:function(e,t,r,a){var o=this.w,h=o.config.yaxis[0],c=o.globals.yLabelFormatters[0];return new X(this.ctx).drawText({x:e+h.labels.offsetX,y:t+h.labels.offsetY,text:c(a,r),textAnchor:"middle",fontSize:h.labels.style.fontSize,fontFamily:h.labels.style.fontFamily,foreColor:Array.isArray(h.labels.style.colors)?h.labels.style.colors[r]:h.labels.style.colors})}}]),_}(),Ll=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w;var t=this.w;this.chartType=this.w.config.chart.type,this.initialAnim=this.w.config.chart.animations.enabled,this.dynamicAnim=this.initialAnim&&this.w.config.chart.animations.dynamicAnimation.enabled,this.animBeginArr=[0],this.animDur=0,this.donutDataLabels=this.w.config.plotOptions.pie.donut.labels,this.lineColorArr=t.globals.stroke.colors!==void 0?t.globals.stroke.colors:t.globals.colors,this.defaultSize=Math.min(t.globals.gridWidth,t.globals.gridHeight),this.centerY=this.defaultSize/2,this.centerX=t.globals.gridWidth/2,t.config.chart.type==="radialBar"?this.fullAngle=360:this.fullAngle=Math.abs(t.config.plotOptions.pie.endAngle-t.config.plotOptions.pie.startAngle),this.initialAngle=t.config.plotOptions.pie.startAngle%this.fullAngle,t.globals.radialSize=this.defaultSize/2.05-t.config.stroke.width-(t.config.chart.sparkline.enabled?0:t.config.chart.dropShadow.blur),this.donutSize=t.globals.radialSize*parseInt(t.config.plotOptions.pie.donut.size,10)/100,this.maxY=0,this.sliceLabels=[],this.sliceSizes=[],this.prevSectorAngleArr=[]}return b(_,[{key:"draw",value:function(e){var t=this,r=this.w,a=new X(this.ctx);if(this.ret=a.group({class:"apexcharts-pie"}),r.globals.noData)return this.ret;for(var o=0,h=0;h<e.length;h++)o+=P.negToZero(e[h]);var c=[],d=a.group();o===0&&(o=1e-5),e.forEach(function(M){t.maxY=Math.max(t.maxY,M)}),r.config.yaxis[0].max&&(this.maxY=r.config.yaxis[0].max),r.config.grid.position==="back"&&this.chartType==="polarArea"&&this.drawPolarElements(this.ret);for(var p=0;p<e.length;p++){var x=this.fullAngle*P.negToZero(e[p])/o;c.push(x),this.chartType==="polarArea"?(c[p]=this.fullAngle/e.length,this.sliceSizes.push(r.globals.radialSize*e[p]/this.maxY)):this.sliceSizes.push(r.globals.radialSize)}if(r.globals.dataChanged){for(var m,y=0,A=0;A<r.globals.previousPaths.length;A++)y+=P.negToZero(r.globals.previousPaths[A]);for(var E=0;E<r.globals.previousPaths.length;E++)m=this.fullAngle*P.negToZero(r.globals.previousPaths[E])/y,this.prevSectorAngleArr.push(m)}this.donutSize<0&&(this.donutSize=0);var C=r.config.plotOptions.pie.customScale,L=r.globals.gridWidth/2,R=r.globals.gridHeight/2,F=L-r.globals.gridWidth/2*C,D=R-r.globals.gridHeight/2*C;if(this.chartType==="donut"){var g=a.drawCircle(this.donutSize);g.attr({cx:this.centerX,cy:this.centerY,fill:r.config.plotOptions.pie.donut.background?r.config.plotOptions.pie.donut.background:"transparent"}),d.add(g)}var w=this.drawArcs(c,e);if(this.sliceLabels.forEach(function(M){w.add(M)}),d.attr({transform:"translate(".concat(F,", ").concat(D,") scale(").concat(C,")")}),d.add(w),this.ret.add(d),this.donutDataLabels.show){var T=this.renderInnerDataLabels(this.donutDataLabels,{hollowSize:this.donutSize,centerX:this.centerX,centerY:this.centerY,opacity:this.donutDataLabels.show,translateX:F,translateY:D});this.ret.add(T)}return r.config.grid.position==="front"&&this.chartType==="polarArea"&&this.drawPolarElements(this.ret),this.ret}},{key:"drawArcs",value:function(e,t){var r=this.w,a=new H(this.ctx),o=new X(this.ctx),h=new he(this.ctx),c=o.group({class:"apexcharts-slices"}),d=this.initialAngle,p=this.initialAngle,x=this.initialAngle,m=this.initialAngle;this.strokeWidth=r.config.stroke.show?r.config.stroke.width:0;for(var y=0;y<e.length;y++){var A=o.group({class:"apexcharts-series apexcharts-pie-series",seriesName:P.escapeString(r.globals.seriesNames[y]),rel:y+1,"data:realIndex":y});c.add(A),p=m,x=(d=x)+e[y],m=p+this.prevSectorAngleArr[y];var E=x<d?this.fullAngle+x-d:x-d,C=h.fillPath({seriesNumber:y,size:this.sliceSizes[y],value:t[y]}),L=this.getChangedPath(p,m),R=o.drawPath({d:L,stroke:Array.isArray(this.lineColorArr)?this.lineColorArr[y]:this.lineColorArr,strokeWidth:0,fill:C,fillOpacity:r.config.fill.opacity,classes:"apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(),"-slice-").concat(y)});if(R.attr({index:0,j:y}),a.setSelectionFilter(R,0,y),r.config.chart.dropShadow.enabled){var F=r.config.chart.dropShadow;a.dropShadow(R,F,y)}this.addListeners(R,this.donutDataLabels),X.setAttrs(R.node,{"data:angle":E,"data:startAngle":d,"data:strokeWidth":this.strokeWidth,"data:value":t[y]});var D={x:0,y:0};this.chartType==="pie"||this.chartType==="polarArea"?D=P.polarToCartesian(this.centerX,this.centerY,r.globals.radialSize/1.25+r.config.plotOptions.pie.dataLabels.offset,(d+E/2)%this.fullAngle):this.chartType==="donut"&&(D=P.polarToCartesian(this.centerX,this.centerY,(r.globals.radialSize+this.donutSize)/2+r.config.plotOptions.pie.dataLabels.offset,(d+E/2)%this.fullAngle)),A.add(R);var g=0;if(!this.initialAnim||r.globals.resized||r.globals.dataChanged?this.animBeginArr.push(0):((g=E/this.fullAngle*r.config.chart.animations.speed)===0&&(g=1),this.animDur=g+this.animDur,this.animBeginArr.push(this.animDur)),this.dynamicAnim&&r.globals.dataChanged?this.animatePaths(R,{size:this.sliceSizes[y],endAngle:x,startAngle:d,prevStartAngle:p,prevEndAngle:m,animateStartingPos:!0,i:y,animBeginArr:this.animBeginArr,shouldSetPrevPaths:!0,dur:r.config.chart.animations.dynamicAnimation.speed}):this.animatePaths(R,{size:this.sliceSizes[y],endAngle:x,startAngle:d,i:y,totalItems:e.length-1,animBeginArr:this.animBeginArr,dur:g}),r.config.plotOptions.pie.expandOnClick&&this.chartType!=="polarArea"&&R.click(this.pieClicked.bind(this,y)),r.globals.selectedDataPoints[0]!==void 0&&r.globals.selectedDataPoints[0].indexOf(y)>-1&&this.pieClicked(y),r.config.dataLabels.enabled){var w=D.x,T=D.y,M=100*E/this.fullAngle+"%";if(E!==0&&r.config.plotOptions.pie.dataLabels.minAngleToShowLabel<e[y]){var V=r.config.dataLabels.formatter;V!==void 0&&(M=V(r.globals.seriesPercent[y][0],{seriesIndex:y,w:r}));var J=r.globals.dataLabels.style.colors[y],G=o.group({class:"apexcharts-datalabels"}),oe=o.drawText({x:w,y:T,text:M,textAnchor:"middle",fontSize:r.config.dataLabels.style.fontSize,fontFamily:r.config.dataLabels.style.fontFamily,fontWeight:r.config.dataLabels.style.fontWeight,foreColor:J});if(G.add(oe),r.config.dataLabels.dropShadow.enabled){var re=r.config.dataLabels.dropShadow;a.dropShadow(oe,re)}oe.node.classList.add("apexcharts-pie-label"),r.config.chart.animations.animate&&r.globals.resized===!1&&(oe.node.classList.add("apexcharts-pie-label-delay"),oe.node.style.animationDelay=r.config.chart.animations.speed/940+"s"),this.sliceLabels.push(G)}}}return c}},{key:"addListeners",value:function(e,t){var r=new X(this.ctx);e.node.addEventListener("mouseenter",r.pathMouseEnter.bind(this,e)),e.node.addEventListener("mouseleave",r.pathMouseLeave.bind(this,e)),e.node.addEventListener("mouseleave",this.revertDataLabelsInner.bind(this,e.node,t)),e.node.addEventListener("mousedown",r.pathMouseDown.bind(this,e)),this.donutDataLabels.total.showAlways||(e.node.addEventListener("mouseenter",this.printDataLabelsInner.bind(this,e.node,t)),e.node.addEventListener("mousedown",this.printDataLabelsInner.bind(this,e.node,t)))}},{key:"animatePaths",value:function(e,t){var r=this.w,a=t.endAngle<t.startAngle?this.fullAngle+t.endAngle-t.startAngle:t.endAngle-t.startAngle,o=a,h=t.startAngle,c=t.startAngle;t.prevStartAngle!==void 0&&t.prevEndAngle!==void 0&&(h=t.prevEndAngle,o=t.prevEndAngle<t.prevStartAngle?this.fullAngle+t.prevEndAngle-t.prevStartAngle:t.prevEndAngle-t.prevStartAngle),t.i===r.config.series.length-1&&(a+c>this.fullAngle?t.endAngle=t.endAngle-(a+c):a+c<this.fullAngle&&(t.endAngle=t.endAngle+(this.fullAngle-(a+c)))),a===this.fullAngle&&(a=this.fullAngle-.01),this.animateArc(e,h,c,a,o,t)}},{key:"animateArc",value:function(e,t,r,a,o,h){var c,d=this,p=this.w,x=new q(this.ctx),m=h.size;(isNaN(t)||isNaN(o))&&(t=r,o=a,h.dur=0);var y=a,A=r,E=t<r?this.fullAngle+t-r:t-r;p.globals.dataChanged&&h.shouldSetPrevPaths&&h.prevEndAngle&&(c=d.getPiePath({me:d,startAngle:h.prevStartAngle,angle:h.prevEndAngle<h.prevStartAngle?this.fullAngle+h.prevEndAngle-h.prevStartAngle:h.prevEndAngle-h.prevStartAngle,size:m}),e.attr({d:c})),h.dur!==0?e.animate(h.dur,p.globals.easing,h.animBeginArr[h.i]).afterAll(function(){d.chartType!=="pie"&&d.chartType!=="donut"&&d.chartType!=="polarArea"||this.animate(p.config.chart.animations.dynamicAnimation.speed).attr({"stroke-width":d.strokeWidth}),h.i===p.config.series.length-1&&x.animationCompleted(e)}).during(function(C){y=E+(a-E)*C,h.animateStartingPos&&(y=o+(a-o)*C,A=t-o+(r-(t-o))*C),c=d.getPiePath({me:d,startAngle:A,angle:y,size:m}),e.node.setAttribute("data:pathOrig",c),e.attr({d:c})}):(c=d.getPiePath({me:d,startAngle:A,angle:a,size:m}),h.isTrack||(p.globals.animationEnded=!0),e.node.setAttribute("data:pathOrig",c),e.attr({d:c,"stroke-width":d.strokeWidth}))}},{key:"pieClicked",value:function(e){var t,r=this.w,a=this,o=a.sliceSizes[e]+(r.config.plotOptions.pie.expandOnClick?4:0),h=r.globals.dom.Paper.select(".apexcharts-".concat(a.chartType.toLowerCase(),"-slice-").concat(e)).members[0];if(h.attr("data:pieClicked")!=="true"){var c=r.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");Array.prototype.forEach.call(c,function(m){m.setAttribute("data:pieClicked","false");var y=m.getAttribute("data:pathOrig");m.setAttribute("d",y)}),h.attr("data:pieClicked","true");var d=parseInt(h.attr("data:startAngle"),10),p=parseInt(h.attr("data:angle"),10);t=a.getPiePath({me:a,startAngle:d,angle:p,size:o}),p!==360&&h.plot(t)}else{h.attr({"data:pieClicked":"false"}),this.revertDataLabelsInner(h.node,this.donutDataLabels);var x=h.attr("data:pathOrig");h.attr({d:x})}}},{key:"getChangedPath",value:function(e,t){var r="";return this.dynamicAnim&&this.w.globals.dataChanged&&(r=this.getPiePath({me:this,startAngle:e,angle:t-e,size:this.size})),r}},{key:"getPiePath",value:function(e){var t=e.me,r=e.startAngle,a=e.angle,o=e.size,h=r,c=Math.PI*(h-90)/180,d=a+r;Math.ceil(d)>=this.fullAngle+this.w.config.plotOptions.pie.startAngle%this.fullAngle&&(d=this.fullAngle+this.w.config.plotOptions.pie.startAngle%this.fullAngle-.01),Math.ceil(d)>this.fullAngle&&(d-=this.fullAngle);var p=Math.PI*(d-90)/180,x=t.centerX+o*Math.cos(c),m=t.centerY+o*Math.sin(c),y=t.centerX+o*Math.cos(p),A=t.centerY+o*Math.sin(p),E=P.polarToCartesian(t.centerX,t.centerY,t.donutSize,d),C=P.polarToCartesian(t.centerX,t.centerY,t.donutSize,h),L=a>180?1:0,R=["M",x,m,"A",o,o,0,L,1,y,A];return t.chartType==="donut"?[].concat(R,["L",E.x,E.y,"A",t.donutSize,t.donutSize,0,L,0,C.x,C.y,"L",x,m,"z"]).join(" "):t.chartType==="pie"||t.chartType==="polarArea"?[].concat(R,["L",t.centerX,t.centerY,"L",x,m]).join(" "):[].concat(R).join(" ")}},{key:"drawPolarElements",value:function(e){var t=this.w,r=new $(this.ctx),a=new X(this.ctx),o=new Pl(this.ctx),h=a.group(),c=a.group(),d=r.niceScale(0,Math.ceil(this.maxY),t.config.yaxis[0].tickAmount,0,!0),p=d.result.reverse(),x=d.result.length;this.maxY=d.niceMax;for(var m=t.globals.radialSize,y=m/(x-1),A=0;A<x-1;A++){var E=a.drawCircle(m);if(E.attr({cx:this.centerX,cy:this.centerY,fill:"none","stroke-width":t.config.plotOptions.polarArea.rings.strokeWidth,stroke:t.config.plotOptions.polarArea.rings.strokeColor}),t.config.yaxis[0].show){var C=o.drawYAxisTexts(this.centerX,this.centerY-m+parseInt(t.config.yaxis[0].labels.style.fontSize,10)/2,A,p[A]);c.add(C)}h.add(E),m-=y}this.drawSpokes(e),e.add(h),e.add(c)}},{key:"renderInnerDataLabels",value:function(e,t){var r=this.w,a=new X(this.ctx),o=a.group({class:"apexcharts-datalabels-group",transform:"translate(".concat(t.translateX?t.translateX:0,", ").concat(t.translateY?t.translateY:0,") scale(").concat(r.config.plotOptions.pie.customScale,")")}),h=e.total.show;o.node.style.opacity=t.opacity;var c,d,p=t.centerX,x=t.centerY;c=e.name.color===void 0?r.globals.colors[0]:e.name.color;var m=e.name.fontSize,y=e.name.fontFamily,A=e.name.fontWeight;d=e.value.color===void 0?r.config.chart.foreColor:e.value.color;var E=e.value.formatter,C="",L="";if(h?(c=e.total.color,m=e.total.fontSize,y=e.total.fontFamily,A=e.total.fontWeight,L=e.total.label,C=e.total.formatter(r)):r.globals.series.length===1&&(C=E(r.globals.series[0],r),L=r.globals.seriesNames[0]),L&&(L=e.name.formatter(L,e.total.show,r)),e.name.show){var R=a.drawText({x:p,y:x+parseFloat(e.name.offsetY),text:L,textAnchor:"middle",foreColor:c,fontSize:m,fontWeight:A,fontFamily:y});R.node.classList.add("apexcharts-datalabel-label"),o.add(R)}if(e.value.show){var F=e.name.show?parseFloat(e.value.offsetY)+16:e.value.offsetY,D=a.drawText({x:p,y:x+F,text:C,textAnchor:"middle",foreColor:d,fontWeight:e.value.fontWeight,fontSize:e.value.fontSize,fontFamily:e.value.fontFamily});D.node.classList.add("apexcharts-datalabel-value"),o.add(D)}return o}},{key:"printInnerLabels",value:function(e,t,r,a){var o,h=this.w;a?o=e.name.color===void 0?h.globals.colors[parseInt(a.parentNode.getAttribute("rel"),10)-1]:e.name.color:h.globals.series.length>1&&e.total.show&&(o=e.total.color);var c=h.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"),d=h.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");r=(0,e.value.formatter)(r,h),a||typeof e.total.formatter!="function"||(r=e.total.formatter(h));var p=t===e.total.label;t=e.name.formatter(t,p,h),c!==null&&(c.textContent=t),d!==null&&(d.textContent=r),c!==null&&(c.style.fill=o)}},{key:"printDataLabelsInner",value:function(e,t){var r=this.w,a=e.getAttribute("data:value"),o=r.globals.seriesNames[parseInt(e.parentNode.getAttribute("rel"),10)-1];r.globals.series.length>1&&this.printInnerLabels(t,o,a,e);var h=r.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");h!==null&&(h.style.opacity=1)}},{key:"drawSpokes",value:function(e){var t=this,r=this.w,a=new X(this.ctx),o=r.config.plotOptions.polarArea.spokes;if(o.strokeWidth!==0){for(var h=[],c=360/r.globals.series.length,d=0;d<r.globals.series.length;d++)h.push(P.polarToCartesian(this.centerX,this.centerY,r.globals.radialSize,r.config.plotOptions.pie.startAngle+c*d));h.forEach(function(p,x){var m=a.drawLine(p.x,p.y,t.centerX,t.centerY,Array.isArray(o.connectorColors)?o.connectorColors[x]:o.connectorColors);e.add(m)})}}},{key:"revertDataLabelsInner",value:function(e,t,r){var a=this,o=this.w,h=o.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group"),c=!1,d=o.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area"),p=function(y){var A=y.makeSliceOut,E=y.printLabel;Array.prototype.forEach.call(d,function(C){C.getAttribute("data:pieClicked")==="true"&&(A&&(c=!0),E&&a.printDataLabelsInner(C,t))})};if(p({makeSliceOut:!0,printLabel:!1}),t.total.show&&o.globals.series.length>1)c&&!t.total.showAlways?p({makeSliceOut:!1,printLabel:!0}):this.printInnerLabels(t,t.total.label,t.total.formatter(o));else if(p({makeSliceOut:!1,printLabel:!0}),!c)if(o.globals.selectedDataPoints.length&&o.globals.series.length>1)if(o.globals.selectedDataPoints[0].length>0){var x=o.globals.selectedDataPoints[0],m=o.globals.dom.baseEl.querySelector(".apexcharts-".concat(this.chartType.toLowerCase(),"-slice-").concat(x));this.printDataLabelsInner(m,t)}else h&&o.globals.selectedDataPoints.length&&o.globals.selectedDataPoints[0].length===0&&(h.style.opacity=0);else h&&o.globals.series.length>1&&(h.style.opacity=0)}}]),_}(),vf=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.chartType=this.w.config.chart.type,this.initialAnim=this.w.config.chart.animations.enabled,this.dynamicAnim=this.initialAnim&&this.w.config.chart.animations.dynamicAnimation.enabled,this.animDur=0;var t=this.w;this.graphics=new X(this.ctx),this.lineColorArr=t.globals.stroke.colors!==void 0?t.globals.stroke.colors:t.globals.colors,this.defaultSize=t.globals.svgHeight<t.globals.svgWidth?t.globals.gridHeight+1.5*t.globals.goldenPadding:t.globals.gridWidth,this.isLog=t.config.yaxis[0].logarithmic,this.coreUtils=new Z(this.ctx),this.maxValue=this.isLog?this.coreUtils.getLogVal(t.globals.maxY,0):t.globals.maxY,this.minValue=this.isLog?this.coreUtils.getLogVal(this.w.globals.minY,0):t.globals.minY,this.polygons=t.config.plotOptions.radar.polygons,this.strokeWidth=t.config.stroke.show?t.config.stroke.width:0,this.size=this.defaultSize/2.1-this.strokeWidth-t.config.chart.dropShadow.blur,t.config.xaxis.labels.show&&(this.size=this.size-t.globals.xAxisLabelsWidth/1.75),t.config.plotOptions.radar.size!==void 0&&(this.size=t.config.plotOptions.radar.size),this.dataRadiusOfPercent=[],this.dataRadius=[],this.angleArr=[],this.yaxisLabelsTextsPos=[]}return b(_,[{key:"draw",value:function(e){var t=this,r=this.w,a=new he(this.ctx),o=[],h=new Me(this.ctx);e.length&&(this.dataPointsLen=e[r.globals.maxValsInArrayIndex].length),this.disAngle=2*Math.PI/this.dataPointsLen;var c=r.globals.gridWidth/2,d=r.globals.gridHeight/2,p=c+r.config.plotOptions.radar.offsetX,x=d+r.config.plotOptions.radar.offsetY,m=this.graphics.group({class:"apexcharts-radar-series apexcharts-plot-series",transform:"translate(".concat(p||0,", ").concat(x||0,")")}),y=[],A=null,E=null;if(this.yaxisLabels=this.graphics.group({class:"apexcharts-yaxis"}),e.forEach(function(L,R){var F=L.length===r.globals.dataPoints,D=t.graphics.group().attr({class:"apexcharts-series","data:longestSeries":F,seriesName:P.escapeString(r.globals.seriesNames[R]),rel:R+1,"data:realIndex":R});t.dataRadiusOfPercent[R]=[],t.dataRadius[R]=[],t.angleArr[R]=[],L.forEach(function(ge,Pe){var et=Math.abs(t.maxValue-t.minValue);ge+=Math.abs(t.minValue),t.isLog&&(ge=t.coreUtils.getLogVal(ge,0)),t.dataRadiusOfPercent[R][Pe]=ge/et,t.dataRadius[R][Pe]=t.dataRadiusOfPercent[R][Pe]*t.size,t.angleArr[R][Pe]=Pe*t.disAngle}),y=t.getDataPointsPos(t.dataRadius[R],t.angleArr[R]);var g=t.createPaths(y,{x:0,y:0});A=t.graphics.group({class:"apexcharts-series-markers-wrap apexcharts-element-hidden"}),E=t.graphics.group({class:"apexcharts-datalabels","data:realIndex":R}),r.globals.delayedElements.push({el:A.node,index:R});var w={i:R,realIndex:R,animationDelay:R,initialSpeed:r.config.chart.animations.speed,dataChangeSpeed:r.config.chart.animations.dynamicAnimation.speed,className:"apexcharts-radar",shouldClipToGrid:!1,bindEventsOnPaths:!1,stroke:r.globals.stroke.colors[R],strokeLineCap:r.config.stroke.lineCap},T=null;r.globals.previousPaths.length>0&&(T=t.getPreviousPath(R));for(var M=0;M<g.linePathsTo.length;M++){var V=t.graphics.renderPaths(l(l({},w),{},{pathFrom:T===null?g.linePathsFrom[M]:T,pathTo:g.linePathsTo[M],strokeWidth:Array.isArray(t.strokeWidth)?t.strokeWidth[R]:t.strokeWidth,fill:"none",drawShadow:!1}));D.add(V);var J=a.fillPath({seriesNumber:R}),G=t.graphics.renderPaths(l(l({},w),{},{pathFrom:T===null?g.areaPathsFrom[M]:T,pathTo:g.areaPathsTo[M],strokeWidth:0,fill:J,drawShadow:!1}));if(r.config.chart.dropShadow.enabled){var oe=new H(t.ctx),re=r.config.chart.dropShadow;oe.dropShadow(G,Object.assign({},re,{noUserSpaceOnUse:!0}),R)}D.add(G)}L.forEach(function(ge,Pe){var et=new Re(t.ctx).getMarkerConfig({cssClass:"apexcharts-marker",seriesIndex:R,dataPointIndex:Pe}),We=t.graphics.drawMarker(y[Pe].x,y[Pe].y,et);We.attr("rel",Pe),We.attr("j",Pe),We.attr("index",R),We.node.setAttribute("default-marker-size",et.pSize);var gt=t.graphics.group({class:"apexcharts-series-markers"});gt&&gt.add(We),A.add(gt),D.add(A);var Ct=r.config.dataLabels;if(Ct.enabled){var Gt=Ct.formatter(r.globals.series[R][Pe],{seriesIndex:R,dataPointIndex:Pe,w:r});h.plotDataLabelsText({x:y[Pe].x,y:y[Pe].y,text:Gt,textAnchor:"middle",i:R,j:R,parent:E,offsetCorrection:!1,dataLabelsConfig:l({},Ct)})}D.add(E)}),o.push(D)}),this.drawPolygons({parent:m}),r.config.xaxis.labels.show){var C=this.drawXAxisTexts();m.add(C)}return o.forEach(function(L){m.add(L)}),m.add(this.yaxisLabels),m}},{key:"drawPolygons",value:function(e){for(var t=this,r=this.w,a=e.parent,o=new Pl(this.ctx),h=r.globals.yAxisScale[0].result.reverse(),c=h.length,d=[],p=this.size/(c-1),x=0;x<c;x++)d[x]=p*x;d.reverse();var m=[],y=[];d.forEach(function(A,E){var C=P.getPolygonPos(A,t.dataPointsLen),L="";C.forEach(function(R,F){if(E===0){var D=t.graphics.drawLine(R.x,R.y,0,0,Array.isArray(t.polygons.connectorColors)?t.polygons.connectorColors[F]:t.polygons.connectorColors);y.push(D)}F===0&&t.yaxisLabelsTextsPos.push({x:R.x,y:R.y}),L+=R.x+","+R.y+" "}),m.push(L)}),m.forEach(function(A,E){var C=t.polygons.strokeColors,L=t.polygons.strokeWidth,R=t.graphics.drawPolygon(A,Array.isArray(C)?C[E]:C,Array.isArray(L)?L[E]:L,r.globals.radarPolygons.fill.colors[E]);a.add(R)}),y.forEach(function(A){a.add(A)}),r.config.yaxis[0].show&&this.yaxisLabelsTextsPos.forEach(function(A,E){var C=o.drawYAxisTexts(A.x,A.y,E,h[E]);t.yaxisLabels.add(C)})}},{key:"drawXAxisTexts",value:function(){var e=this,t=this.w,r=t.config.xaxis.labels,a=this.graphics.group({class:"apexcharts-xaxis"}),o=P.getPolygonPos(this.size,this.dataPointsLen);return t.globals.labels.forEach(function(h,c){var d=t.config.xaxis.labels.formatter,p=new Me(e.ctx);if(o[c]){var x=e.getTextPos(o[c],e.size),m=d(h,{seriesIndex:-1,dataPointIndex:c,w:t});p.plotDataLabelsText({x:x.newX,y:x.newY,text:m,textAnchor:x.textAnchor,i:c,j:c,parent:a,color:Array.isArray(r.style.colors)&&r.style.colors[c]?r.style.colors[c]:"#a8a8a8",dataLabelsConfig:l({textAnchor:x.textAnchor,dropShadow:{enabled:!1}},r),offsetCorrection:!1})}}),a}},{key:"createPaths",value:function(e,t){var r=this,a=[],o=[],h=[],c=[];if(e.length){o=[this.graphics.move(t.x,t.y)],c=[this.graphics.move(t.x,t.y)];var d=this.graphics.move(e[0].x,e[0].y),p=this.graphics.move(e[0].x,e[0].y);e.forEach(function(x,m){d+=r.graphics.line(x.x,x.y),p+=r.graphics.line(x.x,x.y),m===e.length-1&&(d+="Z",p+="Z")}),a.push(d),h.push(p)}return{linePathsFrom:o,linePathsTo:a,areaPathsFrom:c,areaPathsTo:h}}},{key:"getTextPos",value:function(e,t){var r="middle",a=e.x,o=e.y;return Math.abs(e.x)>=10?e.x>0?(r="start",a+=10):e.x<0&&(r="end",a-=10):r="middle",Math.abs(e.y)>=t-10&&(e.y<0?o-=10:e.y>0&&(o+=10)),{textAnchor:r,newX:a,newY:o}}},{key:"getPreviousPath",value:function(e){for(var t=this.w,r=null,a=0;a<t.globals.previousPaths.length;a++){var o=t.globals.previousPaths[a];o.paths.length>0&&parseInt(o.realIndex,10)===parseInt(e,10)&&t.globals.previousPaths[a].paths[0]!==void 0&&(r=t.globals.previousPaths[a].paths[0].d)}return r}},{key:"getDataPointsPos",value:function(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:this.dataPointsLen;e=e||[],t=t||[];for(var a=[],o=0;o<r;o++){var h={};h.x=e[o]*Math.sin(t[o]),h.y=-e[o]*Math.cos(t[o]),a.push(h)}return a}}]),_}(),bf=function(_){S(t,Ll);var e=z(t);function t(r){var a;f(this,t),(a=e.call(this,r)).ctx=r,a.w=r.w,a.animBeginArr=[0],a.animDur=0;var o=a.w;return a.startAngle=o.config.plotOptions.radialBar.startAngle,a.endAngle=o.config.plotOptions.radialBar.endAngle,a.totalAngle=Math.abs(o.config.plotOptions.radialBar.endAngle-o.config.plotOptions.radialBar.startAngle),a.trackStartAngle=o.config.plotOptions.radialBar.track.startAngle,a.trackEndAngle=o.config.plotOptions.radialBar.track.endAngle,a.donutDataLabels=a.w.config.plotOptions.radialBar.dataLabels,a.radialDataLabels=a.donutDataLabels,a.trackStartAngle||(a.trackStartAngle=a.startAngle),a.trackEndAngle||(a.trackEndAngle=a.endAngle),a.endAngle===360&&(a.endAngle=359.99),a.margin=parseInt(o.config.plotOptions.radialBar.track.margin,10),a}return b(t,[{key:"draw",value:function(r){var a=this.w,o=new X(this.ctx),h=o.group({class:"apexcharts-radialbar"});if(a.globals.noData)return h;var c=o.group(),d=this.defaultSize/2,p=a.globals.gridWidth/2,x=this.defaultSize/2.05;a.config.chart.sparkline.enabled||(x=x-a.config.stroke.width-a.config.chart.dropShadow.blur);var m=a.globals.fill.colors;if(a.config.plotOptions.radialBar.track.show){var y=this.drawTracks({size:x,centerX:p,centerY:d,colorArr:m,series:r});c.add(y)}var A=this.drawArcs({size:x,centerX:p,centerY:d,colorArr:m,series:r}),E=360;a.config.plotOptions.radialBar.startAngle<0&&(E=this.totalAngle);var C=(360-E)/360;if(a.globals.radialSize=x-x*C,this.radialDataLabels.value.show){var L=Math.max(this.radialDataLabels.value.offsetY,this.radialDataLabels.name.offsetY);a.globals.radialSize+=L*C}return c.add(A.g),a.config.plotOptions.radialBar.hollow.position==="front"&&(A.g.add(A.elHollow),A.dataLabels&&A.g.add(A.dataLabels)),h.add(c),h}},{key:"drawTracks",value:function(r){var a=this.w,o=new X(this.ctx),h=o.group({class:"apexcharts-tracks"}),c=new H(this.ctx),d=new he(this.ctx),p=this.getStrokeWidth(r);r.size=r.size-p/2;for(var x=0;x<r.series.length;x++){var m=o.group({class:"apexcharts-radialbar-track apexcharts-track"});h.add(m),m.attr({rel:x+1}),r.size=r.size-p-this.margin;var y=a.config.plotOptions.radialBar.track,A=d.fillPath({seriesNumber:0,size:r.size,fillColors:Array.isArray(y.background)?y.background[x]:y.background,solid:!0}),E=this.trackStartAngle,C=this.trackEndAngle;Math.abs(C)+Math.abs(E)>=360&&(C=360-Math.abs(this.startAngle)-.1);var L=o.drawPath({d:"",stroke:A,strokeWidth:p*parseInt(y.strokeWidth,10)/100,fill:"none",strokeOpacity:y.opacity,classes:"apexcharts-radialbar-area"});if(y.dropShadow.enabled){var R=y.dropShadow;c.dropShadow(L,R)}m.add(L),L.attr("id","apexcharts-radialbarTrack-"+x),this.animatePaths(L,{centerX:r.centerX,centerY:r.centerY,endAngle:C,startAngle:E,size:r.size,i:x,totalItems:2,animBeginArr:0,dur:0,isTrack:!0,easing:a.globals.easing})}return h}},{key:"drawArcs",value:function(r){var a=this.w,o=new X(this.ctx),h=new he(this.ctx),c=new H(this.ctx),d=o.group(),p=this.getStrokeWidth(r);r.size=r.size-p/2;var x=a.config.plotOptions.radialBar.hollow.background,m=r.size-p*r.series.length-this.margin*r.series.length-p*parseInt(a.config.plotOptions.radialBar.track.strokeWidth,10)/100/2,y=m-a.config.plotOptions.radialBar.hollow.margin;a.config.plotOptions.radialBar.hollow.image!==void 0&&(x=this.drawHollowImage(r,d,m,x));var A=this.drawHollow({size:y,centerX:r.centerX,centerY:r.centerY,fill:x||"transparent"});if(a.config.plotOptions.radialBar.hollow.dropShadow.enabled){var E=a.config.plotOptions.radialBar.hollow.dropShadow;c.dropShadow(A,E)}var C=1;!this.radialDataLabels.total.show&&a.globals.series.length>1&&(C=0);var L=null;this.radialDataLabels.show&&(L=this.renderInnerDataLabels(this.radialDataLabels,{hollowSize:m,centerX:r.centerX,centerY:r.centerY,opacity:C})),a.config.plotOptions.radialBar.hollow.position==="back"&&(d.add(A),L&&d.add(L));var R=!1;a.config.plotOptions.radialBar.inverseOrder&&(R=!0);for(var F=R?r.series.length-1:0;R?F>=0:F<r.series.length;R?F--:F++){var D=o.group({class:"apexcharts-series apexcharts-radial-series",seriesName:P.escapeString(a.globals.seriesNames[F])});d.add(D),D.attr({rel:F+1,"data:realIndex":F}),this.ctx.series.addCollapsedClassToSeries(D,F),r.size=r.size-p-this.margin;var g=h.fillPath({seriesNumber:F,size:r.size,value:r.series[F]}),w=this.startAngle,T=void 0,M=P.negToZero(r.series[F]>100?100:r.series[F])/100,V=Math.round(this.totalAngle*M)+this.startAngle,J=void 0;a.globals.dataChanged&&(T=this.startAngle,J=Math.round(this.totalAngle*P.negToZero(a.globals.previousPaths[F])/100)+T),Math.abs(V)+Math.abs(w)>=360&&(V-=.01),Math.abs(J)+Math.abs(T)>=360&&(J-=.01);var G=V-w,oe=Array.isArray(a.config.stroke.dashArray)?a.config.stroke.dashArray[F]:a.config.stroke.dashArray,re=o.drawPath({d:"",stroke:g,strokeWidth:p,fill:"none",fillOpacity:a.config.fill.opacity,classes:"apexcharts-radialbar-area apexcharts-radialbar-slice-"+F,strokeDashArray:oe});if(X.setAttrs(re.node,{"data:angle":G,"data:value":r.series[F]}),a.config.chart.dropShadow.enabled){var ge=a.config.chart.dropShadow;c.dropShadow(re,ge,F)}c.setSelectionFilter(re,0,F),this.addListeners(re,this.radialDataLabels),D.add(re),re.attr({index:0,j:F});var Pe=0;!this.initialAnim||a.globals.resized||a.globals.dataChanged||(Pe=a.config.chart.animations.speed),a.globals.dataChanged&&(Pe=a.config.chart.animations.dynamicAnimation.speed),this.animDur=Pe/(1.2*r.series.length)+this.animDur,this.animBeginArr.push(this.animDur),this.animatePaths(re,{centerX:r.centerX,centerY:r.centerY,endAngle:V,startAngle:w,prevEndAngle:J,prevStartAngle:T,size:r.size,i:F,totalItems:2,animBeginArr:this.animBeginArr,dur:Pe,shouldSetPrevPaths:!0,easing:a.globals.easing})}return{g:d,elHollow:A,dataLabels:L}}},{key:"drawHollow",value:function(r){var a=new X(this.ctx).drawCircle(2*r.size);return a.attr({class:"apexcharts-radialbar-hollow",cx:r.centerX,cy:r.centerY,r:r.size,fill:r.fill}),a}},{key:"drawHollowImage",value:function(r,a,o,h){var c=this.w,d=new he(this.ctx),p=P.randomId(),x=c.config.plotOptions.radialBar.hollow.image;if(c.config.plotOptions.radialBar.hollow.imageClipped)d.clippedImgArea({width:o,height:o,image:x,patternID:"pattern".concat(c.globals.cuid).concat(p)}),h="url(#pattern".concat(c.globals.cuid).concat(p,")");else{var m=c.config.plotOptions.radialBar.hollow.imageWidth,y=c.config.plotOptions.radialBar.hollow.imageHeight;if(m===void 0&&y===void 0){var A=c.globals.dom.Paper.image(x).loaded(function(C){this.move(r.centerX-C.width/2+c.config.plotOptions.radialBar.hollow.imageOffsetX,r.centerY-C.height/2+c.config.plotOptions.radialBar.hollow.imageOffsetY)});a.add(A)}else{var E=c.globals.dom.Paper.image(x).loaded(function(C){this.move(r.centerX-m/2+c.config.plotOptions.radialBar.hollow.imageOffsetX,r.centerY-y/2+c.config.plotOptions.radialBar.hollow.imageOffsetY),this.size(m,y)});a.add(E)}}return h}},{key:"getStrokeWidth",value:function(r){var a=this.w;return r.size*(100-parseInt(a.config.plotOptions.radialBar.hollow.size,10))/100/(r.series.length+1)-this.margin}}]),t}(),yf=function(){function _(e){f(this,_),this.w=e.w,this.lineCtx=e}return b(_,[{key:"sameValueSeriesFix",value:function(e,t){var r=this.w;if(r.config.chart.type==="line"&&(r.config.fill.type==="gradient"||r.config.fill.type[e]==="gradient")&&new Z(this.lineCtx.ctx,r).seriesHaveSameValues(e)){var a=t[e].slice();a[a.length-1]=a[a.length-1]+1e-6,t[e]=a}return t}},{key:"calculatePoints",value:function(e){var t=e.series,r=e.realIndex,a=e.x,o=e.y,h=e.i,c=e.j,d=e.prevY,p=this.w,x=[],m=[];if(c===0){var y=this.lineCtx.categoryAxisCorrection+p.config.markers.offsetX;p.globals.isXNumeric&&(y=(p.globals.seriesX[r][0]-p.globals.minX)/this.lineCtx.xRatio+p.config.markers.offsetX),x.push(y),m.push(P.isNumber(t[h][0])?d+p.config.markers.offsetY:null),x.push(a+p.config.markers.offsetX),m.push(P.isNumber(t[h][c+1])?o+p.config.markers.offsetY:null)}else x.push(a+p.config.markers.offsetX),m.push(P.isNumber(t[h][c+1])?o+p.config.markers.offsetY:null);return{x,y:m}}},{key:"checkPreviousPaths",value:function(e){for(var t=e.pathFromLine,r=e.pathFromArea,a=e.realIndex,o=this.w,h=0;h<o.globals.previousPaths.length;h++){var c=o.globals.previousPaths[h];(c.type==="line"||c.type==="area")&&c.paths.length>0&&parseInt(c.realIndex,10)===parseInt(a,10)&&(c.type==="line"?(this.lineCtx.appendPathFrom=!1,t=o.globals.previousPaths[h].paths[0].d):c.type==="area"&&(this.lineCtx.appendPathFrom=!1,r=o.globals.previousPaths[h].paths[0].d,o.config.stroke.show&&o.globals.previousPaths[h].paths[1]&&(t=o.globals.previousPaths[h].paths[1].d)))}return{pathFromLine:t,pathFromArea:r}}},{key:"determineFirstPrevY",value:function(e){var t=e.i,r=e.series,a=e.prevY,o=e.lineYPosition,h=this.w;if(r[t][0]!==void 0)a=(o=h.config.chart.stacked&&t>0?this.lineCtx.prevSeriesY[t-1][0]:this.lineCtx.zeroY)-r[t][0]/this.lineCtx.yRatio[this.lineCtx.yaxisIndex]+2*(this.lineCtx.isReversed?r[t][0]/this.lineCtx.yRatio[this.lineCtx.yaxisIndex]:0);else if(h.config.chart.stacked&&t>0&&r[t][0]===void 0){for(var c=t-1;c>=0;c--)if(r[c][0]!==null&&r[c][0]!==void 0){a=o=this.lineCtx.prevSeriesY[c][0];break}}return{prevY:a,lineYPosition:o}}}]),_}(),hs=function(){function _(e,t,r){f(this,_),this.ctx=e,this.w=e.w,this.xyRatios=t,this.pointsChart=!(this.w.config.chart.type!=="bubble"&&this.w.config.chart.type!=="scatter")||r,this.scatter=new Fe(this.ctx),this.noNegatives=this.w.globals.minX===Number.MAX_VALUE,this.lineHelpers=new yf(this),this.markers=new Re(this.ctx),this.prevSeriesY=[],this.categoryAxisCorrection=0,this.yaxisIndex=0}return b(_,[{key:"draw",value:function(e,t,r){var a=this.w,o=new X(this.ctx),h=a.globals.comboCharts?t:a.config.chart.type,c=o.group({class:"apexcharts-".concat(h,"-series apexcharts-plot-series")}),d=new Z(this.ctx,a);this.yRatio=this.xyRatios.yRatio,this.zRatio=this.xyRatios.zRatio,this.xRatio=this.xyRatios.xRatio,this.baseLineY=this.xyRatios.baseLineY,e=d.getLogSeries(e),this.yRatio=d.getLogYRatios(this.yRatio);for(var p=[],x=0;x<e.length;x++){e=this.lineHelpers.sameValueSeriesFix(x,e);var m=a.globals.comboCharts?r[x]:x;this._initSerieVariables(e,x,m);var y=[],A=[],E=a.globals.padHorizontal+this.categoryAxisCorrection;this.ctx.series.addCollapsedClassToSeries(this.elSeries,m),a.globals.isXNumeric&&a.globals.seriesX.length>0&&(E=(a.globals.seriesX[m][0]-a.globals.minX)/this.xRatio),A.push(E);var C,L=E,R=L,F=this.zeroY;F=this.lineHelpers.determineFirstPrevY({i:x,series:e,prevY:F,lineYPosition:0}).prevY,y.push(F),C=F;var D=this._calculatePathsFrom({series:e,i:x,realIndex:m,prevX:R,prevY:F}),g=this._iterateOverDataPoints({series:e,realIndex:m,i:x,x:E,y:1,pX:L,pY:C,pathsFrom:D,linePaths:[],areaPaths:[],seriesIndex:r,lineYPosition:0,xArrj:A,yArrj:y});this._handlePaths({type:h,realIndex:m,i:x,paths:g}),this.elSeries.add(this.elPointsMain),this.elSeries.add(this.elDataLabelsWrap),p.push(this.elSeries)}if(a.config.chart.stacked)for(var w=p.length;w>0;w--)c.add(p[w-1]);else for(var T=0;T<p.length;T++)c.add(p[T]);return c}},{key:"_initSerieVariables",value:function(e,t,r){var a=this.w,o=new X(this.ctx);this.xDivision=a.globals.gridWidth/(a.globals.dataPoints-(a.config.xaxis.tickPlacement==="on"?1:0)),this.strokeWidth=Array.isArray(a.config.stroke.width)?a.config.stroke.width[r]:a.config.stroke.width,this.yRatio.length>1&&(this.yaxisIndex=r),this.isReversed=a.config.yaxis[this.yaxisIndex]&&a.config.yaxis[this.yaxisIndex].reversed,this.zeroY=a.globals.gridHeight-this.baseLineY[this.yaxisIndex]-(this.isReversed?a.globals.gridHeight:0)+(this.isReversed?2*this.baseLineY[this.yaxisIndex]:0),this.areaBottomY=this.zeroY,(this.zeroY>a.globals.gridHeight||a.config.plotOptions.area.fillTo==="end")&&(this.areaBottomY=a.globals.gridHeight),this.categoryAxisCorrection=this.xDivision/2,this.elSeries=o.group({class:"apexcharts-series",seriesName:P.escapeString(a.globals.seriesNames[r])}),this.elPointsMain=o.group({class:"apexcharts-series-markers-wrap","data:realIndex":r}),this.elDataLabelsWrap=o.group({class:"apexcharts-datalabels","data:realIndex":r});var h=e[t].length===a.globals.dataPoints;this.elSeries.attr({"data:longestSeries":h,rel:t+1,"data:realIndex":r}),this.appendPathFrom=!0}},{key:"_calculatePathsFrom",value:function(e){var t,r,a,o,h=e.series,c=e.i,d=e.realIndex,p=e.prevX,x=e.prevY,m=this.w,y=new X(this.ctx);if(h[c][0]===null){for(var A=0;A<h[c].length;A++)if(h[c][A]!==null){p=this.xDivision*A,x=this.zeroY-h[c][A]/this.yRatio[this.yaxisIndex],t=y.move(p,x),r=y.move(p,this.areaBottomY);break}}else t=y.move(p,x),r=y.move(p,this.areaBottomY)+y.line(p,x);if(a=y.move(-1,this.zeroY)+y.line(-1,this.zeroY),o=y.move(-1,this.zeroY)+y.line(-1,this.zeroY),m.globals.previousPaths.length>0){var E=this.lineHelpers.checkPreviousPaths({pathFromLine:a,pathFromArea:o,realIndex:d});a=E.pathFromLine,o=E.pathFromArea}return{prevX:p,prevY:x,linePath:t,areaPath:r,pathFromLine:a,pathFromArea:o}}},{key:"_handlePaths",value:function(e){var t=e.type,r=e.realIndex,a=e.i,o=e.paths,h=this.w,c=new X(this.ctx),d=new he(this.ctx);this.prevSeriesY.push(o.yArrj),h.globals.seriesXvalues[r]=o.xArrj,h.globals.seriesYvalues[r]=o.yArrj;var p=h.config.forecastDataPoints;if(p.count>0){var x=h.globals.seriesXvalues[r][h.globals.seriesXvalues[r].length-p.count-1],m=c.drawRect(x,0,h.globals.gridWidth,h.globals.gridHeight,0);h.globals.dom.elForecastMask.appendChild(m.node);var y=c.drawRect(0,0,x,h.globals.gridHeight,0);h.globals.dom.elNonForecastMask.appendChild(y.node)}this.pointsChart||h.globals.delayedElements.push({el:this.elPointsMain.node,index:r});var A={i:a,realIndex:r,animationDelay:a,initialSpeed:h.config.chart.animations.speed,dataChangeSpeed:h.config.chart.animations.dynamicAnimation.speed,className:"apexcharts-".concat(t)};if(t==="area")for(var E=d.fillPath({seriesNumber:r}),C=0;C<o.areaPaths.length;C++){var L=c.renderPaths(l(l({},A),{},{pathFrom:o.pathFromArea,pathTo:o.areaPaths[C],stroke:"none",strokeWidth:0,strokeLineCap:null,fill:E}));this.elSeries.add(L)}if(h.config.stroke.show&&!this.pointsChart){var R=null;R=t==="line"?d.fillPath({seriesNumber:r,i:a}):h.globals.stroke.colors[r];for(var F=0;F<o.linePaths.length;F++){var D=l(l({},A),{},{pathFrom:o.pathFromLine,pathTo:o.linePaths[F],stroke:R,strokeWidth:this.strokeWidth,strokeLineCap:h.config.stroke.lineCap,fill:"none"}),g=c.renderPaths(D);if(this.elSeries.add(g),p.count>0){var w=c.renderPaths(D);w.node.setAttribute("stroke-dasharray",p.dashArray),p.strokeWidth&&w.node.setAttribute("stroke-width",p.strokeWidth),this.elSeries.add(w),w.attr("clip-path","url(#forecastMask".concat(h.globals.cuid,")")),g.attr("clip-path","url(#nonForecastMask".concat(h.globals.cuid,")"))}}}}},{key:"_iterateOverDataPoints",value:function(e){for(var t=e.series,r=e.realIndex,a=e.i,o=e.x,h=e.y,c=e.pX,d=e.pY,p=e.pathsFrom,x=e.linePaths,m=e.areaPaths,y=e.seriesIndex,A=e.lineYPosition,E=e.xArrj,C=e.yArrj,L=this.w,R=new X(this.ctx),F=this.yRatio,D=p.prevY,g=p.linePath,w=p.areaPath,T=p.pathFromLine,M=p.pathFromArea,V=P.isNumber(L.globals.minYArr[r])?L.globals.minYArr[r]:L.globals.minY,J=L.globals.dataPoints>1?L.globals.dataPoints-1:L.globals.dataPoints,G=0;G<J;G++){var oe=t[a][G+1]===void 0||t[a][G+1]===null;if(L.globals.isXNumeric){var re=L.globals.seriesX[r][G+1];L.globals.seriesX[r][G+1]===void 0&&(re=L.globals.seriesX[r][J-1]),o=(re-L.globals.minX)/this.xRatio}else o+=this.xDivision;L.config.chart.stacked?a>0&&L.globals.collapsedSeries.length<L.config.series.length-1?A=this.prevSeriesY[function(et){for(var We=et,gt=0;gt<L.globals.series.length;gt++)if(L.globals.collapsedSeriesIndices.indexOf(et)>-1){We--;break}return We>=0?We:0}(a-1)][G+1]:A=this.zeroY:A=this.zeroY,h=oe?A-V/F[this.yaxisIndex]+2*(this.isReversed?V/F[this.yaxisIndex]:0):A-t[a][G+1]/F[this.yaxisIndex]+2*(this.isReversed?t[a][G+1]/F[this.yaxisIndex]:0),E.push(o),C.push(h);var ge=this.lineHelpers.calculatePoints({series:t,x:o,y:h,realIndex:r,i:a,j:G,prevY:D}),Pe=this._createPaths({series:t,i:a,realIndex:r,j:G,x:o,y:h,pX:c,pY:d,linePath:g,areaPath:w,linePaths:x,areaPaths:m,seriesIndex:y});m=Pe.areaPaths,x=Pe.linePaths,c=Pe.pX,d=Pe.pY,w=Pe.areaPath,g=Pe.linePath,this.appendPathFrom&&(T+=R.line(o,this.zeroY),M+=R.line(o,this.zeroY)),this.handleNullDataPoints(t,ge,a,G,r),this._handleMarkersAndLabels({pointsPos:ge,series:t,x:o,y:h,prevY:D,i:a,j:G,realIndex:r})}return{yArrj:C,xArrj:E,pathFromArea:M,areaPaths:m,pathFromLine:T,linePaths:x}}},{key:"_handleMarkersAndLabels",value:function(e){var t=e.pointsPos;e.series,e.x,e.y,e.prevY;var r=e.i,a=e.j,o=e.realIndex,h=this.w,c=new Me(this.ctx);if(this.pointsChart)this.scatter.draw(this.elSeries,a,{realIndex:o,pointsPos:t,zRatio:this.zRatio,elParent:this.elPointsMain});else{h.globals.series[r].length>1&&this.elPointsMain.node.classList.add("apexcharts-element-hidden");var d=this.markers.plotChartMarkers(t,o,a+1);d!==null&&this.elPointsMain.add(d)}var p=c.drawDataLabel(t,o,a+1,null);p!==null&&this.elDataLabelsWrap.add(p)}},{key:"_createPaths",value:function(e){var t=e.series,r=e.i,a=e.realIndex,o=e.j,h=e.x,c=e.y,d=e.pX,p=e.pY,x=e.linePath,m=e.areaPath,y=e.linePaths,A=e.areaPaths,E=e.seriesIndex,C=this.w,L=new X(this.ctx),R=C.config.stroke.curve,F=this.areaBottomY;if(Array.isArray(C.config.stroke.curve)&&(R=Array.isArray(E)?C.config.stroke.curve[E[r]]:C.config.stroke.curve[r]),R==="smooth"){var D=.35*(h-d);C.globals.hasNullValues?(t[r][o]!==null&&(t[r][o+1]!==null?(x=L.move(d,p)+L.curve(d+D,p,h-D,c,h+1,c),m=L.move(d+1,p)+L.curve(d+D,p,h-D,c,h+1,c)+L.line(h,F)+L.line(d,F)+"z"):(x=L.move(d,p),m=L.move(d,p)+"z")),y.push(x),A.push(m)):(x+=L.curve(d+D,p,h-D,c,h,c),m+=L.curve(d+D,p,h-D,c,h,c)),d=h,p=c,o===t[r].length-2&&(m=m+L.curve(d,p,h,c,h,F)+L.move(h,c)+"z",C.globals.hasNullValues||(y.push(x),A.push(m)))}else{if(t[r][o+1]===null){x+=L.move(h,c);var g=C.globals.isXNumeric?(C.globals.seriesX[a][o]-C.globals.minX)/this.xRatio:h-this.xDivision;m=m+L.line(g,F)+L.move(h,c)+"z"}t[r][o]===null&&(x+=L.move(h,c),m+=L.move(h,F)),R==="stepline"?(x=x+L.line(h,null,"H")+L.line(null,c,"V"),m=m+L.line(h,null,"H")+L.line(null,c,"V")):R==="straight"&&(x+=L.line(h,c),m+=L.line(h,c)),o===t[r].length-2&&(m=m+L.line(h,F)+L.move(h,c)+"z",y.push(x),A.push(m))}return{linePaths:y,areaPaths:A,pX:d,pY:p,linePath:x,areaPath:m}}},{key:"handleNullDataPoints",value:function(e,t,r,a,o){var h=this.w;if(e[r][a]===null&&h.config.markers.showNullDataPoints||e[r].length===1){var c=this.markers.plotChartMarkers(t,o,a+1,this.strokeWidth-h.config.markers.strokeWidth/2,!0);c!==null&&this.elPointsMain.add(c)}}}]),_}();window.TreemapSquared={},window.TreemapSquared.generate=function(){function _(c,d,p,x){this.xoffset=c,this.yoffset=d,this.height=x,this.width=p,this.shortestEdge=function(){return Math.min(this.height,this.width)},this.getCoordinates=function(m){var y,A=[],E=this.xoffset,C=this.yoffset,L=o(m)/this.height,R=o(m)/this.width;if(this.width>=this.height)for(y=0;y<m.length;y++)A.push([E,C,E+L,C+m[y]/L]),C+=m[y]/L;else for(y=0;y<m.length;y++)A.push([E,C,E+m[y]/R,C+R]),E+=m[y]/R;return A},this.cutArea=function(m){var y;if(this.width>=this.height){var A=m/this.height,E=this.width-A;y=new _(this.xoffset+A,this.yoffset,E,this.height)}else{var C=m/this.width,L=this.height-C;y=new _(this.xoffset,this.yoffset+C,this.width,L)}return y}}function e(c,d,p,x,m){return x=x===void 0?0:x,m=m===void 0?0:m,function(y){var A,E,C=[];for(A=0;A<y.length;A++)for(E=0;E<y[A].length;E++)C.push(y[A][E]);return C}(t(function(y,A){var E,C=[],L=A/o(y);for(E=0;E<y.length;E++)C[E]=y[E]*L;return C}(c,d*p),[],new _(x,m,d,p),[]))}function t(c,d,p,x){var m,y,A;if(c.length!==0)return m=p.shortestEdge(),function(E,C,L){var R;if(E.length===0)return!0;(R=E.slice()).push(C);var F=r(E,L),D=r(R,L);return F>=D}(d,y=c[0],m)?(d.push(y),t(c.slice(1),d,p,x)):(A=p.cutArea(o(d),x),x.push(p.getCoordinates(d)),t(c,[],A,x)),x;x.push(p.getCoordinates(d))}function r(c,d){var p=Math.min.apply(Math,c),x=Math.max.apply(Math,c),m=o(c);return Math.max(Math.pow(d,2)*x/Math.pow(m,2),Math.pow(m,2)/(Math.pow(d,2)*p))}function a(c){return c&&c.constructor===Array}function o(c){var d,p=0;for(d=0;d<c.length;d++)p+=c[d];return p}function h(c){var d,p=0;if(a(c[0]))for(d=0;d<c.length;d++)p+=h(c[d]);else p=o(c);return p}return function c(d,p,x,m,y){m=m===void 0?0:m,y=y===void 0?0:y;var A,E,C=[],L=[];if(a(d[0])){for(E=0;E<d.length;E++)C[E]=h(d[E]);for(A=e(C,p,x,m,y),E=0;E<d.length;E++)L.push(c(d[E],A[E][2]-A[E][0],A[E][3]-A[E][1],A[E][0],A[E][1]))}else L=e(d,p,x,m,y);return L}}();var Wi,Br,wf=function(){function _(e,t){f(this,_),this.ctx=e,this.w=e.w,this.strokeWidth=this.w.config.stroke.width,this.helpers=new Tl(e),this.dynamicAnim=this.w.config.chart.animations.dynamicAnimation,this.labels=[]}return b(_,[{key:"draw",value:function(e){var t=this,r=this.w,a=new X(this.ctx),o=new he(this.ctx),h=a.group({class:"apexcharts-treemap"});if(r.globals.noData)return h;var c=[];return e.forEach(function(d){var p=d.map(function(x){return Math.abs(x)});c.push(p)}),this.negRange=this.helpers.checkColorRange(),r.config.series.forEach(function(d,p){d.data.forEach(function(x){Array.isArray(t.labels[p])||(t.labels[p]=[]),t.labels[p].push(x.x)})}),window.TreemapSquared.generate(c,r.globals.gridWidth,r.globals.gridHeight).forEach(function(d,p){var x=a.group({class:"apexcharts-series apexcharts-treemap-series",seriesName:P.escapeString(r.globals.seriesNames[p]),rel:p+1,"data:realIndex":p});if(r.config.chart.dropShadow.enabled){var m=r.config.chart.dropShadow;new H(t.ctx).dropShadow(h,m,p)}var y=a.group({class:"apexcharts-data-labels"});d.forEach(function(A,E){var C=A[0],L=A[1],R=A[2],F=A[3],D=a.drawRect(C,L,R-C,F-L,0,"#fff",1,t.strokeWidth,r.config.plotOptions.treemap.useFillColorAsStroke?w:r.globals.stroke.colors[p]);D.attr({cx:C,cy:L,index:p,i:p,j:E,width:R-C,height:F-L});var g=t.helpers.getShadeColor(r.config.chart.type,p,E,t.negRange),w=g.color;r.config.series[p].data[E]!==void 0&&r.config.series[p].data[E].fillColor&&(w=r.config.series[p].data[E].fillColor);var T=o.fillPath({color:w,seriesNumber:p,dataPointIndex:E});D.node.classList.add("apexcharts-treemap-rect"),D.attr({fill:T}),t.helpers.addListeners(D);var M={x:C+(R-C)/2,y:L+(F-L)/2,width:0,height:0},V={x:C,y:L,width:R-C,height:F-L};if(r.config.chart.animations.enabled&&!r.globals.dataChanged){var J=1;r.globals.resized||(J=r.config.chart.animations.speed),t.animateTreemap(D,M,V,J)}if(r.globals.dataChanged){var G=1;t.dynamicAnim.enabled&&r.globals.shouldAnimate&&(G=t.dynamicAnim.speed,r.globals.previousPaths[p]&&r.globals.previousPaths[p][E]&&r.globals.previousPaths[p][E].rect&&(M=r.globals.previousPaths[p][E].rect),t.animateTreemap(D,M,V,G))}var oe=t.getFontSize(A),re=r.config.dataLabels.formatter(t.labels[p][E],{value:r.globals.series[p][E],seriesIndex:p,dataPointIndex:E,w:r}),ge=t.helpers.calculateDataLabels({text:re,x:(C+R)/2,y:(L+F)/2+t.strokeWidth/2+oe/3,i:p,j:E,colorProps:g,fontSize:oe,series:e});r.config.dataLabels.enabled&&ge&&t.rotateToFitLabel(ge,re,C,L,R,F),x.add(D),ge!==null&&x.add(ge)}),x.add(y),h.add(x)}),h}},{key:"getFontSize",value:function(e){var t=this.w,r,a,o,h,c=function d(p){var x,m=0;if(Array.isArray(p[0]))for(x=0;x<p.length;x++)m+=d(p[x]);else for(x=0;x<p.length;x++)m+=p[x].length;return m}(this.labels)/function d(p){var x,m=0;if(Array.isArray(p[0]))for(x=0;x<p.length;x++)m+=d(p[x]);else for(x=0;x<p.length;x++)m+=1;return m}(this.labels);return r=e[2]-e[0],a=e[3]-e[1],o=r*a,h=Math.pow(o,.5),Math.min(h/c,parseInt(t.config.dataLabels.style.fontSize,10))}},{key:"rotateToFitLabel",value:function(e,t,r,a,o,h){var c=new X(this.ctx),d=c.getTextRects(t);if(d.width+5>o-r&&d.width<=h-a){var p=c.rotateAroundCenter(e.node);e.node.setAttribute("transform","rotate(-90 ".concat(p.x," ").concat(p.y,")"))}}},{key:"animateTreemap",value:function(e,t,r,a){var o=new q(this.ctx);o.animateRect(e,{x:t.x,y:t.y,width:t.width,height:t.height},{x:r.x,y:r.y,width:r.width,height:r.height},a,function(){o.animationCompleted(e)})}}]),_}(),kf=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w,this.timeScaleArray=[],this.utc=this.w.config.xaxis.labels.datetimeUTC}return b(_,[{key:"calculateTimeScaleTicks",value:function(e,t){var r=this,a=this.w;if(a.globals.allSeriesCollapsed)return a.globals.labels=[],a.globals.timescaleLabels=[],[];var o=new je(this.ctx),h=(t-e)/864e5;this.determineInterval(h),a.globals.disableZoomIn=!1,a.globals.disableZoomOut=!1,h<.00011574074074074075?a.globals.disableZoomIn=!0:h>5e4&&(a.globals.disableZoomOut=!0);var c=o.getTimeUnitsfromTimestamp(e,t,this.utc),d=a.globals.gridWidth/h,p=d/24,x=p/60,m=x/60,y=Math.floor(24*h),A=Math.floor(1440*h),E=Math.floor(86400*h),C=Math.floor(h),L=Math.floor(h/30),R=Math.floor(h/365),F={minMillisecond:c.minMillisecond,minSecond:c.minSecond,minMinute:c.minMinute,minHour:c.minHour,minDate:c.minDate,minMonth:c.minMonth,minYear:c.minYear},D={firstVal:F,currentMillisecond:F.minMillisecond,currentSecond:F.minSecond,currentMinute:F.minMinute,currentHour:F.minHour,currentMonthDate:F.minDate,currentDate:F.minDate,currentMonth:F.minMonth,currentYear:F.minYear,daysWidthOnXAxis:d,hoursWidthOnXAxis:p,minutesWidthOnXAxis:x,secondsWidthOnXAxis:m,numberOfSeconds:E,numberOfMinutes:A,numberOfHours:y,numberOfDays:C,numberOfMonths:L,numberOfYears:R};switch(this.tickInterval){case"years":this.generateYearScale(D);break;case"months":case"half_year":this.generateMonthScale(D);break;case"months_days":case"months_fortnight":case"days":case"week_days":this.generateDayScale(D);break;case"hours":this.generateHourScale(D);break;case"minutes_fives":case"minutes":this.generateMinuteScale(D);break;case"seconds_tens":case"seconds_fives":case"seconds":this.generateSecondScale(D)}var g=this.timeScaleArray.map(function(w){var T={position:w.position,unit:w.unit,year:w.year,day:w.day?w.day:1,hour:w.hour?w.hour:0,month:w.month+1};return w.unit==="month"?l(l({},T),{},{day:1,value:w.value+1}):w.unit==="day"||w.unit==="hour"?l(l({},T),{},{value:w.value}):w.unit==="minute"?l(l({},T),{},{value:w.value,minute:w.value}):w.unit==="second"?l(l({},T),{},{value:w.value,minute:w.minute,second:w.second}):w});return g.filter(function(w){var T=1,M=Math.ceil(a.globals.gridWidth/120),V=w.value;a.config.xaxis.tickAmount!==void 0&&(M=a.config.xaxis.tickAmount),g.length>M&&(T=Math.floor(g.length/M));var J=!1,G=!1;switch(r.tickInterval){case"years":w.unit==="year"&&(J=!0);break;case"half_year":T=7,w.unit==="year"&&(J=!0);break;case"months":T=1,w.unit==="year"&&(J=!0);break;case"months_fortnight":T=15,w.unit!=="year"&&w.unit!=="month"||(J=!0),V===30&&(G=!0);break;case"months_days":T=10,w.unit==="month"&&(J=!0),V===30&&(G=!0);break;case"week_days":T=8,w.unit==="month"&&(J=!0);break;case"days":T=1,w.unit==="month"&&(J=!0);break;case"hours":w.unit==="day"&&(J=!0);break;case"minutes_fives":V%5!=0&&(G=!0);break;case"seconds_tens":V%10!=0&&(G=!0);break;case"seconds_fives":V%5!=0&&(G=!0)}if(r.tickInterval==="hours"||r.tickInterval==="minutes_fives"||r.tickInterval==="seconds_tens"||r.tickInterval==="seconds_fives"){if(!G)return!0}else if((V%T==0||J)&&!G)return!0})}},{key:"recalcDimensionsBasedOnFormat",value:function(e,t){var r=this.w,a=this.formatDates(e),o=this.removeOverlappingTS(a);r.globals.timescaleLabels=o.slice(),new qe(this.ctx).plotCoords()}},{key:"determineInterval",value:function(e){var t=24*e,r=60*t;switch(!0){case e/365>5:this.tickInterval="years";break;case e>800:this.tickInterval="half_year";break;case e>180:this.tickInterval="months";break;case e>90:this.tickInterval="months_fortnight";break;case e>60:this.tickInterval="months_days";break;case e>30:this.tickInterval="week_days";break;case e>2:this.tickInterval="days";break;case t>2.4:this.tickInterval="hours";break;case r>15:this.tickInterval="minutes_fives";break;case r>5:this.tickInterval="minutes";break;case r>1:this.tickInterval="seconds_tens";break;case 60*r>20:this.tickInterval="seconds_fives";break;default:this.tickInterval="seconds"}}},{key:"generateYearScale",value:function(e){var t=e.firstVal,r=e.currentMonth,a=e.currentYear,o=e.daysWidthOnXAxis,h=e.numberOfYears,c=t.minYear,d=0,p=new je(this.ctx),x="year";if(t.minDate>1||t.minMonth>0){var m=p.determineRemainingDaysOfYear(t.minYear,t.minMonth,t.minDate);d=(p.determineDaysOfYear(t.minYear)-m+1)*o,c=t.minYear+1,this.timeScaleArray.push({position:d,value:c,unit:x,year:c,month:P.monthMod(r+1)})}else t.minDate===1&&t.minMonth===0&&this.timeScaleArray.push({position:d,value:c,unit:x,year:a,month:P.monthMod(r+1)});for(var y=c,A=d,E=0;E<h;E++)y++,A=p.determineDaysOfYear(y-1)*o+A,this.timeScaleArray.push({position:A,value:y,unit:x,year:y,month:1})}},{key:"generateMonthScale",value:function(e){var t=e.firstVal,r=e.currentMonthDate,a=e.currentMonth,o=e.currentYear,h=e.daysWidthOnXAxis,c=e.numberOfMonths,d=a,p=0,x=new je(this.ctx),m="month",y=0;if(t.minDate>1){p=(x.determineDaysOfMonths(a+1,t.minYear)-r+1)*h,d=P.monthMod(a+1);var A=o+y,E=P.monthMod(d),C=d;d===0&&(m="year",C=A,E=1,A+=y+=1),this.timeScaleArray.push({position:p,value:C,unit:m,year:A,month:E})}else this.timeScaleArray.push({position:p,value:d,unit:m,year:o,month:P.monthMod(a)});for(var L=d+1,R=p,F=0,D=1;F<c;F++,D++){(L=P.monthMod(L))===0?(m="year",y+=1):m="month";var g=this._getYear(o,L,y);R=x.determineDaysOfMonths(L,g)*h+R;var w=L===0?g:L;this.timeScaleArray.push({position:R,value:w,unit:m,year:g,month:L===0?1:L}),L++}}},{key:"generateDayScale",value:function(e){var t=e.firstVal,r=e.currentMonth,a=e.currentYear,o=e.hoursWidthOnXAxis,h=e.numberOfDays,c=new je(this.ctx),d="day",p=t.minDate+1,x=p,m=function(D,g,w){return D>c.determineDaysOfMonths(g+1,w)&&(x=1,d="month",A=g+=1),g},y=(24-t.minHour)*o,A=p,E=m(x,r,a);t.minHour===0&&t.minDate===1?(y=0,A=P.monthMod(t.minMonth),d="month",x=t.minDate,h++):t.minDate!==1&&t.minHour===0&&t.minMinute===0&&(y=0,p=t.minDate,A=p,E=m(x=p,r,a)),this.timeScaleArray.push({position:y,value:A,unit:d,year:this._getYear(a,E,0),month:P.monthMod(E),day:x});for(var C=y,L=0;L<h;L++){d="day",E=m(x+=1,E,this._getYear(a,E,0));var R=this._getYear(a,E,0);C=24*o+C;var F=x===1?P.monthMod(E):x;this.timeScaleArray.push({position:C,value:F,unit:d,year:R,month:P.monthMod(E),day:F})}}},{key:"generateHourScale",value:function(e){var t=e.firstVal,r=e.currentDate,a=e.currentMonth,o=e.currentYear,h=e.minutesWidthOnXAxis,c=e.numberOfHours,d=new je(this.ctx),p="hour",x=function(T,M){return T>d.determineDaysOfMonths(M+1,o)&&(L=1,M+=1),{month:M,date:L}},m=function(T,M){return T>d.determineDaysOfMonths(M+1,o)?M+=1:M},y=60-(t.minMinute+t.minSecond/60),A=y*h,E=t.minHour+1,C=E+1;y===60&&(A=0,C=(E=t.minHour)+1);var L=r,R=m(L,a);this.timeScaleArray.push({position:A,value:E,unit:p,day:L,hour:C,year:o,month:P.monthMod(R)});for(var F=A,D=0;D<c;D++){p="hour",C>=24&&(C=0,p="day",R=x(L+=1,R).month,R=m(L,R));var g=this._getYear(o,R,0);F=C===0&&D===0?y*h:60*h+F;var w=C===0?L:C;this.timeScaleArray.push({position:F,value:w,unit:p,hour:C,day:L,year:g,month:P.monthMod(R)}),C++}}},{key:"generateMinuteScale",value:function(e){for(var t=e.currentMillisecond,r=e.currentSecond,a=e.currentMinute,o=e.currentHour,h=e.currentDate,c=e.currentMonth,d=e.currentYear,p=e.minutesWidthOnXAxis,x=e.secondsWidthOnXAxis,m=e.numberOfMinutes,y=a+1,A=h,E=c,C=d,L=o,R=(60-r-t/1e3)*x,F=0;F<m;F++)y>=60&&(y=0,(L+=1)===24&&(L=0)),this.timeScaleArray.push({position:R,value:y,unit:"minute",hour:L,minute:y,day:A,year:this._getYear(C,E,0),month:P.monthMod(E)}),R+=p,y++}},{key:"generateSecondScale",value:function(e){for(var t=e.currentMillisecond,r=e.currentSecond,a=e.currentMinute,o=e.currentHour,h=e.currentDate,c=e.currentMonth,d=e.currentYear,p=e.secondsWidthOnXAxis,x=e.numberOfSeconds,m=r+1,y=a,A=h,E=c,C=d,L=o,R=(1e3-t)/1e3*p,F=0;F<x;F++)m>=60&&(m=0,++y>=60&&(y=0,++L===24&&(L=0))),this.timeScaleArray.push({position:R,value:m,unit:"second",hour:L,minute:y,second:m,day:A,year:this._getYear(C,E,0),month:P.monthMod(E)}),R+=p,m++}},{key:"createRawDateString",value:function(e,t){var r=e.year;return e.month===0&&(e.month=1),r+="-"+("0"+e.month.toString()).slice(-2),e.unit==="day"?r+=e.unit==="day"?"-"+("0"+t).slice(-2):"-01":r+="-"+("0"+(e.day?e.day:"1")).slice(-2),e.unit==="hour"?r+=e.unit==="hour"?"T"+("0"+t).slice(-2):"T00":r+="T"+("0"+(e.hour?e.hour:"0")).slice(-2),e.unit==="minute"?r+=":"+("0"+t).slice(-2):r+=":"+(e.minute?("0"+e.minute).slice(-2):"00"),e.unit==="second"?r+=":"+("0"+t).slice(-2):r+=":00",this.utc&&(r+=".000Z"),r}},{key:"formatDates",value:function(e){var t=this,r=this.w;return e.map(function(a){var o=a.value.toString(),h=new je(t.ctx),c=t.createRawDateString(a,o),d=h.getDate(h.parseDate(c));if(t.utc||(d=h.getDate(h.parseDateWithTimezone(c))),r.config.xaxis.labels.format===void 0){var p="dd MMM",x=r.config.xaxis.labels.datetimeFormatter;a.unit==="year"&&(p=x.year),a.unit==="month"&&(p=x.month),a.unit==="day"&&(p=x.day),a.unit==="hour"&&(p=x.hour),a.unit==="minute"&&(p=x.minute),a.unit==="second"&&(p=x.second),o=h.formatDate(d,p)}else o=h.formatDate(d,r.config.xaxis.labels.format);return{dateString:c,position:a.position,value:o,unit:a.unit,year:a.year,month:a.month}})}},{key:"removeOverlappingTS",value:function(e){var t,r=this,a=new X(this.ctx),o=!1;e.length>0&&e[0].value&&e.every(function(d){return d.value.length===e[0].value.length})&&(o=!0,t=a.getTextRects(e[0].value).width);var h=0,c=e.map(function(d,p){if(p>0&&r.w.config.xaxis.labels.hideOverlappingLabels){var x=o?t:a.getTextRects(e[h].value).width,m=e[h].position;return d.position>m+x+10?(h=p,d):null}return d});return c=c.filter(function(d){return d!==null})}},{key:"_getYear",value:function(e,t,r){return e+Math.floor(t/12)+r}}]),_}(),Af=function(){function _(e,t){f(this,_),this.ctx=t,this.w=t.w,this.el=e}return b(_,[{key:"setupElements",value:function(){var e=this.w.globals,t=this.w.config,r=t.chart.type;e.axisCharts=["line","area","bar","rangeBar","candlestick","boxPlot","scatter","bubble","radar","heatmap","treemap"].indexOf(r)>-1,e.xyCharts=["line","area","bar","rangeBar","candlestick","boxPlot","scatter","bubble"].indexOf(r)>-1,e.isBarHorizontal=(t.chart.type==="bar"||t.chart.type==="rangeBar"||t.chart.type==="boxPlot")&&t.plotOptions.bar.horizontal,e.chartClass=".apexcharts"+e.chartID,e.dom.baseEl=this.el,e.dom.elWrap=document.createElement("div"),X.setAttrs(e.dom.elWrap,{id:e.chartClass.substring(1),class:"apexcharts-canvas "+e.chartClass.substring(1)}),this.el.appendChild(e.dom.elWrap),e.dom.Paper=new window.SVG.Doc(e.dom.elWrap),e.dom.Paper.attr({class:"apexcharts-svg","xmlns:data":"ApexChartsNS",transform:"translate(".concat(t.chart.offsetX,", ").concat(t.chart.offsetY,")")}),e.dom.Paper.node.style.background=t.chart.background,this.setSVGDimensions(),e.dom.elGraphical=e.dom.Paper.group().attr({class:"apexcharts-inner apexcharts-graphical"}),e.dom.elAnnotations=e.dom.Paper.group().attr({class:"apexcharts-annotations"}),e.dom.elDefs=e.dom.Paper.defs(),e.dom.elLegendWrap=document.createElement("div"),e.dom.elLegendWrap.classList.add("apexcharts-legend"),e.dom.elWrap.appendChild(e.dom.elLegendWrap),e.dom.Paper.add(e.dom.elGraphical),e.dom.elGraphical.add(e.dom.elDefs)}},{key:"plotChartType",value:function(e,t){var r=this.w,a=r.config,o=r.globals,h={series:[],i:[]},c={series:[],i:[]},d={series:[],i:[]},p={series:[],i:[]},x={series:[],i:[]},m={series:[],i:[]},y={series:[],i:[]};o.series.map(function(w,T){var M=0;e[T].type!==void 0?(e[T].type==="column"||e[T].type==="bar"?(o.series.length>1&&a.plotOptions.bar.horizontal&&console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"),x.series.push(w),x.i.push(T),M++,r.globals.columnSeries=x.series):e[T].type==="area"?(c.series.push(w),c.i.push(T),M++):e[T].type==="line"?(h.series.push(w),h.i.push(T),M++):e[T].type==="scatter"?(d.series.push(w),d.i.push(T)):e[T].type==="bubble"?(p.series.push(w),p.i.push(T),M++):e[T].type==="candlestick"?(m.series.push(w),m.i.push(T),M++):e[T].type==="boxPlot"?(y.series.push(w),y.i.push(T),M++):console.warn("You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble"),M>1&&(o.comboCharts=!0)):(h.series.push(w),h.i.push(T))});var A=new hs(this.ctx,t),E=new cs(this.ctx,t);this.ctx.pie=new Ll(this.ctx);var C=new bf(this.ctx);this.ctx.rangeBar=new st(this.ctx,t);var L=new vf(this.ctx),R=[];if(o.comboCharts){if(c.series.length>0&&R.push(A.draw(c.series,"area",c.i)),x.series.length>0)if(r.config.chart.stacked){var F=new El(this.ctx,t);R.push(F.draw(x.series,x.i))}else this.ctx.bar=new nt(this.ctx,t),R.push(this.ctx.bar.draw(x.series,x.i));if(h.series.length>0&&R.push(A.draw(h.series,"line",h.i)),m.series.length>0&&R.push(E.draw(m.series,m.i)),y.series.length>0&&R.push(E.draw(y.series,y.i)),d.series.length>0){var D=new hs(this.ctx,t,!0);R.push(D.draw(d.series,"scatter",d.i))}if(p.series.length>0){var g=new hs(this.ctx,t,!0);R.push(g.draw(p.series,"bubble",p.i))}}else switch(a.chart.type){case"line":R=A.draw(o.series,"line");break;case"area":R=A.draw(o.series,"area");break;case"bar":a.chart.stacked?R=new El(this.ctx,t).draw(o.series):(this.ctx.bar=new nt(this.ctx,t),R=this.ctx.bar.draw(o.series));break;case"candlestick":R=new cs(this.ctx,t).draw(o.series);break;case"boxPlot":R=new cs(this.ctx,t).draw(o.series);break;case"rangeBar":R=this.ctx.rangeBar.draw(o.series);break;case"heatmap":R=new mf(this.ctx,t).draw(o.series);break;case"treemap":R=new wf(this.ctx,t).draw(o.series);break;case"pie":case"donut":case"polarArea":R=this.ctx.pie.draw(o.series);break;case"radialBar":R=C.draw(o.series);break;case"radar":R=L.draw(o.series);break;default:R=A.draw(o.series)}return R}},{key:"setSVGDimensions",value:function(){var e=this.w.globals,t=this.w.config;e.svgWidth=t.chart.width,e.svgHeight=t.chart.height;var r=P.getDimensions(this.el),a=t.chart.width.toString().split(/[0-9]+/g).pop();a==="%"?P.isNumber(r[0])&&(r[0].width===0&&(r=P.getDimensions(this.el.parentNode)),e.svgWidth=r[0]*parseInt(t.chart.width,10)/100):a!=="px"&&a!==""||(e.svgWidth=parseInt(t.chart.width,10));var o=t.chart.height.toString().split(/[0-9]+/g).pop();if(e.svgHeight!=="auto"&&e.svgHeight!=="")if(o==="%"){var h=P.getDimensions(this.el.parentNode);e.svgHeight=h[1]*parseInt(t.chart.height,10)/100}else e.svgHeight=parseInt(t.chart.height,10);else e.axisCharts?e.svgHeight=e.svgWidth/1.61:e.svgHeight=e.svgWidth/1.2;if(e.svgWidth<0&&(e.svgWidth=0),e.svgHeight<0&&(e.svgHeight=0),X.setAttrs(e.dom.Paper.node,{width:e.svgWidth,height:e.svgHeight}),o!=="%"){var c=t.chart.sparkline.enabled?0:e.axisCharts?t.chart.parentHeightOffset:0;e.dom.Paper.node.parentNode.parentNode.style.minHeight=e.svgHeight+c+"px"}e.dom.elWrap.style.width=e.svgWidth+"px",e.dom.elWrap.style.height=e.svgHeight+"px"}},{key:"shiftGraphPosition",value:function(){var e=this.w.globals,t=e.translateY,r={transform:"translate("+e.translateX+", "+t+")"};X.setAttrs(e.dom.elGraphical.node,r)}},{key:"resizeNonAxisCharts",value:function(){var e=this.w,t=e.globals,r=0,a=e.config.chart.sparkline.enabled?1:15;a+=e.config.grid.padding.bottom,e.config.legend.position!=="top"&&e.config.legend.position!=="bottom"||!e.config.legend.show||e.config.legend.floating||(r=new Ze(this.ctx).legendHelpers.getLegendBBox().clwh+10);var o=e.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"),h=2.05*e.globals.radialSize;if(o&&!e.config.chart.sparkline.enabled&&e.config.plotOptions.radialBar.startAngle!==0){var c=P.getBoundingClientRect(o);h=c.bottom;var d=c.bottom-c.top;h=Math.max(2.05*e.globals.radialSize,d)}var p=h+t.translateY+r+a;t.dom.elLegendForeign&&t.dom.elLegendForeign.setAttribute("height",p),t.dom.elWrap.style.height=p+"px",X.setAttrs(t.dom.Paper.node,{height:p}),t.dom.Paper.node.parentNode.parentNode.style.minHeight=p+"px"}},{key:"coreCalculations",value:function(){new ee(this.ctx).init()}},{key:"resetGlobals",value:function(){var e=this,t=function(){return e.w.config.series.map(function(o){return[]})},r=new ue,a=this.w.globals;r.initGlobalVars(a),a.seriesXvalues=t(),a.seriesYvalues=t()}},{key:"isMultipleY",value:function(){if(this.w.config.yaxis.constructor===Array&&this.w.config.yaxis.length>1)return this.w.globals.isMultipleYAxis=!0,!0}},{key:"xySettings",value:function(){var e=null,t=this.w;if(t.globals.axisCharts){if(t.config.xaxis.crosshairs.position==="back"&&new fe(this.ctx).drawXCrosshairs(),t.config.yaxis[0].crosshairs.position==="back"&&new fe(this.ctx).drawYCrosshairs(),t.config.xaxis.type==="datetime"&&t.config.xaxis.labels.formatter===void 0){this.ctx.timeScale=new kf(this.ctx);var r=[];isFinite(t.globals.minX)&&isFinite(t.globals.maxX)&&!t.globals.isBarHorizontal?r=this.ctx.timeScale.calculateTimeScaleTicks(t.globals.minX,t.globals.maxX):t.globals.isBarHorizontal&&(r=this.ctx.timeScale.calculateTimeScaleTicks(t.globals.minY,t.globals.maxY)),this.ctx.timeScale.recalcDimensionsBasedOnFormat(r)}e=new Z(this.ctx).getCalculatedRatios()}return e}},{key:"updateSourceChart",value:function(e){this.ctx.w.globals.selection=void 0,this.ctx.updateHelpers._updateOptions({chart:{selection:{xaxis:{min:e.w.globals.minX,max:e.w.globals.maxX}}}},!1,!1)}},{key:"setupBrushHandler",value:function(){var e=this,t=this.w;if(t.config.chart.brush.enabled&&typeof t.config.chart.events.selection!="function"){var r=t.config.chart.brush.targets||[t.config.chart.brush.target];r.forEach(function(a){var o=ApexCharts.getChartByID(a);o.w.globals.brushSource=e.ctx,typeof o.w.config.chart.events.zoomed!="function"&&(o.w.config.chart.events.zoomed=function(){e.updateSourceChart(o)}),typeof o.w.config.chart.events.scrolled!="function"&&(o.w.config.chart.events.scrolled=function(){e.updateSourceChart(o)})}),t.config.chart.events.selection=function(a,o){r.forEach(function(h){var c=ApexCharts.getChartByID(h),d=P.clone(t.config.yaxis);if(t.config.chart.brush.autoScaleYaxis&&c.w.globals.series.length===1){var p=new $(c);d=p.autoScaleY(c,d,o)}var x=c.w.config.yaxis.reduce(function(m,y,A){return[].concat(K(m),[l(l({},c.w.config.yaxis[A]),{},{min:d[0].min,max:d[0].max})])},[]);c.ctx.updateHelpers._updateOptions({xaxis:{min:o.xaxis.min,max:o.xaxis.max},yaxis:x},!1,!1,!1,!1)})}}}}]),_}(),Sf=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"_updateOptions",value:function(e){var t=this,r=arguments.length>1&&arguments[1]!==void 0&&arguments[1],a=!(arguments.length>2&&arguments[2]!==void 0)||arguments[2],o=!(arguments.length>3&&arguments[3]!==void 0)||arguments[3],h=arguments.length>4&&arguments[4]!==void 0&&arguments[4];return new Promise(function(c){var d=[t.ctx];o&&(d=t.ctx.getSyncedCharts()),t.ctx.w.globals.isExecCalled&&(d=[t.ctx],t.ctx.w.globals.isExecCalled=!1),d.forEach(function(p,x){var m=p.w;if(m.globals.shouldAnimate=a,r||(m.globals.resized=!0,m.globals.dataChanged=!0,a&&p.series.getPreviousPaths()),e&&u(e)==="object"&&(p.config=new Q(e),e=Z.extendArrayProps(p.config,e,m),p.w.globals.chartID!==t.ctx.w.globals.chartID&&delete e.series,m.config=P.extend(m.config,e),h&&(m.globals.lastXAxis=e.xaxis?P.clone(e.xaxis):[],m.globals.lastYAxis=e.yaxis?P.clone(e.yaxis):[],m.globals.initialConfig=P.extend({},m.config),m.globals.initialSeries=P.clone(m.config.series),e.series))){for(var y=0;y<m.globals.collapsedSeriesIndices.length;y++){var A=m.config.series[m.globals.collapsedSeriesIndices[y]];m.globals.collapsedSeries[y].data=m.globals.axisCharts?A.data.slice():A}for(var E=0;E<m.globals.ancillaryCollapsedSeriesIndices.length;E++){var C=m.config.series[m.globals.ancillaryCollapsedSeriesIndices[E]];m.globals.ancillaryCollapsedSeries[E].data=m.globals.axisCharts?C.data.slice():C}p.series.emptyCollapsedSeries(m.config.series)}return p.update(e).then(function(){x===d.length-1&&c(p)})})})}},{key:"_updateSeries",value:function(e,t){var r=this,a=arguments.length>2&&arguments[2]!==void 0&&arguments[2];return new Promise(function(o){var h,c=r.w;return c.globals.shouldAnimate=t,c.globals.dataChanged=!0,t&&r.ctx.series.getPreviousPaths(),c.globals.axisCharts?((h=e.map(function(d,p){return r._extendSeries(d,p)})).length===0&&(h=[{data:[]}]),c.config.series=h):c.config.series=e.slice(),a&&(c.globals.initialSeries=P.clone(c.config.series)),r.ctx.update().then(function(){o(r.ctx)})})}},{key:"_extendSeries",value:function(e,t){var r=this.w,a=r.config.series[t];return l(l({},r.config.series[t]),{},{name:e.name?e.name:a&&a.name,color:e.color?e.color:a&&a.color,type:e.type?e.type:a&&a.type,data:e.data?e.data:a&&a.data})}},{key:"toggleDataPointSelection",value:function(e,t){var r=this.w,a=null,o=".apexcharts-series[data\\:realIndex='".concat(e,"']");return r.globals.axisCharts?a=r.globals.dom.Paper.select("".concat(o," path[j='").concat(t,"'], ").concat(o," circle[j='").concat(t,"'], ").concat(o," rect[j='").concat(t,"']")).members[0]:t===void 0&&(a=r.globals.dom.Paper.select("".concat(o," path[j='").concat(e,"']")).members[0],r.config.chart.type!=="pie"&&r.config.chart.type!=="polarArea"&&r.config.chart.type!=="donut"||this.ctx.pie.pieClicked(e)),a?(new X(this.ctx).pathMouseDown(a,null),a.node?a.node:null):(console.warn("toggleDataPointSelection: Element not found"),null)}},{key:"forceXAxisUpdate",value:function(e){var t=this.w;if(["min","max"].forEach(function(a){e.xaxis[a]!==void 0&&(t.config.xaxis[a]=e.xaxis[a],t.globals.lastXAxis[a]=e.xaxis[a])}),e.xaxis.categories&&e.xaxis.categories.length&&(t.config.xaxis.categories=e.xaxis.categories),t.config.xaxis.convertedCatToNumeric){var r=new bt(e);e=r.convertCatToNumericXaxis(e,this.ctx)}return e}},{key:"forceYAxisUpdate",value:function(e){var t=this.w;return t.config.chart.stacked&&t.config.chart.stackType==="100%"&&(Array.isArray(e.yaxis)?e.yaxis.forEach(function(r,a){e.yaxis[a].min=0,e.yaxis[a].max=100}):(e.yaxis.min=0,e.yaxis.max=100)),e}},{key:"revertDefaultAxisMinMax",value:function(e){var t=this,r=this.w,a=r.globals.lastXAxis,o=r.globals.lastYAxis;e&&e.xaxis&&(a=e.xaxis),e&&e.yaxis&&(o=e.yaxis),r.config.xaxis.min=a.min,r.config.xaxis.max=a.max;var h=function(c){o[c]!==void 0&&(r.config.yaxis[c].min=o[c].min,r.config.yaxis[c].max=o[c].max)};r.config.yaxis.map(function(c,d){r.globals.zoomed||o[d]!==void 0?h(d):t.ctx.opts.yaxis[d]!==void 0&&(c.min=t.ctx.opts.yaxis[d].min,c.max=t.ctx.opts.yaxis[d].max)})}}]),_}();Wi=typeof window!="undefined"?window:void 0,Br=function(_,e){var t=(this!==void 0?this:_).SVG=function(g){if(t.supported)return g=new t.Doc(g),t.parser.draw||t.prepare(),g};if(t.ns="http://www.w3.org/2000/svg",t.xmlns="http://www.w3.org/2000/xmlns/",t.xlink="http://www.w3.org/1999/xlink",t.svgjs="http://svgjs.dev",t.supported=!0,!t.supported)return!1;t.did=1e3,t.eid=function(g){return"Svgjs"+x(g)+t.did++},t.create=function(g){var w=e.createElementNS(this.ns,g);return w.setAttribute("id",this.eid(g)),w},t.extend=function(){var g,w;w=(g=[].slice.call(arguments)).pop();for(var T=g.length-1;T>=0;T--)if(g[T])for(var M in w)g[T].prototype[M]=w[M];t.Set&&t.Set.inherit&&t.Set.inherit()},t.invent=function(g){var w=typeof g.create=="function"?g.create:function(){this.constructor.call(this,t.create(g.create))};return g.inherit&&(w.prototype=new g.inherit),g.extend&&t.extend(w,g.extend),g.construct&&t.extend(g.parent||t.Container,g.construct),w},t.adopt=function(g){return g?g.instance?g.instance:((w=g.nodeName=="svg"?g.parentNode instanceof _.SVGElement?new t.Nested:new t.Doc:g.nodeName=="linearGradient"?new t.Gradient("linear"):g.nodeName=="radialGradient"?new t.Gradient("radial"):t[x(g.nodeName)]?new t[x(g.nodeName)]:new t.Element(g)).type=g.nodeName,w.node=g,g.instance=w,w instanceof t.Doc&&w.namespace().defs(),w.setData(JSON.parse(g.getAttribute("svgjs:data"))||{}),w):null;var w},t.prepare=function(){var g=e.getElementsByTagName("body")[0],w=(g?new t.Doc(g):t.adopt(e.documentElement).nested()).size(2,0);t.parser={body:g||e.documentElement,draw:w.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node,poly:w.polyline().node,path:w.path().node,native:t.create("svg")}},t.parser={native:t.create("svg")},e.addEventListener("DOMContentLoaded",function(){t.parser.draw||t.prepare()},!1),t.regex={numberAndUnit:/^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,hex:/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,rgb:/rgb\((\d+),(\d+),(\d+)\)/,reference:/#([a-z0-9\-_]+)/i,transforms:/\)\s*,?\s*/,whitespace:/\s/g,isHex:/^#[a-f0-9]{3,6}$/i,isRgb:/^rgb\(/,isCss:/[^:]+:[^;]+;?/,isBlank:/^(\s+)?$/,isNumber:/^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,isPercent:/^-?[\d\.]+%$/,isImage:/\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,delimiter:/[\s,]+/,hyphen:/([^e])\-/gi,pathLetters:/[MLHVCSQTAZ]/gi,isPathLetter:/[MLHVCSQTAZ]/i,numbersWithDots:/((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,dots:/\./g},t.utils={map:function(g,w){for(var T=g.length,M=[],V=0;V<T;V++)M.push(w(g[V]));return M},filter:function(g,w){for(var T=g.length,M=[],V=0;V<T;V++)w(g[V])&&M.push(g[V]);return M},filterSVGElements:function(g){return this.filter(g,function(w){return w instanceof _.SVGElement})}},t.defaults={attrs:{"fill-opacity":1,"stroke-opacity":1,"stroke-width":0,"stroke-linejoin":"miter","stroke-linecap":"butt",fill:"#000000",stroke:"#000000",opacity:1,x:0,y:0,cx:0,cy:0,width:0,height:0,r:0,rx:0,ry:0,offset:0,"stop-opacity":1,"stop-color":"#000000","font-size":16,"font-family":"Helvetica, Arial, sans-serif","text-anchor":"start"}},t.Color=function(g){var w,T;this.r=0,this.g=0,this.b=0,g&&(typeof g=="string"?t.regex.isRgb.test(g)?(w=t.regex.rgb.exec(g.replace(t.regex.whitespace,"")),this.r=parseInt(w[1]),this.g=parseInt(w[2]),this.b=parseInt(w[3])):t.regex.isHex.test(g)&&(w=t.regex.hex.exec((T=g).length==4?["#",T.substring(1,2),T.substring(1,2),T.substring(2,3),T.substring(2,3),T.substring(3,4),T.substring(3,4)].join(""):T),this.r=parseInt(w[1],16),this.g=parseInt(w[2],16),this.b=parseInt(w[3],16)):u(g)==="object"&&(this.r=g.r,this.g=g.g,this.b=g.b))},t.extend(t.Color,{toString:function(){return this.toHex()},toHex:function(){return"#"+m(this.r)+m(this.g)+m(this.b)},toRgb:function(){return"rgb("+[this.r,this.g,this.b].join()+")"},brightness:function(){return this.r/255*.3+this.g/255*.59+this.b/255*.11},morph:function(g){return this.destination=new t.Color(g),this},at:function(g){return this.destination?(g=g<0?0:g>1?1:g,new t.Color({r:~~(this.r+(this.destination.r-this.r)*g),g:~~(this.g+(this.destination.g-this.g)*g),b:~~(this.b+(this.destination.b-this.b)*g)})):this}}),t.Color.test=function(g){return g+="",t.regex.isHex.test(g)||t.regex.isRgb.test(g)},t.Color.isRgb=function(g){return g&&typeof g.r=="number"&&typeof g.g=="number"&&typeof g.b=="number"},t.Color.isColor=function(g){return t.Color.isRgb(g)||t.Color.test(g)},t.Array=function(g,w){(g=(g||[]).valueOf()).length==0&&w&&(g=w.valueOf()),this.value=this.parse(g)},t.extend(t.Array,{toString:function(){return this.value.join(" ")},valueOf:function(){return this.value},parse:function(g){return g=g.valueOf(),Array.isArray(g)?g:this.split(g)}}),t.PointArray=function(g,w){t.Array.call(this,g,w||[[0,0]])},t.PointArray.prototype=new t.Array,t.PointArray.prototype.constructor=t.PointArray;for(var r={M:function(g,w,T){return w.x=T.x=g[0],w.y=T.y=g[1],["M",w.x,w.y]},L:function(g,w){return w.x=g[0],w.y=g[1],["L",g[0],g[1]]},H:function(g,w){return w.x=g[0],["H",g[0]]},V:function(g,w){return w.y=g[0],["V",g[0]]},C:function(g,w){return w.x=g[4],w.y=g[5],["C",g[0],g[1],g[2],g[3],g[4],g[5]]},Q:function(g,w){return w.x=g[2],w.y=g[3],["Q",g[0],g[1],g[2],g[3]]},Z:function(g,w,T){return w.x=T.x,w.y=T.y,["Z"]}},a="mlhvqtcsaz".split(""),o=0,h=a.length;o<h;++o)r[a[o]]=function(g){return function(w,T,M){if(g=="H")w[0]=w[0]+T.x;else if(g=="V")w[0]=w[0]+T.y;else if(g=="A")w[5]=w[5]+T.x,w[6]=w[6]+T.y;else for(var V=0,J=w.length;V<J;++V)w[V]=w[V]+(V%2?T.y:T.x);if(r&&typeof r[g]=="function")return r[g](w,T,M)}}(a[o].toUpperCase());t.PathArray=function(g,w){t.Array.call(this,g,w||[["M",0,0]])},t.PathArray.prototype=new t.Array,t.PathArray.prototype.constructor=t.PathArray,t.extend(t.PathArray,{toString:function(){return function(g){for(var w=0,T=g.length,M="";w<T;w++)M+=g[w][0],g[w][1]!=null&&(M+=g[w][1],g[w][2]!=null&&(M+=" ",M+=g[w][2],g[w][3]!=null&&(M+=" ",M+=g[w][3],M+=" ",M+=g[w][4],g[w][5]!=null&&(M+=" ",M+=g[w][5],M+=" ",M+=g[w][6],g[w][7]!=null&&(M+=" ",M+=g[w][7])))));return M+" "}(this.value)},move:function(g,w){var T=this.bbox();return T.x,T.y,this},at:function(g){if(!this.destination)return this;for(var w=this.value,T=this.destination.value,M=[],V=new t.PathArray,J=0,G=w.length;J<G;J++){M[J]=[w[J][0]];for(var oe=1,re=w[J].length;oe<re;oe++)M[J][oe]=w[J][oe]+(T[J][oe]-w[J][oe])*g;M[J][0]==="A"&&(M[J][4]=+(M[J][4]!=0),M[J][5]=+(M[J][5]!=0))}return V.value=M,V},parse:function(g){if(g instanceof t.PathArray)return g.valueOf();var w,T={M:2,L:2,H:1,V:1,C:6,S:4,Q:4,T:2,A:7,Z:0};g=typeof g=="string"?g.replace(t.regex.numbersWithDots,d).replace(t.regex.pathLetters," $& ").replace(t.regex.hyphen,"$1 -").trim().split(t.regex.delimiter):g.reduce(function(re,ge){return[].concat.call(re,ge)},[]);var M=[],V=new t.Point,J=new t.Point,G=0,oe=g.length;do t.regex.isPathLetter.test(g[G])?(w=g[G],++G):w=="M"?w="L":w=="m"&&(w="l"),M.push(r[w].call(null,g.slice(G,G+=T[w.toUpperCase()]).map(parseFloat),V,J));while(oe>G);return M},bbox:function(){return t.parser.draw||t.prepare(),t.parser.path.setAttribute("d",this.toString()),t.parser.path.getBBox()}}),t.Number=t.invent({create:function(g,w){this.value=0,this.unit=w||"",typeof g=="number"?this.value=isNaN(g)?0:isFinite(g)?g:g<0?-34e37:34e37:typeof g=="string"?(w=g.match(t.regex.numberAndUnit))&&(this.value=parseFloat(w[1]),w[5]=="%"?this.value/=100:w[5]=="s"&&(this.value*=1e3),this.unit=w[5]):g instanceof t.Number&&(this.value=g.valueOf(),this.unit=g.unit)},extend:{toString:function(){return(this.unit=="%"?~~(1e8*this.value)/1e6:this.unit=="s"?this.value/1e3:this.value)+this.unit},toJSON:function(){return this.toString()},valueOf:function(){return this.value},plus:function(g){return g=new t.Number(g),new t.Number(this+g,this.unit||g.unit)},minus:function(g){return g=new t.Number(g),new t.Number(this-g,this.unit||g.unit)},times:function(g){return g=new t.Number(g),new t.Number(this*g,this.unit||g.unit)},divide:function(g){return g=new t.Number(g),new t.Number(this/g,this.unit||g.unit)},to:function(g){var w=new t.Number(this);return typeof g=="string"&&(w.unit=g),w},morph:function(g){return this.destination=new t.Number(g),g.relative&&(this.destination.value+=this.value),this},at:function(g){return this.destination?new t.Number(this.destination).minus(this).times(g).plus(this):this}}}),t.Element=t.invent({create:function(g){this._stroke=t.defaults.attrs.stroke,this._event=null,this.dom={},(this.node=g)&&(this.type=g.nodeName,this.node.instance=this,this._stroke=g.getAttribute("stroke")||this._stroke)},extend:{x:function(g){return this.attr("x",g)},y:function(g){return this.attr("y",g)},cx:function(g){return g==null?this.x()+this.width()/2:this.x(g-this.width()/2)},cy:function(g){return g==null?this.y()+this.height()/2:this.y(g-this.height()/2)},move:function(g,w){return this.x(g).y(w)},center:function(g,w){return this.cx(g).cy(w)},width:function(g){return this.attr("width",g)},height:function(g){return this.attr("height",g)},size:function(g,w){var T=y(this,g,w);return this.width(new t.Number(T.width)).height(new t.Number(T.height))},clone:function(g){this.writeDataToDom();var w=C(this.node.cloneNode(!0));return g?g.add(w):this.after(w),w},remove:function(){return this.parent()&&this.parent().removeElement(this),this},replace:function(g){return this.after(g).remove(),g},addTo:function(g){return g.put(this)},putIn:function(g){return g.add(this)},id:function(g){return this.attr("id",g)},show:function(){return this.style("display","")},hide:function(){return this.style("display","none")},visible:function(){return this.style("display")!="none"},toString:function(){return this.attr("id")},classes:function(){var g=this.attr("class");return g==null?[]:g.trim().split(t.regex.delimiter)},hasClass:function(g){return this.classes().indexOf(g)!=-1},addClass:function(g){if(!this.hasClass(g)){var w=this.classes();w.push(g),this.attr("class",w.join(" "))}return this},removeClass:function(g){return this.hasClass(g)&&this.attr("class",this.classes().filter(function(w){return w!=g}).join(" ")),this},toggleClass:function(g){return this.hasClass(g)?this.removeClass(g):this.addClass(g)},reference:function(g){return t.get(this.attr(g))},parent:function(g){var w=this;if(!w.node.parentNode)return null;if(w=t.adopt(w.node.parentNode),!g)return w;for(;w&&w.node instanceof _.SVGElement;){if(typeof g=="string"?w.matches(g):w instanceof g)return w;if(!w.node.parentNode||w.node.parentNode.nodeName=="#document")return null;w=t.adopt(w.node.parentNode)}},doc:function(){return this instanceof t.Doc?this:this.parent(t.Doc)},parents:function(g){var w=[],T=this;do{if(!(T=T.parent(g))||!T.node)break;w.push(T)}while(T.parent);return w},matches:function(g){return function(w,T){return(w.matches||w.matchesSelector||w.msMatchesSelector||w.mozMatchesSelector||w.webkitMatchesSelector||w.oMatchesSelector).call(w,T)}(this.node,g)},native:function(){return this.node},svg:function(g){var w=e.createElement("svg");if(!(g&&this instanceof t.Parent))return w.appendChild(g=e.createElement("svg")),this.writeDataToDom(),g.appendChild(this.node.cloneNode(!0)),w.innerHTML.replace(/^<svg>/,"").replace(/<\/svg>$/,"");w.innerHTML="<svg>"+g.replace(/\n/,"").replace(/<([\w:-]+)([^<]+?)\/>/g,"<$1$2></$1>")+"</svg>";for(var T=0,M=w.firstChild.childNodes.length;T<M;T++)this.node.appendChild(w.firstChild.firstChild);return this},writeDataToDom:function(){return(this.each||this.lines)&&(this.each?this:this.lines()).each(function(){this.writeDataToDom()}),this.node.removeAttribute("svgjs:data"),Object.keys(this.dom).length&&this.node.setAttribute("svgjs:data",JSON.stringify(this.dom)),this},setData:function(g){return this.dom=g,this},is:function(g){return function(w,T){return w instanceof T}(this,g)}}}),t.easing={"-":function(g){return g},"<>":function(g){return-Math.cos(g*Math.PI)/2+.5},">":function(g){return Math.sin(g*Math.PI/2)},"<":function(g){return 1-Math.cos(g*Math.PI/2)}},t.morph=function(g){return function(w,T){return new t.MorphObj(w,T).at(g)}},t.Situation=t.invent({create:function(g){this.init=!1,this.reversed=!1,this.reversing=!1,this.duration=new t.Number(g.duration).valueOf(),this.delay=new t.Number(g.delay).valueOf(),this.start=+new Date+this.delay,this.finish=this.start+this.duration,this.ease=g.ease,this.loop=0,this.loops=!1,this.animations={},this.attrs={},this.styles={},this.transforms=[],this.once={}}}),t.FX=t.invent({create:function(g){this._target=g,this.situations=[],this.active=!1,this.situation=null,this.paused=!1,this.lastPos=0,this.pos=0,this.absPos=0,this._speed=1},extend:{animate:function(g,w,T){u(g)==="object"&&(w=g.ease,T=g.delay,g=g.duration);var M=new t.Situation({duration:g||1e3,delay:T||0,ease:t.easing[w||"-"]||w});return this.queue(M),this},target:function(g){return g&&g instanceof t.Element?(this._target=g,this):this._target},timeToAbsPos:function(g){return(g-this.situation.start)/(this.situation.duration/this._speed)},absPosToTime:function(g){return this.situation.duration/this._speed*g+this.situation.start},startAnimFrame:function(){this.stopAnimFrame(),this.animationFrame=_.requestAnimationFrame(function(){this.step()}.bind(this))},stopAnimFrame:function(){_.cancelAnimationFrame(this.animationFrame)},start:function(){return!this.active&&this.situation&&(this.active=!0,this.startCurrent()),this},startCurrent:function(){return this.situation.start=+new Date+this.situation.delay/this._speed,this.situation.finish=this.situation.start+this.situation.duration/this._speed,this.initAnimations().step()},queue:function(g){return(typeof g=="function"||g instanceof t.Situation)&&this.situations.push(g),this.situation||(this.situation=this.situations.shift()),this},dequeue:function(){return this.stop(),this.situation=this.situations.shift(),this.situation&&(this.situation instanceof t.Situation?this.start():this.situation.call(this)),this},initAnimations:function(){var g,w=this.situation;if(w.init)return this;for(var T in w.animations){g=this.target()[T](),Array.isArray(g)||(g=[g]),Array.isArray(w.animations[T])||(w.animations[T]=[w.animations[T]]);for(var M=g.length;M--;)w.animations[T][M]instanceof t.Number&&(g[M]=new t.Number(g[M])),w.animations[T][M]=g[M].morph(w.animations[T][M])}for(var T in w.attrs)w.attrs[T]=new t.MorphObj(this.target().attr(T),w.attrs[T]);for(var T in w.styles)w.styles[T]=new t.MorphObj(this.target().style(T),w.styles[T]);return w.initialTransformation=this.target().matrixify(),w.init=!0,this},clearQueue:function(){return this.situations=[],this},clearCurrent:function(){return this.situation=null,this},stop:function(g,w){var T=this.active;return this.active=!1,w&&this.clearQueue(),g&&this.situation&&(!T&&this.startCurrent(),this.atEnd()),this.stopAnimFrame(),this.clearCurrent()},after:function(g){var w=this.last();return this.target().on("finished.fx",function T(M){M.detail.situation==w&&(g.call(this,w),this.off("finished.fx",T))}),this._callStart()},during:function(g){var w=this.last(),T=function(M){M.detail.situation==w&&g.call(this,M.detail.pos,t.morph(M.detail.pos),M.detail.eased,w)};return this.target().off("during.fx",T).on("during.fx",T),this.after(function(){this.off("during.fx",T)}),this._callStart()},afterAll:function(g){var w=function T(M){g.call(this),this.off("allfinished.fx",T)};return this.target().off("allfinished.fx",w).on("allfinished.fx",w),this._callStart()},last:function(){return this.situations.length?this.situations[this.situations.length-1]:this.situation},add:function(g,w,T){return this.last()[T||"animations"][g]=w,this._callStart()},step:function(g){var w,T,M;g||(this.absPos=this.timeToAbsPos(+new Date)),this.situation.loops!==!1?(w=Math.max(this.absPos,0),T=Math.floor(w),this.situation.loops===!0||T<this.situation.loops?(this.pos=w-T,M=this.situation.loop,this.situation.loop=T):(this.absPos=this.situation.loops,this.pos=1,M=this.situation.loop-1,this.situation.loop=this.situation.loops),this.situation.reversing&&(this.situation.reversed=this.situation.reversed!=Boolean((this.situation.loop-M)%2))):(this.absPos=Math.min(this.absPos,1),this.pos=this.absPos),this.pos<0&&(this.pos=0),this.situation.reversed&&(this.pos=1-this.pos);var V=this.situation.ease(this.pos);for(var J in this.situation.once)J>this.lastPos&&J<=V&&(this.situation.once[J].call(this.target(),this.pos,V),delete this.situation.once[J]);return this.active&&this.target().fire("during",{pos:this.pos,eased:V,fx:this,situation:this.situation}),this.situation?(this.eachAt(),this.pos==1&&!this.situation.reversed||this.situation.reversed&&this.pos==0?(this.stopAnimFrame(),this.target().fire("finished",{fx:this,situation:this.situation}),this.situations.length||(this.target().fire("allfinished"),this.situations.length||(this.target().off(".fx"),this.active=!1)),this.active?this.dequeue():this.clearCurrent()):!this.paused&&this.active&&this.startAnimFrame(),this.lastPos=V,this):this},eachAt:function(){var g,w=this,T=this.target(),M=this.situation;for(var V in M.animations)g=[].concat(M.animations[V]).map(function(oe){return typeof oe!="string"&&oe.at?oe.at(M.ease(w.pos),w.pos):oe}),T[V].apply(T,g);for(var V in M.attrs)g=[V].concat(M.attrs[V]).map(function(re){return typeof re!="string"&&re.at?re.at(M.ease(w.pos),w.pos):re}),T.attr.apply(T,g);for(var V in M.styles)g=[V].concat(M.styles[V]).map(function(re){return typeof re!="string"&&re.at?re.at(M.ease(w.pos),w.pos):re}),T.style.apply(T,g);if(M.transforms.length){g=M.initialTransformation,V=0;for(var J=M.transforms.length;V<J;V++){var G=M.transforms[V];G instanceof t.Matrix?g=G.relative?g.multiply(new t.Matrix().morph(G).at(M.ease(this.pos))):g.morph(G).at(M.ease(this.pos)):(G.relative||G.undo(g.extract()),g=g.multiply(G.at(M.ease(this.pos))))}T.matrix(g)}return this},once:function(g,w,T){var M=this.last();return T||(g=M.ease(g)),M.once[g]=w,this},_callStart:function(){return setTimeout(function(){this.start()}.bind(this),0),this}},parent:t.Element,construct:{animate:function(g,w,T){return(this.fx||(this.fx=new t.FX(this))).animate(g,w,T)},delay:function(g){return(this.fx||(this.fx=new t.FX(this))).delay(g)},stop:function(g,w){return this.fx&&this.fx.stop(g,w),this},finish:function(){return this.fx&&this.fx.finish(),this}}}),t.MorphObj=t.invent({create:function(g,w){return t.Color.isColor(w)?new t.Color(g).morph(w):t.regex.delimiter.test(g)?t.regex.pathLetters.test(g)?new t.PathArray(g).morph(w):new t.Array(g).morph(w):t.regex.numberAndUnit.test(w)?new t.Number(g).morph(w):(this.value=g,void(this.destination=w))},extend:{at:function(g,w){return w<1?this.value:this.destination},valueOf:function(){return this.value}}}),t.extend(t.FX,{attr:function(g,w,T){if(u(g)==="object")for(var M in g)this.attr(M,g[M]);else this.add(g,w,"attrs");return this},plot:function(g,w,T,M){return arguments.length==4?this.plot([g,w,T,M]):this.add("plot",new(this.target()).morphArray(g))}}),t.Box=t.invent({create:function(g,w,T,M){if(!(u(g)!=="object"||g instanceof t.Element))return t.Box.call(this,g.left!=null?g.left:g.x,g.top!=null?g.top:g.y,g.width,g.height);arguments.length==4&&(this.x=g,this.y=w,this.width=T,this.height=M),L(this)}}),t.BBox=t.invent({create:function(g){if(t.Box.apply(this,[].slice.call(arguments)),g instanceof t.Element){var w;try{if(!e.documentElement.contains){for(var T=g.node;T.parentNode;)T=T.parentNode;if(T!=e)throw new Error("Element not in the dom")}w=g.node.getBBox()}catch{if(g instanceof t.Shape){t.parser.draw||t.prepare();var M=g.clone(t.parser.draw.instance).show();M&&M.node&&typeof M.node.getBBox=="function"&&(w=M.node.getBBox()),M&&typeof M.remove=="function"&&M.remove()}else w={x:g.node.clientLeft,y:g.node.clientTop,width:g.node.clientWidth,height:g.node.clientHeight}}t.Box.call(this,w)}},inherit:t.Box,parent:t.Element,construct:{bbox:function(){return new t.BBox(this)}}}),t.BBox.prototype.constructor=t.BBox,t.Matrix=t.invent({create:function(g){var w=E([1,0,0,1,0,0]);g=g===null?w:g instanceof t.Element?g.matrixify():typeof g=="string"?E(g.split(t.regex.delimiter).map(parseFloat)):arguments.length==6?E([].slice.call(arguments)):Array.isArray(g)?E(g):g&&u(g)==="object"?g:w;for(var T=F.length-1;T>=0;--T)this[F[T]]=g[F[T]]!=null?g[F[T]]:w[F[T]]},extend:{extract:function(){var g=A(this,0,1);A(this,1,0);var w=180/Math.PI*Math.atan2(g.y,g.x)-90;return{x:this.e,y:this.f,transformedX:(this.e*Math.cos(w*Math.PI/180)+this.f*Math.sin(w*Math.PI/180))/Math.sqrt(this.a*this.a+this.b*this.b),transformedY:(this.f*Math.cos(w*Math.PI/180)+this.e*Math.sin(-w*Math.PI/180))/Math.sqrt(this.c*this.c+this.d*this.d),rotation:w,a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f,matrix:new t.Matrix(this)}},clone:function(){return new t.Matrix(this)},morph:function(g){return this.destination=new t.Matrix(g),this},multiply:function(g){return new t.Matrix(this.native().multiply(function(w){return w instanceof t.Matrix||(w=new t.Matrix(w)),w}(g).native()))},inverse:function(){return new t.Matrix(this.native().inverse())},translate:function(g,w){return new t.Matrix(this.native().translate(g||0,w||0))},native:function(){for(var g=t.parser.native.createSVGMatrix(),w=F.length-1;w>=0;w--)g[F[w]]=this[F[w]];return g},toString:function(){return"matrix("+R(this.a)+","+R(this.b)+","+R(this.c)+","+R(this.d)+","+R(this.e)+","+R(this.f)+")"}},parent:t.Element,construct:{ctm:function(){return new t.Matrix(this.node.getCTM())},screenCTM:function(){if(this instanceof t.Nested){var g=this.rect(1,1),w=g.node.getScreenCTM();return g.remove(),new t.Matrix(w)}return new t.Matrix(this.node.getScreenCTM())}}}),t.Point=t.invent({create:function(g,w){var T;T=Array.isArray(g)?{x:g[0],y:g[1]}:u(g)==="object"?{x:g.x,y:g.y}:g!=null?{x:g,y:w!=null?w:g}:{x:0,y:0},this.x=T.x,this.y=T.y},extend:{clone:function(){return new t.Point(this)},morph:function(g,w){return this.destination=new t.Point(g,w),this}}}),t.extend(t.Element,{point:function(g,w){return new t.Point(g,w).transform(this.screenCTM().inverse())}}),t.extend(t.Element,{attr:function(g,w,T){if(g==null){for(g={},T=(w=this.node.attributes).length-1;T>=0;T--)g[w[T].nodeName]=t.regex.isNumber.test(w[T].nodeValue)?parseFloat(w[T].nodeValue):w[T].nodeValue;return g}if(u(g)==="object")for(var M in g)this.attr(M,g[M]);else if(w===null)this.node.removeAttribute(g);else{if(w==null)return(w=this.node.getAttribute(g))==null?t.defaults.attrs[g]:t.regex.isNumber.test(w)?parseFloat(w):w;g=="stroke-width"?this.attr("stroke",parseFloat(w)>0?this._stroke:null):g=="stroke"&&(this._stroke=w),g!="fill"&&g!="stroke"||(t.regex.isImage.test(w)&&(w=this.doc().defs().image(w,0,0)),w instanceof t.Image&&(w=this.doc().defs().pattern(0,0,function(){this.add(w)}))),typeof w=="number"?w=new t.Number(w):t.Color.isColor(w)?w=new t.Color(w):Array.isArray(w)&&(w=new t.Array(w)),g=="leading"?this.leading&&this.leading(w):typeof T=="string"?this.node.setAttributeNS(T,g,w.toString()):this.node.setAttribute(g,w.toString()),!this.rebuild||g!="font-size"&&g!="x"||this.rebuild(g,w)}return this}}),t.extend(t.Element,{transform:function(g,w){var T;return u(g)!=="object"?(T=new t.Matrix(this).extract(),typeof g=="string"?T[g]:T):(T=new t.Matrix(this),w=!!w||!!g.relative,g.a!=null&&(T=w?T.multiply(new t.Matrix(g)):new t.Matrix(g)),this.attr("transform",T))}}),t.extend(t.Element,{untransform:function(){return this.attr("transform",null)},matrixify:function(){return(this.attr("transform")||"").split(t.regex.transforms).slice(0,-1).map(function(g){var w=g.trim().split("(");return[w[0],w[1].split(t.regex.delimiter).map(function(T){return parseFloat(T)})]}).reduce(function(g,w){return w[0]=="matrix"?g.multiply(E(w[1])):g[w[0]].apply(g,w[1])},new t.Matrix)},toParent:function(g){if(this==g)return this;var w=this.screenCTM(),T=g.screenCTM().inverse();return this.addTo(g).untransform().transform(T.multiply(w)),this},toDoc:function(){return this.toParent(this.doc())}}),t.Transformation=t.invent({create:function(g,w){if(arguments.length>1&&typeof w!="boolean")return this.constructor.call(this,[].slice.call(arguments));if(Array.isArray(g))for(var T=0,M=this.arguments.length;T<M;++T)this[this.arguments[T]]=g[T];else if(g&&u(g)==="object")for(T=0,M=this.arguments.length;T<M;++T)this[this.arguments[T]]=g[this.arguments[T]];this.inversed=!1,w===!0&&(this.inversed=!0)}}),t.Translate=t.invent({parent:t.Matrix,inherit:t.Transformation,create:function(g,w){this.constructor.apply(this,[].slice.call(arguments))},extend:{arguments:["transformedX","transformedY"],method:"translate"}}),t.extend(t.Element,{style:function(g,w){if(arguments.length==0)return this.node.style.cssText||"";if(arguments.length<2)if(u(g)==="object")for(var T in g)this.style(T,g[T]);else{if(!t.regex.isCss.test(g))return this.node.style[p(g)];for(g=g.split(/\s*;\s*/).filter(function(M){return!!M}).map(function(M){return M.split(/\s*:\s*/)});w=g.pop();)this.style(w[0],w[1])}else this.node.style[p(g)]=w===null||t.regex.isBlank.test(w)?"":w;return this}}),t.Parent=t.invent({create:function(g){this.constructor.call(this,g)},inherit:t.Element,extend:{children:function(){return t.utils.map(t.utils.filterSVGElements(this.node.childNodes),function(g){return t.adopt(g)})},add:function(g,w){return w==null?this.node.appendChild(g.node):g.node!=this.node.childNodes[w]&&this.node.insertBefore(g.node,this.node.childNodes[w]),this},put:function(g,w){return this.add(g,w),g},has:function(g){return this.index(g)>=0},index:function(g){return[].slice.call(this.node.childNodes).indexOf(g.node)},get:function(g){return t.adopt(this.node.childNodes[g])},first:function(){return this.get(0)},last:function(){return this.get(this.node.childNodes.length-1)},each:function(g,w){for(var T=this.children(),M=0,V=T.length;M<V;M++)T[M]instanceof t.Element&&g.apply(T[M],[M,T]),w&&T[M]instanceof t.Container&&T[M].each(g,w);return this},removeElement:function(g){return this.node.removeChild(g.node),this},clear:function(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return delete this._defs,this},defs:function(){return this.doc().defs()}}}),t.extend(t.Parent,{ungroup:function(g,w){return w===0||this instanceof t.Defs||this.node==t.parser.draw||(g=g||(this instanceof t.Doc?this:this.parent(t.Parent)),w=w||1/0,this.each(function(){return this instanceof t.Defs?this:this instanceof t.Parent?this.ungroup(g,w-1):this.toParent(g)}),this.node.firstChild||this.remove()),this},flatten:function(g,w){return this.ungroup(g,w)}}),t.Container=t.invent({create:function(g){this.constructor.call(this,g)},inherit:t.Parent}),t.ViewBox=t.invent({parent:t.Container,construct:{}}),["click","dblclick","mousedown","mouseup","mouseover","mouseout","mousemove","touchstart","touchmove","touchleave","touchend","touchcancel"].forEach(function(g){t.Element.prototype[g]=function(w){return t.on(this.node,g,w),this}}),t.listeners=[],t.handlerMap=[],t.listenerId=0,t.on=function(g,w,T,M,V){var J=T.bind(M||g.instance||g),G=(t.handlerMap.indexOf(g)+1||t.handlerMap.push(g))-1,oe=w.split(".")[0],re=w.split(".")[1]||"*";t.listeners[G]=t.listeners[G]||{},t.listeners[G][oe]=t.listeners[G][oe]||{},t.listeners[G][oe][re]=t.listeners[G][oe][re]||{},T._svgjsListenerId||(T._svgjsListenerId=++t.listenerId),t.listeners[G][oe][re][T._svgjsListenerId]=J,g.addEventListener(oe,J,V||{passive:!0})},t.off=function(g,w,T){var M=t.handlerMap.indexOf(g),V=w&&w.split(".")[0],J=w&&w.split(".")[1],G="";if(M!=-1)if(T){if(typeof T=="function"&&(T=T._svgjsListenerId),!T)return;t.listeners[M][V]&&t.listeners[M][V][J||"*"]&&(g.removeEventListener(V,t.listeners[M][V][J||"*"][T],!1),delete t.listeners[M][V][J||"*"][T])}else if(J&&V){if(t.listeners[M][V]&&t.listeners[M][V][J]){for(var oe in t.listeners[M][V][J])t.off(g,[V,J].join("."),oe);delete t.listeners[M][V][J]}}else if(J)for(var re in t.listeners[M])for(var G in t.listeners[M][re])J===G&&t.off(g,[re,J].join("."));else if(V){if(t.listeners[M][V]){for(var G in t.listeners[M][V])t.off(g,[V,G].join("."));delete t.listeners[M][V]}}else{for(var re in t.listeners[M])t.off(g,re);delete t.listeners[M],delete t.handlerMap[M]}},t.extend(t.Element,{on:function(g,w,T,M){return t.on(this.node,g,w,T,M),this},off:function(g,w){return t.off(this.node,g,w),this},fire:function(g,w){return g instanceof _.Event?this.node.dispatchEvent(g):this.node.dispatchEvent(g=new t.CustomEvent(g,{detail:w,cancelable:!0})),this._event=g,this},event:function(){return this._event}}),t.Defs=t.invent({create:"defs",inherit:t.Container}),t.G=t.invent({create:"g",inherit:t.Container,extend:{x:function(g){return g==null?this.transform("x"):this.transform({x:g-this.x()},!0)}},construct:{group:function(){return this.put(new t.G)}}}),t.Doc=t.invent({create:function(g){g&&((g=typeof g=="string"?e.getElementById(g):g).nodeName=="svg"?this.constructor.call(this,g):(this.constructor.call(this,t.create("svg")),g.appendChild(this.node),this.size("100%","100%")),this.namespace().defs())},inherit:t.Container,extend:{namespace:function(){return this.attr({xmlns:t.ns,version:"1.1"}).attr("xmlns:xlink",t.xlink,t.xmlns).attr("xmlns:svgjs",t.svgjs,t.xmlns)},defs:function(){var g;return this._defs||((g=this.node.getElementsByTagName("defs")[0])?this._defs=t.adopt(g):this._defs=new t.Defs,this.node.appendChild(this._defs.node)),this._defs},parent:function(){return this.node.parentNode&&this.node.parentNode.nodeName!="#document"?this.node.parentNode:null},remove:function(){return this.parent()&&this.parent().removeChild(this.node),this},clear:function(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return delete this._defs,t.parser.draw&&!t.parser.draw.parentNode&&this.node.appendChild(t.parser.draw),this},clone:function(g){this.writeDataToDom();var w=this.node,T=C(w.cloneNode(!0));return g?(g.node||g).appendChild(T.node):w.parentNode.insertBefore(T.node,w.nextSibling),T}}}),t.extend(t.Element,{}),t.Gradient=t.invent({create:function(g){this.constructor.call(this,t.create(g+"Gradient")),this.type=g},inherit:t.Container,extend:{at:function(g,w,T){return this.put(new t.Stop).update(g,w,T)},update:function(g){return this.clear(),typeof g=="function"&&g.call(this,this),this},fill:function(){return"url(#"+this.id()+")"},toString:function(){return this.fill()},attr:function(g,w,T){return g=="transform"&&(g="gradientTransform"),t.Container.prototype.attr.call(this,g,w,T)}},construct:{gradient:function(g,w){return this.defs().gradient(g,w)}}}),t.extend(t.Gradient,t.FX,{from:function(g,w){return(this._target||this).type=="radial"?this.attr({fx:new t.Number(g),fy:new t.Number(w)}):this.attr({x1:new t.Number(g),y1:new t.Number(w)})},to:function(g,w){return(this._target||this).type=="radial"?this.attr({cx:new t.Number(g),cy:new t.Number(w)}):this.attr({x2:new t.Number(g),y2:new t.Number(w)})}}),t.extend(t.Defs,{gradient:function(g,w){return this.put(new t.Gradient(g)).update(w)}}),t.Stop=t.invent({create:"stop",inherit:t.Element,extend:{update:function(g){return(typeof g=="number"||g instanceof t.Number)&&(g={offset:arguments[0],color:arguments[1],opacity:arguments[2]}),g.opacity!=null&&this.attr("stop-opacity",g.opacity),g.color!=null&&this.attr("stop-color",g.color),g.offset!=null&&this.attr("offset",new t.Number(g.offset)),this}}}),t.Pattern=t.invent({create:"pattern",inherit:t.Container,extend:{fill:function(){return"url(#"+this.id()+")"},update:function(g){return this.clear(),typeof g=="function"&&g.call(this,this),this},toString:function(){return this.fill()},attr:function(g,w,T){return g=="transform"&&(g="patternTransform"),t.Container.prototype.attr.call(this,g,w,T)}},construct:{pattern:function(g,w,T){return this.defs().pattern(g,w,T)}}}),t.extend(t.Defs,{pattern:function(g,w,T){return this.put(new t.Pattern).update(T).attr({x:0,y:0,width:g,height:w,patternUnits:"userSpaceOnUse"})}}),t.Shape=t.invent({create:function(g){this.constructor.call(this,g)},inherit:t.Element}),t.Symbol=t.invent({create:"symbol",inherit:t.Container,construct:{symbol:function(){return this.put(new t.Symbol)}}}),t.Use=t.invent({create:"use",inherit:t.Shape,extend:{element:function(g,w){return this.attr("href",(w||"")+"#"+g,t.xlink)}},construct:{use:function(g,w){return this.put(new t.Use).element(g,w)}}}),t.Rect=t.invent({create:"rect",inherit:t.Shape,construct:{rect:function(g,w){return this.put(new t.Rect).size(g,w)}}}),t.Circle=t.invent({create:"circle",inherit:t.Shape,construct:{circle:function(g){return this.put(new t.Circle).rx(new t.Number(g).divide(2)).move(0,0)}}}),t.extend(t.Circle,t.FX,{rx:function(g){return this.attr("r",g)},ry:function(g){return this.rx(g)}}),t.Ellipse=t.invent({create:"ellipse",inherit:t.Shape,construct:{ellipse:function(g,w){return this.put(new t.Ellipse).size(g,w).move(0,0)}}}),t.extend(t.Ellipse,t.Rect,t.FX,{rx:function(g){return this.attr("rx",g)},ry:function(g){return this.attr("ry",g)}}),t.extend(t.Circle,t.Ellipse,{x:function(g){return g==null?this.cx()-this.rx():this.cx(g+this.rx())},y:function(g){return g==null?this.cy()-this.ry():this.cy(g+this.ry())},cx:function(g){return g==null?this.attr("cx"):this.attr("cx",g)},cy:function(g){return g==null?this.attr("cy"):this.attr("cy",g)},width:function(g){return g==null?2*this.rx():this.rx(new t.Number(g).divide(2))},height:function(g){return g==null?2*this.ry():this.ry(new t.Number(g).divide(2))},size:function(g,w){var T=y(this,g,w);return this.rx(new t.Number(T.width).divide(2)).ry(new t.Number(T.height).divide(2))}}),t.Line=t.invent({create:"line",inherit:t.Shape,extend:{array:function(){return new t.PointArray([[this.attr("x1"),this.attr("y1")],[this.attr("x2"),this.attr("y2")]])},plot:function(g,w,T,M){return g==null?this.array():(g=w!==void 0?{x1:g,y1:w,x2:T,y2:M}:new t.PointArray(g).toLine(),this.attr(g))},move:function(g,w){return this.attr(this.array().move(g,w).toLine())},size:function(g,w){var T=y(this,g,w);return this.attr(this.array().size(T.width,T.height).toLine())}},construct:{line:function(g,w,T,M){return t.Line.prototype.plot.apply(this.put(new t.Line),g!=null?[g,w,T,M]:[0,0,0,0])}}}),t.Polyline=t.invent({create:"polyline",inherit:t.Shape,construct:{polyline:function(g){return this.put(new t.Polyline).plot(g||new t.PointArray)}}}),t.Polygon=t.invent({create:"polygon",inherit:t.Shape,construct:{polygon:function(g){return this.put(new t.Polygon).plot(g||new t.PointArray)}}}),t.extend(t.Polyline,t.Polygon,{array:function(){return this._array||(this._array=new t.PointArray(this.attr("points")))},plot:function(g){return g==null?this.array():this.clear().attr("points",typeof g=="string"?g:this._array=new t.PointArray(g))},clear:function(){return delete this._array,this},move:function(g,w){return this.attr("points",this.array().move(g,w))},size:function(g,w){var T=y(this,g,w);return this.attr("points",this.array().size(T.width,T.height))}}),t.extend(t.Line,t.Polyline,t.Polygon,{morphArray:t.PointArray,x:function(g){return g==null?this.bbox().x:this.move(g,this.bbox().y)},y:function(g){return g==null?this.bbox().y:this.move(this.bbox().x,g)},width:function(g){var w=this.bbox();return g==null?w.width:this.size(g,w.height)},height:function(g){var w=this.bbox();return g==null?w.height:this.size(w.width,g)}}),t.Path=t.invent({create:"path",inherit:t.Shape,extend:{morphArray:t.PathArray,array:function(){return this._array||(this._array=new t.PathArray(this.attr("d")))},plot:function(g){return g==null?this.array():this.clear().attr("d",typeof g=="string"?g:this._array=new t.PathArray(g))},clear:function(){return delete this._array,this}},construct:{path:function(g){return this.put(new t.Path).plot(g||new t.PathArray)}}}),t.Image=t.invent({create:"image",inherit:t.Shape,extend:{load:function(g){if(!g)return this;var w=this,T=new _.Image;return t.on(T,"load",function(){t.off(T);var M=w.parent(t.Pattern);M!==null&&(w.width()==0&&w.height()==0&&w.size(T.width,T.height),M&&M.width()==0&&M.height()==0&&M.size(w.width(),w.height()),typeof w._loaded=="function"&&w._loaded.call(w,{width:T.width,height:T.height,ratio:T.width/T.height,url:g}))}),t.on(T,"error",function(M){t.off(T),typeof w._error=="function"&&w._error.call(w,M)}),this.attr("href",T.src=this.src=g,t.xlink)},loaded:function(g){return this._loaded=g,this},error:function(g){return this._error=g,this}},construct:{image:function(g,w,T){return this.put(new t.Image).load(g).size(w||0,T||w||0)}}}),t.Text=t.invent({create:function(){this.constructor.call(this,t.create("text")),this.dom.leading=new t.Number(1.3),this._rebuild=!0,this._build=!1,this.attr("font-family",t.defaults.attrs["font-family"])},inherit:t.Shape,extend:{x:function(g){return g==null?this.attr("x"):this.attr("x",g)},text:function(g){if(g===void 0){g="";for(var w=this.node.childNodes,T=0,M=w.length;T<M;++T)T!=0&&w[T].nodeType!=3&&t.adopt(w[T]).dom.newLined==1&&(g+=`
`),g+=w[T].textContent;return g}if(this.clear().build(!0),typeof g=="function")g.call(this,this);else{T=0;for(var V=(g=g.split(`
`)).length;T<V;T++)this.tspan(g[T]).newLine()}return this.build(!1).rebuild()},size:function(g){return this.attr("font-size",g).rebuild()},leading:function(g){return g==null?this.dom.leading:(this.dom.leading=new t.Number(g),this.rebuild())},lines:function(){var g=(this.textPath&&this.textPath()||this).node,w=t.utils.map(t.utils.filterSVGElements(g.childNodes),function(T){return t.adopt(T)});return new t.Set(w)},rebuild:function(g){if(typeof g=="boolean"&&(this._rebuild=g),this._rebuild){var w=this,T=0,M=this.dom.leading*new t.Number(this.attr("font-size"));this.lines().each(function(){this.dom.newLined&&(w.textPath()||this.attr("x",w.attr("x")),this.text()==`
`?T+=M:(this.attr("dy",M+T),T=0))}),this.fire("rebuild")}return this},build:function(g){return this._build=!!g,this},setData:function(g){return this.dom=g,this.dom.leading=new t.Number(g.leading||1.3),this}},construct:{text:function(g){return this.put(new t.Text).text(g)},plain:function(g){return this.put(new t.Text).plain(g)}}}),t.Tspan=t.invent({create:"tspan",inherit:t.Shape,extend:{text:function(g){return g==null?this.node.textContent+(this.dom.newLined?`
`:""):(typeof g=="function"?g.call(this,this):this.plain(g),this)},dx:function(g){return this.attr("dx",g)},dy:function(g){return this.attr("dy",g)},newLine:function(){var g=this.parent(t.Text);return this.dom.newLined=!0,this.dy(g.dom.leading*g.attr("font-size")).attr("x",g.x())}}}),t.extend(t.Text,t.Tspan,{plain:function(g){return this._build===!1&&this.clear(),this.node.appendChild(e.createTextNode(g)),this},tspan:function(g){var w=(this.textPath&&this.textPath()||this).node,T=new t.Tspan;return this._build===!1&&this.clear(),w.appendChild(T.node),T.text(g)},clear:function(){for(var g=(this.textPath&&this.textPath()||this).node;g.hasChildNodes();)g.removeChild(g.lastChild);return this},length:function(){return this.node.getComputedTextLength()}}),t.TextPath=t.invent({create:"textPath",inherit:t.Parent,parent:t.Text,construct:{morphArray:t.PathArray,array:function(){var g=this.track();return g?g.array():null},plot:function(g){var w=this.track(),T=null;return w&&(T=w.plot(g)),g==null?T:this},track:function(){var g=this.textPath();if(g)return g.reference("href")},textPath:function(){if(this.node.firstChild&&this.node.firstChild.nodeName=="textPath")return t.adopt(this.node.firstChild)}}}),t.Nested=t.invent({create:function(){this.constructor.call(this,t.create("svg")),this.style("overflow","visible")},inherit:t.Container,construct:{nested:function(){return this.put(new t.Nested)}}});var c={stroke:["color","width","opacity","linecap","linejoin","miterlimit","dasharray","dashoffset"],fill:["color","opacity","rule"],prefix:function(g,w){return w=="color"?g:g+"-"+w}};function d(g,w,T,M){return T+M.replace(t.regex.dots," .")}function p(g){return g.toLowerCase().replace(/-(.)/g,function(w,T){return T.toUpperCase()})}function x(g){return g.charAt(0).toUpperCase()+g.slice(1)}function m(g){var w=g.toString(16);return w.length==1?"0"+w:w}function y(g,w,T){if(w==null||T==null){var M=g.bbox();w==null?w=M.width/M.height*T:T==null&&(T=M.height/M.width*w)}return{width:w,height:T}}function A(g,w,T){return{x:w*g.a+T*g.c+0,y:w*g.b+T*g.d+0}}function E(g){return{a:g[0],b:g[1],c:g[2],d:g[3],e:g[4],f:g[5]}}function C(g){for(var w=g.childNodes.length-1;w>=0;w--)g.childNodes[w]instanceof _.SVGElement&&C(g.childNodes[w]);return t.adopt(g).id(t.eid(g.nodeName))}function L(g){return g.x==null&&(g.x=0,g.y=0,g.width=0,g.height=0),g.w=g.width,g.h=g.height,g.x2=g.x+g.width,g.y2=g.y+g.height,g.cx=g.x+g.width/2,g.cy=g.y+g.height/2,g}function R(g){return Math.abs(g)>1e-37?g:0}["fill","stroke"].forEach(function(g){var w={};w[g]=function(T){if(T===void 0)return this;if(typeof T=="string"||t.Color.isRgb(T)||T&&typeof T.fill=="function")this.attr(g,T);else for(var M=c[g].length-1;M>=0;M--)T[c[g][M]]!=null&&this.attr(c.prefix(g,c[g][M]),T[c[g][M]]);return this},t.extend(t.Element,t.FX,w)}),t.extend(t.Element,t.FX,{translate:function(g,w){return this.transform({x:g,y:w})},matrix:function(g){return this.attr("transform",new t.Matrix(arguments.length==6?[].slice.call(arguments):g))},opacity:function(g){return this.attr("opacity",g)},dx:function(g){return this.x(new t.Number(g).plus(this instanceof t.FX?0:this.x()),!0)},dy:function(g){return this.y(new t.Number(g).plus(this instanceof t.FX?0:this.y()),!0)}}),t.extend(t.Path,{length:function(){return this.node.getTotalLength()},pointAt:function(g){return this.node.getPointAtLength(g)}}),t.Set=t.invent({create:function(g){Array.isArray(g)?this.members=g:this.clear()},extend:{add:function(){for(var g=[].slice.call(arguments),w=0,T=g.length;w<T;w++)this.members.push(g[w]);return this},remove:function(g){var w=this.index(g);return w>-1&&this.members.splice(w,1),this},each:function(g){for(var w=0,T=this.members.length;w<T;w++)g.apply(this.members[w],[w,this.members]);return this},clear:function(){return this.members=[],this},length:function(){return this.members.length},has:function(g){return this.index(g)>=0},index:function(g){return this.members.indexOf(g)},get:function(g){return this.members[g]},first:function(){return this.get(0)},last:function(){return this.get(this.members.length-1)},valueOf:function(){return this.members}},construct:{set:function(g){return new t.Set(g)}}}),t.FX.Set=t.invent({create:function(g){this.set=g}}),t.Set.inherit=function(){var g=[];for(var w in t.Shape.prototype)typeof t.Shape.prototype[w]=="function"&&typeof t.Set.prototype[w]!="function"&&g.push(w);for(var w in g.forEach(function(M){t.Set.prototype[M]=function(){for(var V=0,J=this.members.length;V<J;V++)this.members[V]&&typeof this.members[V][M]=="function"&&this.members[V][M].apply(this.members[V],arguments);return M=="animate"?this.fx||(this.fx=new t.FX.Set(this)):this}}),g=[],t.FX.prototype)typeof t.FX.prototype[w]=="function"&&typeof t.FX.Set.prototype[w]!="function"&&g.push(w);g.forEach(function(T){t.FX.Set.prototype[T]=function(){for(var M=0,V=this.set.members.length;M<V;M++)this.set.members[M].fx[T].apply(this.set.members[M].fx,arguments);return this}})},t.extend(t.Element,{}),t.extend(t.Element,{remember:function(g,w){if(u(arguments[0])==="object")for(var T in g)this.remember(T,g[T]);else{if(arguments.length==1)return this.memory()[g];this.memory()[g]=w}return this},forget:function(){if(arguments.length==0)this._memory={};else for(var g=arguments.length-1;g>=0;g--)delete this.memory()[arguments[g]];return this},memory:function(){return this._memory||(this._memory={})}}),t.get=function(g){var w=e.getElementById(function(T){var M=(T||"").toString().match(t.regex.reference);if(M)return M[1]}(g)||g);return t.adopt(w)},t.select=function(g,w){return new t.Set(t.utils.map((w||e).querySelectorAll(g),function(T){return t.adopt(T)}))},t.extend(t.Parent,{select:function(g){return t.select(g,this.node)}});var F="abcdef".split("");if(typeof _.CustomEvent!="function"){var D=function(g,w){w=w||{bubbles:!1,cancelable:!1,detail:void 0};var T=e.createEvent("CustomEvent");return T.initCustomEvent(g,w.bubbles,w.cancelable,w.detail),T};D.prototype=_.Event.prototype,t.CustomEvent=D}else t.CustomEvent=_.CustomEvent;return t},u(n)==="object"?i.exports=Wi.document?Br(Wi,Wi.document):function(_){return Br(_,_.document)}:Wi.SVG=Br(Wi,Wi.document),function(){SVG.Filter=SVG.invent({create:"filter",inherit:SVG.Parent,extend:{source:"SourceGraphic",sourceAlpha:"SourceAlpha",background:"BackgroundImage",backgroundAlpha:"BackgroundAlpha",fill:"FillPaint",stroke:"StrokePaint",autoSetIn:!0,put:function(c,d){return this.add(c,d),!c.attr("in")&&this.autoSetIn&&c.attr("in",this.source),c.attr("result")||c.attr("result",c),c},blend:function(c,d,p){return this.put(new SVG.BlendEffect(c,d,p))},colorMatrix:function(c,d){return this.put(new SVG.ColorMatrixEffect(c,d))},convolveMatrix:function(c){return this.put(new SVG.ConvolveMatrixEffect(c))},componentTransfer:function(c){return this.put(new SVG.ComponentTransferEffect(c))},composite:function(c,d,p){return this.put(new SVG.CompositeEffect(c,d,p))},flood:function(c,d){return this.put(new SVG.FloodEffect(c,d))},offset:function(c,d){return this.put(new SVG.OffsetEffect(c,d))},image:function(c){return this.put(new SVG.ImageEffect(c))},merge:function(){var c=[void 0];for(var d in arguments)c.push(arguments[d]);return this.put(new(SVG.MergeEffect.bind.apply(SVG.MergeEffect,c)))},gaussianBlur:function(c,d){return this.put(new SVG.GaussianBlurEffect(c,d))},morphology:function(c,d){return this.put(new SVG.MorphologyEffect(c,d))},diffuseLighting:function(c,d,p){return this.put(new SVG.DiffuseLightingEffect(c,d,p))},displacementMap:function(c,d,p,x,m){return this.put(new SVG.DisplacementMapEffect(c,d,p,x,m))},specularLighting:function(c,d,p,x){return this.put(new SVG.SpecularLightingEffect(c,d,p,x))},tile:function(){return this.put(new SVG.TileEffect)},turbulence:function(c,d,p,x,m){return this.put(new SVG.TurbulenceEffect(c,d,p,x,m))},toString:function(){return"url(#"+this.attr("id")+")"}}}),SVG.extend(SVG.Defs,{filter:function(c){var d=this.put(new SVG.Filter);return typeof c=="function"&&c.call(d,d),d}}),SVG.extend(SVG.Container,{filter:function(c){return this.defs().filter(c)}}),SVG.extend(SVG.Element,SVG.G,SVG.Nested,{filter:function(c){return this.filterer=c instanceof SVG.Element?c:this.doc().filter(c),this.doc()&&this.filterer.doc()!==this.doc()&&this.doc().defs().add(this.filterer),this.attr("filter",this.filterer),this.filterer},unfilter:function(c){return this.filterer&&c===!0&&this.filterer.remove(),delete this.filterer,this.attr("filter",null)}}),SVG.Effect=SVG.invent({create:function(){this.constructor.call(this)},inherit:SVG.Element,extend:{in:function(c){return c==null?this.parent()&&this.parent().select('[result="'+this.attr("in")+'"]').get(0)||this.attr("in"):this.attr("in",c)},result:function(c){return c==null?this.attr("result"):this.attr("result",c)},toString:function(){return this.result()}}}),SVG.ParentEffect=SVG.invent({create:function(){this.constructor.call(this)},inherit:SVG.Parent,extend:{in:function(c){return c==null?this.parent()&&this.parent().select('[result="'+this.attr("in")+'"]').get(0)||this.attr("in"):this.attr("in",c)},result:function(c){return c==null?this.attr("result"):this.attr("result",c)},toString:function(){return this.result()}}});var _={blend:function(c,d){return this.parent()&&this.parent().blend(this,c,d)},colorMatrix:function(c,d){return this.parent()&&this.parent().colorMatrix(c,d).in(this)},convolveMatrix:function(c){return this.parent()&&this.parent().convolveMatrix(c).in(this)},componentTransfer:function(c){return this.parent()&&this.parent().componentTransfer(c).in(this)},composite:function(c,d){return this.parent()&&this.parent().composite(this,c,d)},flood:function(c,d){return this.parent()&&this.parent().flood(c,d)},offset:function(c,d){return this.parent()&&this.parent().offset(c,d).in(this)},image:function(c){return this.parent()&&this.parent().image(c)},merge:function(){return this.parent()&&this.parent().merge.apply(this.parent(),[this].concat(arguments))},gaussianBlur:function(c,d){return this.parent()&&this.parent().gaussianBlur(c,d).in(this)},morphology:function(c,d){return this.parent()&&this.parent().morphology(c,d).in(this)},diffuseLighting:function(c,d,p){return this.parent()&&this.parent().diffuseLighting(c,d,p).in(this)},displacementMap:function(c,d,p,x){return this.parent()&&this.parent().displacementMap(this,c,d,p,x)},specularLighting:function(c,d,p,x){return this.parent()&&this.parent().specularLighting(c,d,p,x).in(this)},tile:function(){return this.parent()&&this.parent().tile().in(this)},turbulence:function(c,d,p,x,m){return this.parent()&&this.parent().turbulence(c,d,p,x,m).in(this)}};SVG.extend(SVG.Effect,_),SVG.extend(SVG.ParentEffect,_),SVG.ChildEffect=SVG.invent({create:function(){this.constructor.call(this)},inherit:SVG.Element,extend:{in:function(c){this.attr("in",c)}}});var e={blend:function(c,d,p){this.attr({in:c,in2:d,mode:p||"normal"})},colorMatrix:function(c,d){c=="matrix"&&(d=a(d)),this.attr({type:c,values:d===void 0?null:d})},convolveMatrix:function(c){c=a(c),this.attr({order:Math.sqrt(c.split(" ").length),kernelMatrix:c})},composite:function(c,d,p){this.attr({in:c,in2:d,operator:p})},flood:function(c,d){this.attr("flood-color",c),d!=null&&this.attr("flood-opacity",d)},offset:function(c,d){this.attr({dx:c,dy:d})},image:function(c){this.attr("href",c,SVG.xlink)},displacementMap:function(c,d,p,x,m){this.attr({in:c,in2:d,scale:p,xChannelSelector:x,yChannelSelector:m})},gaussianBlur:function(c,d){c!=null||d!=null?this.attr("stdDeviation",o(Array.prototype.slice.call(arguments))):this.attr("stdDeviation","0 0")},morphology:function(c,d){this.attr({operator:c,radius:d})},tile:function(){},turbulence:function(c,d,p,x,m){this.attr({numOctaves:d,seed:p,stitchTiles:x,baseFrequency:c,type:m})}},t={merge:function(){var c;if(arguments[0]instanceof SVG.Set){var d=this;arguments[0].each(function(x){this instanceof SVG.MergeNode?d.put(this):(this instanceof SVG.Effect||this instanceof SVG.ParentEffect)&&d.put(new SVG.MergeNode(this))})}else{c=Array.isArray(arguments[0])?arguments[0]:arguments;for(var p=0;p<c.length;p++)c[p]instanceof SVG.MergeNode?this.put(c[p]):this.put(new SVG.MergeNode(c[p]))}},componentTransfer:function(c){if(this.rgb=new SVG.Set,["r","g","b","a"].forEach(function(p){this[p]=new SVG["Func"+p.toUpperCase()]("identity"),this.rgb.add(this[p]),this.node.appendChild(this[p].node)}.bind(this)),c)for(var d in c.rgb&&(["r","g","b"].forEach(function(p){this[p].attr(c.rgb)}.bind(this)),delete c.rgb),c)this[d].attr(c[d])},diffuseLighting:function(c,d,p){this.attr({surfaceScale:c,diffuseConstant:d,kernelUnitLength:p})},specularLighting:function(c,d,p,x){this.attr({surfaceScale:c,diffuseConstant:d,specularExponent:p,kernelUnitLength:x})}},r={distantLight:function(c,d){this.attr({azimuth:c,elevation:d})},pointLight:function(c,d,p){this.attr({x:c,y:d,z:p})},spotLight:function(c,d,p,x,m,y){this.attr({x:c,y:d,z:p,pointsAtX:x,pointsAtY:m,pointsAtZ:y})},mergeNode:function(c){this.attr("in",c)}};function a(c){return Array.isArray(c)&&(c=new SVG.Array(c)),c.toString().replace(/^\s+/,"").replace(/\s+$/,"").replace(/\s+/g," ")}function o(c){if(!Array.isArray(c))return c;for(var d=0,p=c.length,x=[];d<p;d++)x.push(c[d]);return x.join(" ")}function h(){var c=function(){};for(var d in typeof arguments[arguments.length-1]=="function"&&(c=arguments[arguments.length-1],Array.prototype.splice.call(arguments,arguments.length-1,1)),arguments)for(var p in arguments[d])c(arguments[d][p],p,arguments[d])}["r","g","b","a"].forEach(function(c){r["Func"+c.toUpperCase()]=function(d){switch(this.attr("type",d),d){case"table":this.attr("tableValues",arguments[1]);break;case"linear":this.attr("slope",arguments[1]),this.attr("intercept",arguments[2]);break;case"gamma":this.attr("amplitude",arguments[1]),this.attr("exponent",arguments[2]),this.attr("offset",arguments[2])}}}),h(e,function(c,d){var p=d.charAt(0).toUpperCase()+d.slice(1);SVG[p+"Effect"]=SVG.invent({create:function(){this.constructor.call(this,SVG.create("fe"+p)),c.apply(this,arguments),this.result(this.attr("id")+"Out")},inherit:SVG.Effect,extend:{}})}),h(t,function(c,d){var p=d.charAt(0).toUpperCase()+d.slice(1);SVG[p+"Effect"]=SVG.invent({create:function(){this.constructor.call(this,SVG.create("fe"+p)),c.apply(this,arguments),this.result(this.attr("id")+"Out")},inherit:SVG.ParentEffect,extend:{}})}),h(r,function(c,d){var p=d.charAt(0).toUpperCase()+d.slice(1);SVG[p]=SVG.invent({create:function(){this.constructor.call(this,SVG.create("fe"+p)),c.apply(this,arguments)},inherit:SVG.ChildEffect,extend:{}})}),SVG.extend(SVG.MergeEffect,{in:function(c){return c instanceof SVG.MergeNode?this.add(c,0):this.add(new SVG.MergeNode(c),0),this}}),SVG.extend(SVG.CompositeEffect,SVG.BlendEffect,SVG.DisplacementMapEffect,{in2:function(c){return c==null?this.parent()&&this.parent().select('[result="'+this.attr("in2")+'"]').get(0)||this.attr("in2"):this.attr("in2",c)}}),SVG.filter={sepiatone:[.343,.669,.119,0,0,.249,.626,.13,0,0,.172,.334,.111,0,0,0,0,0,1,0]}}.call(void 0),function(){function _(o,h,c,d,p,x,m){for(var y=o.slice(h,c||m),A=d.slice(p,x||m),E=0,C={pos:[0,0],start:[0,0]},L={pos:[0,0],start:[0,0]};y[E]=e.call(C,y[E]),A[E]=e.call(L,A[E]),y[E][0]!=A[E][0]||y[E][0]=="M"||y[E][0]=="A"&&(y[E][4]!=A[E][4]||y[E][5]!=A[E][5])?(Array.prototype.splice.apply(y,[E,1].concat(r.call(C,y[E]))),Array.prototype.splice.apply(A,[E,1].concat(r.call(L,A[E])))):(y[E]=t.call(C,y[E]),A[E]=t.call(L,A[E])),!(++E==y.length&&E==A.length);)E==y.length&&y.push(["C",C.pos[0],C.pos[1],C.pos[0],C.pos[1],C.pos[0],C.pos[1]]),E==A.length&&A.push(["C",L.pos[0],L.pos[1],L.pos[0],L.pos[1],L.pos[0],L.pos[1]]);return{start:y,dest:A}}function e(o){switch(o[0]){case"z":case"Z":o[0]="L",o[1]=this.start[0],o[2]=this.start[1];break;case"H":o[0]="L",o[2]=this.pos[1];break;case"V":o[0]="L",o[2]=o[1],o[1]=this.pos[0];break;case"T":o[0]="Q",o[3]=o[1],o[4]=o[2],o[1]=this.reflection[1],o[2]=this.reflection[0];break;case"S":o[0]="C",o[6]=o[4],o[5]=o[3],o[4]=o[2],o[3]=o[1],o[2]=this.reflection[1],o[1]=this.reflection[0]}return o}function t(o){var h=o.length;return this.pos=[o[h-2],o[h-1]],"SCQT".indexOf(o[0])!=-1&&(this.reflection=[2*this.pos[0]-o[h-4],2*this.pos[1]-o[h-3]]),o}function r(o){var h=[o];switch(o[0]){case"M":return this.pos=this.start=[o[1],o[2]],h;case"L":o[5]=o[3]=o[1],o[6]=o[4]=o[2],o[1]=this.pos[0],o[2]=this.pos[1];break;case"Q":o[6]=o[4],o[5]=o[3],o[4]=1*o[4]/3+2*o[2]/3,o[3]=1*o[3]/3+2*o[1]/3,o[2]=1*this.pos[1]/3+2*o[2]/3,o[1]=1*this.pos[0]/3+2*o[1]/3;break;case"A":o=(h=function(c,d){var p,x,m,y,A,E,C,L,R,F,D,g,w,T,M,V,J,G,oe,re,ge,Pe,et,We,gt,Ct,Gt=Math.abs(d[1]),Ai=Math.abs(d[2]),Vi=d[3]%360,Ef=d[4],ds=d[5],fs=d[6],ps=d[7],Et=new SVG.Point(c),xt=new SVG.Point(fs,ps),Ol=[];if(Gt===0||Ai===0||Et.x===xt.x&&Et.y===xt.y)return[["C",Et.x,Et.y,xt.x,xt.y,xt.x,xt.y]];for(p=new SVG.Point((Et.x-xt.x)/2,(Et.y-xt.y)/2).transform(new SVG.Matrix().rotate(Vi)),(x=p.x*p.x/(Gt*Gt)+p.y*p.y/(Ai*Ai))>1&&(Gt*=x=Math.sqrt(x),Ai*=x),m=new SVG.Matrix().rotate(Vi).scale(1/Gt,1/Ai).rotate(-Vi),Et=Et.transform(m),xt=xt.transform(m),y=[xt.x-Et.x,xt.y-Et.y],E=y[0]*y[0]+y[1]*y[1],A=Math.sqrt(E),y[0]/=A,y[1]/=A,C=E<4?Math.sqrt(1-E/4):0,Ef===ds&&(C*=-1),L=new SVG.Point((xt.x+Et.x)/2+C*-y[1],(xt.y+Et.y)/2+C*y[0]),R=new SVG.Point(Et.x-L.x,Et.y-L.y),F=new SVG.Point(xt.x-L.x,xt.y-L.y),D=Math.acos(R.x/Math.sqrt(R.x*R.x+R.y*R.y)),R.y<0&&(D*=-1),g=Math.acos(F.x/Math.sqrt(F.x*F.x+F.y*F.y)),F.y<0&&(g*=-1),ds&&D>g&&(g+=2*Math.PI),!ds&&D<g&&(g-=2*Math.PI),T=Math.ceil(2*Math.abs(D-g)/Math.PI),V=[],J=D,w=(g-D)/T,M=4*Math.tan(w/4)/3,ge=0;ge<=T;ge++)oe=Math.cos(J),G=Math.sin(J),re=new SVG.Point(L.x+oe,L.y+G),V[ge]=[new SVG.Point(re.x+M*G,re.y-M*oe),re,new SVG.Point(re.x-M*G,re.y+M*oe)],J+=w;for(V[0][0]=V[0][1].clone(),V[V.length-1][2]=V[V.length-1][1].clone(),m=new SVG.Matrix().rotate(Vi).scale(Gt,Ai).rotate(-Vi),ge=0,Pe=V.length;ge<Pe;ge++)V[ge][0]=V[ge][0].transform(m),V[ge][1]=V[ge][1].transform(m),V[ge][2]=V[ge][2].transform(m);for(ge=1,Pe=V.length;ge<Pe;ge++)et=(re=V[ge-1][2]).x,We=re.y,gt=(re=V[ge][0]).x,Ct=re.y,fs=(re=V[ge][1]).x,ps=re.y,Ol.push(["C",et,We,gt,Ct,fs,ps]);return Ol}(this.pos,o))[0]}return o[0]="C",this.pos=[o[5],o[6]],this.reflection=[2*o[5]-o[3],2*o[6]-o[4]],h}function a(o,h){if(h===!1)return!1;for(var c=h,d=o.length;c<d;++c)if(o[c][0]=="M")return c;return!1}SVG.extend(SVG.PathArray,{morph:function(o){for(var h=this.value,c=this.parse(o),d=0,p=0,x=!1,m=!1;d!==!1||p!==!1;){var y;x=a(h,d!==!1&&d+1),m=a(c,p!==!1&&p+1),d===!1&&(d=(y=new SVG.PathArray(A.start).bbox()).height==0||y.width==0?h.push(h[0])-1:h.push(["M",y.x+y.width/2,y.y+y.height/2])-1),p===!1&&(p=(y=new SVG.PathArray(A.dest).bbox()).height==0||y.width==0?c.push(c[0])-1:c.push(["M",y.x+y.width/2,y.y+y.height/2])-1);var A=_(h,d,x,c,p,m);h=h.slice(0,d).concat(A.start,x===!1?[]:h.slice(x)),c=c.slice(0,p).concat(A.dest,m===!1?[]:c.slice(m)),d=x!==!1&&d+A.start.length,p=m!==!1&&p+A.dest.length}return this.value=h,this.destination=new SVG.PathArray,this.destination.value=c,this}})}(),function(){function _(e){e.remember("_draggable",this),this.el=e}_.prototype.init=function(e,t){var r=this;this.constraint=e,this.value=t,this.el.on("mousedown.drag",function(a){r.start(a)}),this.el.on("touchstart.drag",function(a){r.start(a)})},_.prototype.transformPoint=function(e,t){var r=(e=e||window.event).changedTouches&&e.changedTouches[0]||e;return this.p.x=r.clientX-(t||0),this.p.y=r.clientY,this.p.matrixTransform(this.m)},_.prototype.getBBox=function(){var e=this.el.bbox();return this.el instanceof SVG.Nested&&(e=this.el.rbox()),(this.el instanceof SVG.G||this.el instanceof SVG.Use||this.el instanceof SVG.Nested)&&(e.x=this.el.x(),e.y=this.el.y()),e},_.prototype.start=function(e){if(e.type!="click"&&e.type!="mousedown"&&e.type!="mousemove"||(e.which||e.buttons)==1){var t=this;if(this.el.fire("beforedrag",{event:e,handler:this}),!this.el.event().defaultPrevented){e.preventDefault(),e.stopPropagation(),this.parent=this.parent||this.el.parent(SVG.Nested)||this.el.parent(SVG.Doc),this.p=this.parent.node.createSVGPoint(),this.m=this.el.node.getScreenCTM().inverse();var r,a=this.getBBox();if(this.el instanceof SVG.Text)switch(r=this.el.node.getComputedTextLength(),this.el.attr("text-anchor")){case"middle":r/=2;break;case"start":r=0}this.startPoints={point:this.transformPoint(e,r),box:a,transform:this.el.transform()},SVG.on(window,"mousemove.drag",function(o){t.drag(o)}),SVG.on(window,"touchmove.drag",function(o){t.drag(o)}),SVG.on(window,"mouseup.drag",function(o){t.end(o)}),SVG.on(window,"touchend.drag",function(o){t.end(o)}),this.el.fire("dragstart",{event:e,p:this.startPoints.point,m:this.m,handler:this})}}},_.prototype.drag=function(e){var t=this.getBBox(),r=this.transformPoint(e),a=this.startPoints.box.x+r.x-this.startPoints.point.x,o=this.startPoints.box.y+r.y-this.startPoints.point.y,h=this.constraint,c=r.x-this.startPoints.point.x,d=r.y-this.startPoints.point.y;if(this.el.fire("dragmove",{event:e,p:r,m:this.m,handler:this}),this.el.event().defaultPrevented)return r;if(typeof h=="function"){var p=h.call(this.el,a,o,this.m);typeof p=="boolean"&&(p={x:p,y:p}),p.x===!0?this.el.x(a):p.x!==!1&&this.el.x(p.x),p.y===!0?this.el.y(o):p.y!==!1&&this.el.y(p.y)}else typeof h=="object"&&(h.minX!=null&&a<h.minX?c=(a=h.minX)-this.startPoints.box.x:h.maxX!=null&&a>h.maxX-t.width&&(c=(a=h.maxX-t.width)-this.startPoints.box.x),h.minY!=null&&o<h.minY?d=(o=h.minY)-this.startPoints.box.y:h.maxY!=null&&o>h.maxY-t.height&&(d=(o=h.maxY-t.height)-this.startPoints.box.y),h.snapToGrid!=null&&(a-=a%h.snapToGrid,o-=o%h.snapToGrid,c-=c%h.snapToGrid,d-=d%h.snapToGrid),this.el instanceof SVG.G?this.el.matrix(this.startPoints.transform).transform({x:c,y:d},!0):this.el.move(a,o));return r},_.prototype.end=function(e){var t=this.drag(e);this.el.fire("dragend",{event:e,p:t,m:this.m,handler:this}),SVG.off(window,"mousemove.drag"),SVG.off(window,"touchmove.drag"),SVG.off(window,"mouseup.drag"),SVG.off(window,"touchend.drag")},SVG.extend(SVG.Element,{draggable:function(e,t){typeof e!="function"&&typeof e!="object"||(t=e,e=!0);var r=this.remember("_draggable")||new _(this);return(e=e===void 0||e)?r.init(t||{},e):(this.off("mousedown.drag"),this.off("touchstart.drag")),this}})}.call(void 0),function(){function _(e){this.el=e,e.remember("_selectHandler",this),this.pointSelection={isSelected:!1},this.rectSelection={isSelected:!1},this.pointsList={lt:[0,0],rt:["width",0],rb:["width","height"],lb:[0,"height"],t:["width",0],r:["width","height"],b:["width","height"],l:[0,"height"]},this.pointCoord=function(t,r,a){var o=typeof t!="string"?t:r[t];return a?o/2:o},this.pointCoords=function(t,r){var a=this.pointsList[t];return{x:this.pointCoord(a[0],r,t==="t"||t==="b"),y:this.pointCoord(a[1],r,t==="r"||t==="l")}}}_.prototype.init=function(e,t){var r=this.el.bbox();this.options={};var a=this.el.selectize.defaults.points;for(var o in this.el.selectize.defaults)this.options[o]=this.el.selectize.defaults[o],t[o]!==void 0&&(this.options[o]=t[o]);var h=["points","pointsExclude"];for(var o in h){var c=this.options[h[o]];typeof c=="string"?c=c.length>0?c.split(/\s*,\s*/i):[]:typeof c=="boolean"&&h[o]==="points"&&(c=c?a:[]),this.options[h[o]]=c}this.options.points=[a,this.options.points].reduce(function(d,p){return d.filter(function(x){return p.indexOf(x)>-1})}),this.options.points=[this.options.points,this.options.pointsExclude].reduce(function(d,p){return d.filter(function(x){return p.indexOf(x)<0})}),this.parent=this.el.parent(),this.nested=this.nested||this.parent.group(),this.nested.matrix(new SVG.Matrix(this.el).translate(r.x,r.y)),this.options.deepSelect&&["line","polyline","polygon"].indexOf(this.el.type)!==-1?this.selectPoints(e):this.selectRect(e),this.observe(),this.cleanup()},_.prototype.selectPoints=function(e){return this.pointSelection.isSelected=e,this.pointSelection.set||(this.pointSelection.set=this.parent.set(),this.drawPoints()),this},_.prototype.getPointArray=function(){var e=this.el.bbox();return this.el.array().valueOf().map(function(t){return[t[0]-e.x,t[1]-e.y]})},_.prototype.drawPoints=function(){for(var e=this,t=this.getPointArray(),r=0,a=t.length;r<a;++r){var o=function(c){return function(d){(d=d||window.event).preventDefault?d.preventDefault():d.returnValue=!1,d.stopPropagation();var p=d.pageX||d.touches[0].pageX,x=d.pageY||d.touches[0].pageY;e.el.fire("point",{x:p,y:x,i:c,event:d})}}(r),h=this.drawPoint(t[r][0],t[r][1]).addClass(this.options.classPoints).addClass(this.options.classPoints+"_point").on("touchstart",o).on("mousedown",o);this.pointSelection.set.add(h)}},_.prototype.drawPoint=function(e,t){var r=this.options.pointType;switch(r){case"circle":return this.drawCircle(e,t);case"rect":return this.drawRect(e,t);default:if(typeof r=="function")return r.call(this,e,t);throw new Error("Unknown "+r+" point type!")}},_.prototype.drawCircle=function(e,t){return this.nested.circle(this.options.pointSize).center(e,t)},_.prototype.drawRect=function(e,t){return this.nested.rect(this.options.pointSize,this.options.pointSize).center(e,t)},_.prototype.updatePointSelection=function(){var e=this.getPointArray();this.pointSelection.set.each(function(t){this.cx()===e[t][0]&&this.cy()===e[t][1]||this.center(e[t][0],e[t][1])})},_.prototype.updateRectSelection=function(){var e=this,t=this.el.bbox();if(this.rectSelection.set.get(0).attr({width:t.width,height:t.height}),this.options.points.length&&this.options.points.map(function(a,o){var h=e.pointCoords(a,t);e.rectSelection.set.get(o+1).center(h.x,h.y)}),this.options.rotationPoint){var r=this.rectSelection.set.length();this.rectSelection.set.get(r-1).center(t.width/2,20)}},_.prototype.selectRect=function(e){var t=this,r=this.el.bbox();function a(c){return function(d){(d=d||window.event).preventDefault?d.preventDefault():d.returnValue=!1,d.stopPropagation();var p=d.pageX||d.touches[0].pageX,x=d.pageY||d.touches[0].pageY;t.el.fire(c,{x:p,y:x,event:d})}}if(this.rectSelection.isSelected=e,this.rectSelection.set=this.rectSelection.set||this.parent.set(),this.rectSelection.set.get(0)||this.rectSelection.set.add(this.nested.rect(r.width,r.height).addClass(this.options.classRect)),this.options.points.length&&this.rectSelection.set.length()<2&&(this.options.points.map(function(c,d){var p=t.pointCoords(c,r),x=t.drawPoint(p.x,p.y).attr("class",t.options.classPoints+"_"+c).on("mousedown",a(c)).on("touchstart",a(c));t.rectSelection.set.add(x)}),this.rectSelection.set.each(function(){this.addClass(t.options.classPoints)})),this.options.rotationPoint&&(this.options.points&&!this.rectSelection.set.get(9)||!this.options.points&&!this.rectSelection.set.get(1))){var o=function(c){(c=c||window.event).preventDefault?c.preventDefault():c.returnValue=!1,c.stopPropagation();var d=c.pageX||c.touches[0].pageX,p=c.pageY||c.touches[0].pageY;t.el.fire("rot",{x:d,y:p,event:c})},h=this.drawPoint(r.width/2,20).attr("class",this.options.classPoints+"_rot").on("touchstart",o).on("mousedown",o);this.rectSelection.set.add(h)}},_.prototype.handler=function(){var e=this.el.bbox();this.nested.matrix(new SVG.Matrix(this.el).translate(e.x,e.y)),this.rectSelection.isSelected&&this.updateRectSelection(),this.pointSelection.isSelected&&this.updatePointSelection()},_.prototype.observe=function(){var e=this;if(MutationObserver)if(this.rectSelection.isSelected||this.pointSelection.isSelected)this.observerInst=this.observerInst||new MutationObserver(function(){e.handler()}),this.observerInst.observe(this.el.node,{attributes:!0});else try{this.observerInst.disconnect(),delete this.observerInst}catch{}else this.el.off("DOMAttrModified.select"),(this.rectSelection.isSelected||this.pointSelection.isSelected)&&this.el.on("DOMAttrModified.select",function(){e.handler()})},_.prototype.cleanup=function(){!this.rectSelection.isSelected&&this.rectSelection.set&&(this.rectSelection.set.each(function(){this.remove()}),this.rectSelection.set.clear(),delete this.rectSelection.set),!this.pointSelection.isSelected&&this.pointSelection.set&&(this.pointSelection.set.each(function(){this.remove()}),this.pointSelection.set.clear(),delete this.pointSelection.set),this.pointSelection.isSelected||this.rectSelection.isSelected||(this.nested.remove(),delete this.nested)},SVG.extend(SVG.Element,{selectize:function(e,t){return typeof e=="object"&&(t=e,e=!0),(this.remember("_selectHandler")||new _(this)).init(e===void 0||e,t||{}),this}}),SVG.Element.prototype.selectize.defaults={points:["lt","rt","rb","lb","t","r","b","l"],pointsExclude:[],classRect:"svg_select_boundingRect",classPoints:"svg_select_points",pointSize:7,rotationPoint:!0,deepSelect:!1,pointType:"circle"}}(),function(){(function(){function _(e){e.remember("_resizeHandler",this),this.el=e,this.parameters={},this.lastUpdateCall=null,this.p=e.doc().node.createSVGPoint()}_.prototype.transformPoint=function(e,t,r){return this.p.x=e-(this.offset.x-window.pageXOffset),this.p.y=t-(this.offset.y-window.pageYOffset),this.p.matrixTransform(r||this.m)},_.prototype._extractPosition=function(e){return{x:e.clientX!=null?e.clientX:e.touches[0].clientX,y:e.clientY!=null?e.clientY:e.touches[0].clientY}},_.prototype.init=function(e){var t=this;if(this.stop(),e!=="stop"){for(var r in this.options={},this.el.resize.defaults)this.options[r]=this.el.resize.defaults[r],e[r]!==void 0&&(this.options[r]=e[r]);this.el.on("lt.resize",function(a){t.resize(a||window.event)}),this.el.on("rt.resize",function(a){t.resize(a||window.event)}),this.el.on("rb.resize",function(a){t.resize(a||window.event)}),this.el.on("lb.resize",function(a){t.resize(a||window.event)}),this.el.on("t.resize",function(a){t.resize(a||window.event)}),this.el.on("r.resize",function(a){t.resize(a||window.event)}),this.el.on("b.resize",function(a){t.resize(a||window.event)}),this.el.on("l.resize",function(a){t.resize(a||window.event)}),this.el.on("rot.resize",function(a){t.resize(a||window.event)}),this.el.on("point.resize",function(a){t.resize(a||window.event)}),this.update()}},_.prototype.stop=function(){return this.el.off("lt.resize"),this.el.off("rt.resize"),this.el.off("rb.resize"),this.el.off("lb.resize"),this.el.off("t.resize"),this.el.off("r.resize"),this.el.off("b.resize"),this.el.off("l.resize"),this.el.off("rot.resize"),this.el.off("point.resize"),this},_.prototype.resize=function(e){var t=this;this.m=this.el.node.getScreenCTM().inverse(),this.offset={x:window.pageXOffset,y:window.pageYOffset};var r=this._extractPosition(e.detail.event);if(this.parameters={type:this.el.type,p:this.transformPoint(r.x,r.y),x:e.detail.x,y:e.detail.y,box:this.el.bbox(),rotation:this.el.transform().rotation},this.el.type==="text"&&(this.parameters.fontSize=this.el.attr()["font-size"]),e.detail.i!==void 0){var a=this.el.array().valueOf();this.parameters.i=e.detail.i,this.parameters.pointCoords=[a[e.detail.i][0],a[e.detail.i][1]]}switch(e.type){case"lt":this.calc=function(o,h){var c=this.snapToGrid(o,h);if(this.parameters.box.width-c[0]>0&&this.parameters.box.height-c[1]>0){if(this.parameters.type==="text")return this.el.move(this.parameters.box.x+c[0],this.parameters.box.y),void this.el.attr("font-size",this.parameters.fontSize-c[0]);c=this.checkAspectRatio(c),this.el.move(this.parameters.box.x+c[0],this.parameters.box.y+c[1]).size(this.parameters.box.width-c[0],this.parameters.box.height-c[1])}};break;case"rt":this.calc=function(o,h){var c=this.snapToGrid(o,h,2);if(this.parameters.box.width+c[0]>0&&this.parameters.box.height-c[1]>0){if(this.parameters.type==="text")return this.el.move(this.parameters.box.x-c[0],this.parameters.box.y),void this.el.attr("font-size",this.parameters.fontSize+c[0]);c=this.checkAspectRatio(c,!0),this.el.move(this.parameters.box.x,this.parameters.box.y+c[1]).size(this.parameters.box.width+c[0],this.parameters.box.height-c[1])}};break;case"rb":this.calc=function(o,h){var c=this.snapToGrid(o,h,0);if(this.parameters.box.width+c[0]>0&&this.parameters.box.height+c[1]>0){if(this.parameters.type==="text")return this.el.move(this.parameters.box.x-c[0],this.parameters.box.y),void this.el.attr("font-size",this.parameters.fontSize+c[0]);c=this.checkAspectRatio(c),this.el.move(this.parameters.box.x,this.parameters.box.y).size(this.parameters.box.width+c[0],this.parameters.box.height+c[1])}};break;case"lb":this.calc=function(o,h){var c=this.snapToGrid(o,h,1);if(this.parameters.box.width-c[0]>0&&this.parameters.box.height+c[1]>0){if(this.parameters.type==="text")return this.el.move(this.parameters.box.x+c[0],this.parameters.box.y),void this.el.attr("font-size",this.parameters.fontSize-c[0]);c=this.checkAspectRatio(c,!0),this.el.move(this.parameters.box.x+c[0],this.parameters.box.y).size(this.parameters.box.width-c[0],this.parameters.box.height+c[1])}};break;case"t":this.calc=function(o,h){var c=this.snapToGrid(o,h,2);if(this.parameters.box.height-c[1]>0){if(this.parameters.type==="text")return;this.el.move(this.parameters.box.x,this.parameters.box.y+c[1]).height(this.parameters.box.height-c[1])}};break;case"r":this.calc=function(o,h){var c=this.snapToGrid(o,h,0);if(this.parameters.box.width+c[0]>0){if(this.parameters.type==="text")return;this.el.move(this.parameters.box.x,this.parameters.box.y).width(this.parameters.box.width+c[0])}};break;case"b":this.calc=function(o,h){var c=this.snapToGrid(o,h,0);if(this.parameters.box.height+c[1]>0){if(this.parameters.type==="text")return;this.el.move(this.parameters.box.x,this.parameters.box.y).height(this.parameters.box.height+c[1])}};break;case"l":this.calc=function(o,h){var c=this.snapToGrid(o,h,1);if(this.parameters.box.width-c[0]>0){if(this.parameters.type==="text")return;this.el.move(this.parameters.box.x+c[0],this.parameters.box.y).width(this.parameters.box.width-c[0])}};break;case"rot":this.calc=function(o,h){var c=o+this.parameters.p.x,d=h+this.parameters.p.y,p=Math.atan2(this.parameters.p.y-this.parameters.box.y-this.parameters.box.height/2,this.parameters.p.x-this.parameters.box.x-this.parameters.box.width/2),x=Math.atan2(d-this.parameters.box.y-this.parameters.box.height/2,c-this.parameters.box.x-this.parameters.box.width/2),m=this.parameters.rotation+180*(x-p)/Math.PI+this.options.snapToAngle/2;this.el.center(this.parameters.box.cx,this.parameters.box.cy).rotate(m-m%this.options.snapToAngle,this.parameters.box.cx,this.parameters.box.cy)};break;case"point":this.calc=function(o,h){var c=this.snapToGrid(o,h,this.parameters.pointCoords[0],this.parameters.pointCoords[1]),d=this.el.array().valueOf();d[this.parameters.i][0]=this.parameters.pointCoords[0]+c[0],d[this.parameters.i][1]=this.parameters.pointCoords[1]+c[1],this.el.plot(d)}}this.el.fire("resizestart",{dx:this.parameters.x,dy:this.parameters.y,event:e}),SVG.on(window,"touchmove.resize",function(o){t.update(o||window.event)}),SVG.on(window,"touchend.resize",function(){t.done()}),SVG.on(window,"mousemove.resize",function(o){t.update(o||window.event)}),SVG.on(window,"mouseup.resize",function(){t.done()})},_.prototype.update=function(e){if(e){var t=this._extractPosition(e),r=this.transformPoint(t.x,t.y),a=r.x-this.parameters.p.x,o=r.y-this.parameters.p.y;this.lastUpdateCall=[a,o],this.calc(a,o),this.el.fire("resizing",{dx:a,dy:o,event:e})}else this.lastUpdateCall&&this.calc(this.lastUpdateCall[0],this.lastUpdateCall[1])},_.prototype.done=function(){this.lastUpdateCall=null,SVG.off(window,"mousemove.resize"),SVG.off(window,"mouseup.resize"),SVG.off(window,"touchmove.resize"),SVG.off(window,"touchend.resize"),this.el.fire("resizedone")},_.prototype.snapToGrid=function(e,t,r,a){var o;return a!==void 0?o=[(r+e)%this.options.snapToGrid,(a+t)%this.options.snapToGrid]:(r=r==null?3:r,o=[(this.parameters.box.x+e+(1&r?0:this.parameters.box.width))%this.options.snapToGrid,(this.parameters.box.y+t+(2&r?0:this.parameters.box.height))%this.options.snapToGrid]),e<0&&(o[0]-=this.options.snapToGrid),t<0&&(o[1]-=this.options.snapToGrid),e-=Math.abs(o[0])<this.options.snapToGrid/2?o[0]:o[0]-(e<0?-this.options.snapToGrid:this.options.snapToGrid),t-=Math.abs(o[1])<this.options.snapToGrid/2?o[1]:o[1]-(t<0?-this.options.snapToGrid:this.options.snapToGrid),this.constraintToBox(e,t,r,a)},_.prototype.constraintToBox=function(e,t,r,a){var o,h,c=this.options.constraint||{};return a!==void 0?(o=r,h=a):(o=this.parameters.box.x+(1&r?0:this.parameters.box.width),h=this.parameters.box.y+(2&r?0:this.parameters.box.height)),c.minX!==void 0&&o+e<c.minX&&(e=c.minX-o),c.maxX!==void 0&&o+e>c.maxX&&(e=c.maxX-o),c.minY!==void 0&&h+t<c.minY&&(t=c.minY-h),c.maxY!==void 0&&h+t>c.maxY&&(t=c.maxY-h),[e,t]},_.prototype.checkAspectRatio=function(e,t){if(!this.options.saveAspectRatio)return e;var r=e.slice(),a=this.parameters.box.width/this.parameters.box.height,o=this.parameters.box.width+e[0],h=this.parameters.box.height-e[1],c=o/h;return c<a?(r[1]=o/a-this.parameters.box.height,t&&(r[1]=-r[1])):c>a&&(r[0]=this.parameters.box.width-h*a,t&&(r[0]=-r[0])),r},SVG.extend(SVG.Element,{resize:function(e){return(this.remember("_resizeHandler")||new _(this)).init(e||{}),this}}),SVG.Element.prototype.resize.defaults={snapToAngle:.1,snapToGrid:1,constraint:{},saveAspectRatio:!1}}).call(this)}(),window.Apex===void 0&&(window.Apex={});var Il=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"initModules",value:function(){this.ctx.publicMethods=["updateOptions","updateSeries","appendData","appendSeries","toggleSeries","showSeries","hideSeries","setLocale","resetSeries","zoomX","toggleDataPointSelection","dataURI","addXaxisAnnotation","addYaxisAnnotation","addPointAnnotation","clearAnnotations","removeAnnotation","paper","destroy"],this.ctx.eventList=["click","mousedown","mousemove","mouseleave","touchstart","touchmove","touchleave","mouseup","touchend"],this.ctx.animations=new q(this.ctx),this.ctx.axes=new ye(this.ctx),this.ctx.core=new Af(this.ctx.el,this.ctx),this.ctx.config=new Q({}),this.ctx.data=new be(this.ctx),this.ctx.grid=new W(this.ctx),this.ctx.graphics=new X(this.ctx),this.ctx.coreUtils=new Z(this.ctx),this.ctx.crosshairs=new fe(this.ctx),this.ctx.events=new se(this.ctx),this.ctx.exports=new Ie(this.ctx),this.ctx.localization=new xe(this.ctx),this.ctx.options=new ne,this.ctx.responsive=new me(this.ctx),this.ctx.series=new Be(this.ctx),this.ctx.theme=new ce(this.ctx),this.ctx.formatters=new ze(this.ctx),this.ctx.titleSubtitle=new Ee(this.ctx),this.ctx.legend=new Ze(this.ctx),this.ctx.toolbar=new St(this.ctx),this.ctx.dimensions=new qe(this.ctx),this.ctx.updateHelpers=new Sf(this.ctx),this.ctx.zoomPanSelection=new ki(this.ctx),this.ctx.w.globals.tooltip=new xf(this.ctx)}}]),_}(),_l=function(){function _(e){f(this,_),this.ctx=e,this.w=e.w}return b(_,[{key:"clear",value:function(e){var t=e.isUpdating;this.ctx.zoomPanSelection&&this.ctx.zoomPanSelection.destroy(),this.ctx.toolbar&&this.ctx.toolbar.destroy(),this.ctx.animations=null,this.ctx.axes=null,this.ctx.annotations=null,this.ctx.core=null,this.ctx.data=null,this.ctx.grid=null,this.ctx.series=null,this.ctx.responsive=null,this.ctx.theme=null,this.ctx.formatters=null,this.ctx.titleSubtitle=null,this.ctx.legend=null,this.ctx.dimensions=null,this.ctx.options=null,this.ctx.crosshairs=null,this.ctx.zoomPanSelection=null,this.ctx.updateHelpers=null,this.ctx.toolbar=null,this.ctx.localization=null,this.ctx.w.globals.tooltip=null,this.clearDomElements({isUpdating:t})}},{key:"killSVG",value:function(e){e.each(function(t,r){this.removeClass("*"),this.off(),this.stop()},!0),e.ungroup(),e.clear()}},{key:"clearDomElements",value:function(e){var t=this,r=e.isUpdating,a=this.w.globals.dom.Paper.node;a.parentNode&&a.parentNode.parentNode&&!r&&(a.parentNode.parentNode.style.minHeight="unset");var o=this.w.globals.dom.baseEl;o&&this.ctx.eventList.forEach(function(c){o.removeEventListener(c,t.ctx.events.documentEvent)});var h=this.w.globals.dom;if(this.ctx.el!==null)for(;this.ctx.el.firstChild;)this.ctx.el.removeChild(this.ctx.el.firstChild);this.killSVG(h.Paper),h.Paper.remove(),h.elWrap=null,h.elGraphical=null,h.elAnnotations=null,h.elLegendWrap=null,h.baseEl=null,h.elGridRect=null,h.elGridRectMask=null,h.elGridRectMarkerMask=null,h.elForecastMask=null,h.elNonForecastMask=null,h.elDefs=null}}]),_}(),us=new WeakMap,Cf=function(){function _(e,t){f(this,_),this.opts=t,this.ctx=this,this.w=new de(t).init(),this.el=e,this.w.globals.cuid=P.randomId(),this.w.globals.chartID=this.w.config.chart.id?P.escapeString(this.w.config.chart.id):this.w.globals.cuid,new Il(this).initModules(),this.create=P.bind(this.create,this),this.windowResizeHandler=this._windowResizeHandler.bind(this),this.parentResizeHandler=this._parentResizeCallback.bind(this)}return b(_,[{key:"render",value:function(){var e=this;return new Promise(function(t,r){if(e.el!==null){Apex._chartInstances===void 0&&(Apex._chartInstances=[]),e.w.config.chart.id&&Apex._chartInstances.push({id:e.w.globals.chartID,group:e.w.config.chart.group,chart:e}),e.setLocale(e.w.config.chart.defaultLocale);var a=e.w.config.chart.events.beforeMount;if(typeof a=="function"&&a(e,e.w),e.events.fireEvent("beforeMount",[e,e.w]),window.addEventListener("resize",e.windowResizeHandler),function(x,m){var y=!1,A=x.getBoundingClientRect();x.style.display!=="none"&&A.width!==0||(y=!0);var E=new ResizeObserver(function(C){y&&m.call(x,C),y=!0});x.nodeType===Node.DOCUMENT_FRAGMENT_NODE?Array.from(x.children).forEach(function(C){return E.observe(C)}):E.observe(x),us.set(m,E)}(e.el.parentNode,e.parentResizeHandler),!e.css){var o=e.el.getRootNode&&e.el.getRootNode(),h=P.is("ShadowRoot",o),c=e.el.ownerDocument,d=c.getElementById("apexcharts-css");!h&&d||(e.css=document.createElement("style"),e.css.id="apexcharts-css",e.css.textContent=`.apexcharts-canvas {
  position: relative;
  user-select: none;
  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */
}


/* scrollbar is not visible by default for legend, hence forcing the visibility */
.apexcharts-canvas ::-webkit-scrollbar {
  -webkit-appearance: none;
  width: 6px;
}

.apexcharts-canvas ::-webkit-scrollbar-thumb {
  border-radius: 4px;
  background-color: rgba(0, 0, 0, .5);
  box-shadow: 0 0 1px rgba(255, 255, 255, .5);
  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);
}


.apexcharts-inner {
  position: relative;
}

.apexcharts-text tspan {
  font-family: inherit;
}

.legend-mouseover-inactive {
  transition: 0.15s ease all;
  opacity: 0.20;
}

.apexcharts-series-collapsed {
  opacity: 0;
}

.apexcharts-tooltip {
  border-radius: 5px;
  box-shadow: 2px 2px 6px -4px #999;
  cursor: default;
  font-size: 14px;
  left: 62px;
  opacity: 0;
  pointer-events: none;
  position: absolute;
  top: 20px;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  white-space: nowrap;
  z-index: 12;
  transition: 0.15s ease all;
}

.apexcharts-tooltip.apexcharts-active {
  opacity: 1;
  transition: 0.15s ease all;
}

.apexcharts-tooltip.apexcharts-theme-light {
  border: 1px solid #e3e3e3;
  background: rgba(255, 255, 255, 0.96);
}

.apexcharts-tooltip.apexcharts-theme-dark {
  color: #fff;
  background: rgba(30, 30, 30, 0.8);
}

.apexcharts-tooltip * {
  font-family: inherit;
}


.apexcharts-tooltip-title {
  padding: 6px;
  font-size: 15px;
  margin-bottom: 4px;
}

.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {
  background: #ECEFF1;
  border-bottom: 1px solid #ddd;
}

.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {
  background: rgba(0, 0, 0, 0.7);
  border-bottom: 1px solid #333;
}

.apexcharts-tooltip-text-y-value,
.apexcharts-tooltip-text-goals-value,
.apexcharts-tooltip-text-z-value {
  display: inline-block;
  font-weight: 600;
  margin-left: 5px;
}

.apexcharts-tooltip-title:empty,
.apexcharts-tooltip-text-y-label:empty,
.apexcharts-tooltip-text-y-value:empty,
.apexcharts-tooltip-text-goals-label:empty,
.apexcharts-tooltip-text-goals-value:empty,
.apexcharts-tooltip-text-z-value:empty {
  display: none;
}

.apexcharts-tooltip-text-y-value,
.apexcharts-tooltip-text-goals-value,
.apexcharts-tooltip-text-z-value {
  font-weight: 600;
}

.apexcharts-tooltip-text-goals-label, 
.apexcharts-tooltip-text-goals-value {
  padding: 6px 0 5px;
}

.apexcharts-tooltip-goals-group, 
.apexcharts-tooltip-text-goals-label, 
.apexcharts-tooltip-text-goals-value {
  display: flex;
}
.apexcharts-tooltip-text-goals-label:not(:empty),
.apexcharts-tooltip-text-goals-value:not(:empty) {
  margin-top: -6px;
}

.apexcharts-tooltip-marker {
  width: 12px;
  height: 12px;
  position: relative;
  top: 0px;
  margin-right: 10px;
  border-radius: 50%;
}

.apexcharts-tooltip-series-group {
  padding: 0 10px;
  display: none;
  text-align: left;
  justify-content: left;
  align-items: center;
}

.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {
  opacity: 1;
}

.apexcharts-tooltip-series-group.apexcharts-active,
.apexcharts-tooltip-series-group:last-child {
  padding-bottom: 4px;
}

.apexcharts-tooltip-series-group-hidden {
  opacity: 0;
  height: 0;
  line-height: 0;
  padding: 0 !important;
}

.apexcharts-tooltip-y-group {
  padding: 6px 0 5px;
}

.apexcharts-tooltip-box, .apexcharts-custom-tooltip {
  padding: 4px 8px;
}

.apexcharts-tooltip-boxPlot {
  display: flex;
  flex-direction: column-reverse;
}

.apexcharts-tooltip-box>div {
  margin: 4px 0;
}

.apexcharts-tooltip-box span.value {
  font-weight: bold;
}

.apexcharts-tooltip-rangebar {
  padding: 5px 8px;
}

.apexcharts-tooltip-rangebar .category {
  font-weight: 600;
  color: #777;
}

.apexcharts-tooltip-rangebar .series-name {
  font-weight: bold;
  display: block;
  margin-bottom: 5px;
}

.apexcharts-xaxistooltip {
  opacity: 0;
  padding: 9px 10px;
  pointer-events: none;
  color: #373d3f;
  font-size: 13px;
  text-align: center;
  border-radius: 2px;
  position: absolute;
  z-index: 10;
  background: #ECEFF1;
  border: 1px solid #90A4AE;
  transition: 0.15s ease all;
}

.apexcharts-xaxistooltip.apexcharts-theme-dark {
  background: rgba(0, 0, 0, 0.7);
  border: 1px solid rgba(0, 0, 0, 0.5);
  color: #fff;
}

.apexcharts-xaxistooltip:after,
.apexcharts-xaxistooltip:before {
  left: 50%;
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
}

.apexcharts-xaxistooltip:after {
  border-color: rgba(236, 239, 241, 0);
  border-width: 6px;
  margin-left: -6px;
}

.apexcharts-xaxistooltip:before {
  border-color: rgba(144, 164, 174, 0);
  border-width: 7px;
  margin-left: -7px;
}

.apexcharts-xaxistooltip-bottom:after,
.apexcharts-xaxistooltip-bottom:before {
  bottom: 100%;
}

.apexcharts-xaxistooltip-top:after,
.apexcharts-xaxistooltip-top:before {
  top: 100%;
}

.apexcharts-xaxistooltip-bottom:after {
  border-bottom-color: #ECEFF1;
}

.apexcharts-xaxistooltip-bottom:before {
  border-bottom-color: #90A4AE;
}

.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after {
  border-bottom-color: rgba(0, 0, 0, 0.5);
}

.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {
  border-bottom-color: rgba(0, 0, 0, 0.5);
}

.apexcharts-xaxistooltip-top:after {
  border-top-color: #ECEFF1
}

.apexcharts-xaxistooltip-top:before {
  border-top-color: #90A4AE;
}

.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after {
  border-top-color: rgba(0, 0, 0, 0.5);
}

.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {
  border-top-color: rgba(0, 0, 0, 0.5);
}

.apexcharts-xaxistooltip.apexcharts-active {
  opacity: 1;
  transition: 0.15s ease all;
}

.apexcharts-yaxistooltip {
  opacity: 0;
  padding: 4px 10px;
  pointer-events: none;
  color: #373d3f;
  font-size: 13px;
  text-align: center;
  border-radius: 2px;
  position: absolute;
  z-index: 10;
  background: #ECEFF1;
  border: 1px solid #90A4AE;
}

.apexcharts-yaxistooltip.apexcharts-theme-dark {
  background: rgba(0, 0, 0, 0.7);
  border: 1px solid rgba(0, 0, 0, 0.5);
  color: #fff;
}

.apexcharts-yaxistooltip:after,
.apexcharts-yaxistooltip:before {
  top: 50%;
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
}

.apexcharts-yaxistooltip:after {
  border-color: rgba(236, 239, 241, 0);
  border-width: 6px;
  margin-top: -6px;
}

.apexcharts-yaxistooltip:before {
  border-color: rgba(144, 164, 174, 0);
  border-width: 7px;
  margin-top: -7px;
}

.apexcharts-yaxistooltip-left:after,
.apexcharts-yaxistooltip-left:before {
  left: 100%;
}

.apexcharts-yaxistooltip-right:after,
.apexcharts-yaxistooltip-right:before {
  right: 100%;
}

.apexcharts-yaxistooltip-left:after {
  border-left-color: #ECEFF1;
}

.apexcharts-yaxistooltip-left:before {
  border-left-color: #90A4AE;
}

.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after {
  border-left-color: rgba(0, 0, 0, 0.5);
}

.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {
  border-left-color: rgba(0, 0, 0, 0.5);
}

.apexcharts-yaxistooltip-right:after {
  border-right-color: #ECEFF1;
}

.apexcharts-yaxistooltip-right:before {
  border-right-color: #90A4AE;
}

.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after {
  border-right-color: rgba(0, 0, 0, 0.5);
}

.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {
  border-right-color: rgba(0, 0, 0, 0.5);
}

.apexcharts-yaxistooltip.apexcharts-active {
  opacity: 1;
}

.apexcharts-yaxistooltip-hidden {
  display: none;
}

.apexcharts-xcrosshairs,
.apexcharts-ycrosshairs {
  pointer-events: none;
  opacity: 0;
  transition: 0.15s ease all;
}

.apexcharts-xcrosshairs.apexcharts-active,
.apexcharts-ycrosshairs.apexcharts-active {
  opacity: 1;
  transition: 0.15s ease all;
}

.apexcharts-ycrosshairs-hidden {
  opacity: 0;
}

.apexcharts-selection-rect {
  cursor: move;
}

.svg_select_boundingRect, .svg_select_points_rot {
  pointer-events: none;
  opacity: 0;
  visibility: hidden;
}
.apexcharts-selection-rect + g .svg_select_boundingRect,
.apexcharts-selection-rect + g .svg_select_points_rot {
  opacity: 0;
  visibility: hidden;
}

.apexcharts-selection-rect + g .svg_select_points_l,
.apexcharts-selection-rect + g .svg_select_points_r {
  cursor: ew-resize;
  opacity: 1;
  visibility: visible;
}

.svg_select_points {
  fill: #efefef;
  stroke: #333;
  rx: 2;
}

.apexcharts-svg.apexcharts-zoomable.hovering-zoom {
  cursor: crosshair
}

.apexcharts-svg.apexcharts-zoomable.hovering-pan {
  cursor: move
}

.apexcharts-zoom-icon,
.apexcharts-zoomin-icon,
.apexcharts-zoomout-icon,
.apexcharts-reset-icon,
.apexcharts-pan-icon,
.apexcharts-selection-icon,
.apexcharts-menu-icon,
.apexcharts-toolbar-custom-icon {
  cursor: pointer;
  width: 20px;
  height: 20px;
  line-height: 24px;
  color: #6E8192;
  text-align: center;
}

.apexcharts-zoom-icon svg,
.apexcharts-zoomin-icon svg,
.apexcharts-zoomout-icon svg,
.apexcharts-reset-icon svg,
.apexcharts-menu-icon svg {
  fill: #6E8192;
}

.apexcharts-selection-icon svg {
  fill: #444;
  transform: scale(0.76)
}

.apexcharts-theme-dark .apexcharts-zoom-icon svg,
.apexcharts-theme-dark .apexcharts-zoomin-icon svg,
.apexcharts-theme-dark .apexcharts-zoomout-icon svg,
.apexcharts-theme-dark .apexcharts-reset-icon svg,
.apexcharts-theme-dark .apexcharts-pan-icon svg,
.apexcharts-theme-dark .apexcharts-selection-icon svg,
.apexcharts-theme-dark .apexcharts-menu-icon svg,
.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg {
  fill: #f3f4f5;
}

.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg,
.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,
.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg {
  fill: #008FFB;
}

.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,
.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,
.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,
.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg,
.apexcharts-theme-light .apexcharts-reset-icon:hover svg,
.apexcharts-theme-light .apexcharts-menu-icon:hover svg {
  fill: #333;
}

.apexcharts-selection-icon,
.apexcharts-menu-icon {
  position: relative;
}

.apexcharts-reset-icon {
  margin-left: 5px;
}

.apexcharts-zoom-icon,
.apexcharts-reset-icon,
.apexcharts-menu-icon {
  transform: scale(0.85);
}

.apexcharts-zoomin-icon,
.apexcharts-zoomout-icon {
  transform: scale(0.7)
}

.apexcharts-zoomout-icon {
  margin-right: 3px;
}

.apexcharts-pan-icon {
  transform: scale(0.62);
  position: relative;
  left: 1px;
  top: 0px;
}

.apexcharts-pan-icon svg {
  fill: #fff;
  stroke: #6E8192;
  stroke-width: 2;
}

.apexcharts-pan-icon.apexcharts-selected svg {
  stroke: #008FFB;
}

.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {
  stroke: #333;
}

.apexcharts-toolbar {
  position: absolute;
  z-index: 11;
  max-width: 176px;
  text-align: right;
  border-radius: 3px;
  padding: 0px 6px 2px 6px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.apexcharts-menu {
  background: #fff;
  position: absolute;
  top: 100%;
  border: 1px solid #ddd;
  border-radius: 3px;
  padding: 3px;
  right: 10px;
  opacity: 0;
  min-width: 110px;
  transition: 0.15s ease all;
  pointer-events: none;
}

.apexcharts-menu.apexcharts-menu-open {
  opacity: 1;
  pointer-events: all;
  transition: 0.15s ease all;
}

.apexcharts-menu-item {
  padding: 6px 7px;
  font-size: 12px;
  cursor: pointer;
}

.apexcharts-theme-light .apexcharts-menu-item:hover {
  background: #eee;
}

.apexcharts-theme-dark .apexcharts-menu {
  background: rgba(0, 0, 0, 0.7);
  color: #fff;
}

@media screen and (min-width: 768px) {
  .apexcharts-canvas:hover .apexcharts-toolbar {
    opacity: 1;
  }
}

.apexcharts-datalabel.apexcharts-element-hidden {
  opacity: 0;
}

.apexcharts-pie-label,
.apexcharts-datalabels,
.apexcharts-datalabel,
.apexcharts-datalabel-label,
.apexcharts-datalabel-value {
  cursor: default;
  pointer-events: none;
}

.apexcharts-pie-label-delay {
  opacity: 0;
  animation-name: opaque;
  animation-duration: 0.3s;
  animation-fill-mode: forwards;
  animation-timing-function: ease;
}

.apexcharts-canvas .apexcharts-element-hidden {
  opacity: 0;
}

.apexcharts-hide .apexcharts-series-points {
  opacity: 0;
}

.apexcharts-gridline,
.apexcharts-annotation-rect,
.apexcharts-tooltip .apexcharts-marker,
.apexcharts-area-series .apexcharts-area,
.apexcharts-line,
.apexcharts-zoom-rect,
.apexcharts-toolbar svg,
.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,
.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,
.apexcharts-radar-series path,
.apexcharts-radar-series polygon {
  pointer-events: none;
}


/* markers */

.apexcharts-marker {
  transition: 0.15s ease all;
}

@keyframes opaque {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}


/* Resize generated styles */

@keyframes resizeanim {
  from {
    opacity: 0;
  }
  to {
    opacity: 0;
  }
}

.resize-triggers {
  animation: 1ms resizeanim;
  visibility: hidden;
  opacity: 0;
}

.resize-triggers,
.resize-triggers>div,
.contract-trigger:before {
  content: " ";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  overflow: hidden;
}

.resize-triggers>div {
  background: #eee;
  overflow: auto;
}

.contract-trigger:before {
  width: 200%;
  height: 200%;
}`,h?o.prepend(e.css):c.head.appendChild(e.css))}var p=e.create(e.w.config.series,{});if(!p)return t(e);e.mount(p).then(function(){typeof e.w.config.chart.events.mounted=="function"&&e.w.config.chart.events.mounted(e,e.w),e.events.fireEvent("mounted",[e,e.w]),t(p)}).catch(function(x){r(x)})}else r(new Error("Element not found"))})}},{key:"create",value:function(e,t){var r=this.w;new Il(this).initModules();var a=this.w.globals;if(a.noData=!1,a.animationEnded=!1,this.responsive.checkResponsiveConfig(t),r.config.xaxis.convertedCatToNumeric&&new bt(r.config).convertCatToNumericXaxis(r.config,this.ctx),this.el===null||(this.core.setupElements(),r.config.chart.type==="treemap"&&(r.config.grid.show=!1,r.config.yaxis[0].show=!1),a.svgWidth===0))return a.animationEnded=!0,null;var o=Z.checkComboSeries(e);a.comboCharts=o.comboCharts,a.comboBarCount=o.comboBarCount;var h=e.every(function(m){return m.data&&m.data.length===0});(e.length===0||h)&&this.series.handleNoData(),this.events.setupEventHandlers(),this.data.parseData(e),this.theme.init(),new Re(this).setGlobalMarkerSize(),this.formatters.setLabelFormatters(),this.titleSubtitle.draw(),a.noData&&a.collapsedSeries.length!==a.series.length&&!r.config.legend.showForSingleSeries||this.legend.init(),this.series.hasAllSeriesEqualX(),a.axisCharts&&(this.core.coreCalculations(),r.config.xaxis.type!=="category"&&this.formatters.setLabelFormatters(),this.ctx.toolbar.minX=r.globals.minX,this.ctx.toolbar.maxX=r.globals.maxX),this.formatters.heatmapLabelFormatters(),new Z(this).getLargestMarkerSize(),this.dimensions.plotCoords();var c=this.core.xySettings();this.grid.createGridMask();var d=this.core.plotChartType(e,c),p=new Me(this);p.bringForward(),r.config.dataLabels.background.enabled&&p.dataLabelsBackground(),this.core.shiftGraphPosition();var x={plot:{left:r.globals.translateX,top:r.globals.translateY,width:r.globals.gridWidth,height:r.globals.gridHeight}};return{elGraph:d,xyRatios:c,elInner:r.globals.dom.elGraphical,dimensions:x}}},{key:"mount",value:function(){var e=this,t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:null,r=this,a=r.w;return new Promise(function(o,h){if(r.el===null)return h(new Error("Not enough data to display or target element not found"));(t===null||a.globals.allSeriesCollapsed)&&r.series.handleNoData(),a.config.chart.type!=="treemap"&&r.axes.drawAxis(a.config.chart.type,t.xyRatios),r.grid=new W(r);var c=r.grid.drawGrid();r.annotations=new Ae(r),r.annotations.drawImageAnnos(),r.annotations.drawTextAnnos(),a.config.grid.position==="back"&&c&&a.globals.dom.elGraphical.add(c.el);var d=new Le(e.ctx),p=new ae(e.ctx);if(c!==null&&(d.xAxisLabelCorrections(c.xAxisTickWidth),p.setYAxisTextAlignments(),a.config.yaxis.map(function(y,A){a.globals.ignoreYAxisIndexes.indexOf(A)===-1&&p.yAxisTitleRotate(A,y.opposite)})),a.config.annotations.position==="back"&&(a.globals.dom.Paper.add(a.globals.dom.elAnnotations),r.annotations.drawAxesAnnotations()),Array.isArray(t.elGraph))for(var x=0;x<t.elGraph.length;x++)a.globals.dom.elGraphical.add(t.elGraph[x]);else a.globals.dom.elGraphical.add(t.elGraph);if(a.config.grid.position==="front"&&c&&a.globals.dom.elGraphical.add(c.el),a.config.xaxis.crosshairs.position==="front"&&r.crosshairs.drawXCrosshairs(),a.config.yaxis[0].crosshairs.position==="front"&&r.crosshairs.drawYCrosshairs(),a.config.annotations.position==="front"&&(a.globals.dom.Paper.add(a.globals.dom.elAnnotations),r.annotations.drawAxesAnnotations()),!a.globals.noData){if(a.config.tooltip.enabled&&!a.globals.noData&&r.w.globals.tooltip.drawTooltip(t.xyRatios),a.globals.axisCharts&&(a.globals.isXNumeric||a.config.xaxis.convertedCatToNumeric||a.globals.isRangeBar))(a.config.chart.zoom.enabled||a.config.chart.selection&&a.config.chart.selection.enabled||a.config.chart.pan&&a.config.chart.pan.enabled)&&r.zoomPanSelection.init({xyRatios:t.xyRatios});else{var m=a.config.chart.toolbar.tools;["zoom","zoomin","zoomout","selection","pan","reset"].forEach(function(y){m[y]=!1})}a.config.chart.toolbar.show&&!a.globals.allSeriesCollapsed&&r.toolbar.createToolbar()}a.globals.memory.methodsToExec.length>0&&a.globals.memory.methodsToExec.forEach(function(y){y.method(y.params,!1,y.context)}),a.globals.axisCharts||a.globals.noData||r.core.resizeNonAxisCharts(),o(r)})}},{key:"destroy",value:function(){var e,t;window.removeEventListener("resize",this.windowResizeHandler),this.el.parentNode,e=this.parentResizeHandler,(t=us.get(e))&&(t.disconnect(),us.delete(e));var r=this.w.config.chart.id;r&&Apex._chartInstances.forEach(function(a,o){a.id===P.escapeString(r)&&Apex._chartInstances.splice(o,1)}),new _l(this.ctx).clear({isUpdating:!1})}},{key:"updateOptions",value:function(e){var t=this,r=arguments.length>1&&arguments[1]!==void 0&&arguments[1],a=!(arguments.length>2&&arguments[2]!==void 0)||arguments[2],o=!(arguments.length>3&&arguments[3]!==void 0)||arguments[3],h=!(arguments.length>4&&arguments[4]!==void 0)||arguments[4],c=this.w;return c.globals.selection=void 0,e.series&&(this.series.resetSeries(!1,!0,!1),e.series.length&&e.series[0].data&&(e.series=e.series.map(function(d,p){return t.updateHelpers._extendSeries(d,p)})),this.updateHelpers.revertDefaultAxisMinMax()),e.xaxis&&(e=this.updateHelpers.forceXAxisUpdate(e)),e.yaxis&&(e=this.updateHelpers.forceYAxisUpdate(e)),c.globals.collapsedSeriesIndices.length>0&&this.series.clearPreviousPaths(),e.theme&&(e=this.theme.updateThemeOptions(e)),this.updateHelpers._updateOptions(e,r,a,o,h)}},{key:"updateSeries",value:function(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1],r=!(arguments.length>2&&arguments[2]!==void 0)||arguments[2];return this.series.resetSeries(!1),this.updateHelpers.revertDefaultAxisMinMax(),this.updateHelpers._updateSeries(e,t,r)}},{key:"appendSeries",value:function(e){var t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1],r=!(arguments.length>2&&arguments[2]!==void 0)||arguments[2],a=this.w.config.series.slice();return a.push(e),this.series.resetSeries(!1),this.updateHelpers.revertDefaultAxisMinMax(),this.updateHelpers._updateSeries(a,t,r)}},{key:"appendData",value:function(e){var t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1],r=this;r.w.globals.dataChanged=!0,r.series.getPreviousPaths();for(var a=r.w.config.series.slice(),o=0;o<a.length;o++)if(e[o]!==null&&e[o]!==void 0)for(var h=0;h<e[o].data.length;h++)a[o].data.push(e[o].data[h]);return r.w.config.series=a,t&&(r.w.globals.initialSeries=P.clone(r.w.config.series)),this.update()}},{key:"update",value:function(e){var t=this;return new Promise(function(r,a){new _l(t.ctx).clear({isUpdating:!0});var o=t.create(t.w.config.series,e);if(!o)return r(t);t.mount(o).then(function(){typeof t.w.config.chart.events.updated=="function"&&t.w.config.chart.events.updated(t,t.w),t.events.fireEvent("updated",[t,t.w]),t.w.globals.isDirty=!0,r(t)}).catch(function(h){a(h)})})}},{key:"getSyncedCharts",value:function(){var e=this.getGroupedCharts(),t=[this];return e.length&&(t=[],e.forEach(function(r){t.push(r)})),t}},{key:"getGroupedCharts",value:function(){var e=this;return Apex._chartInstances.filter(function(t){if(t.group)return!0}).map(function(t){return e.w.config.chart.group===t.group?t.chart:e})}},{key:"toggleSeries",value:function(e){return this.series.toggleSeries(e)}},{key:"highlightSeriesOnLegendHover",value:function(e,t){return this.series.toggleSeriesOnHover(e,t)}},{key:"showSeries",value:function(e){this.series.showSeries(e)}},{key:"hideSeries",value:function(e){this.series.hideSeries(e)}},{key:"resetSeries",value:function(){var e=!(arguments.length>0&&arguments[0]!==void 0)||arguments[0],t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];this.series.resetSeries(e,t)}},{key:"addEventListener",value:function(e,t){this.events.addEventListener(e,t)}},{key:"removeEventListener",value:function(e,t){this.events.removeEventListener(e,t)}},{key:"addXaxisAnnotation",value:function(e){var t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1],r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:void 0,a=this;r&&(a=r),a.annotations.addXaxisAnnotationExternal(e,t,a)}},{key:"addYaxisAnnotation",value:function(e){var t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1],r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:void 0,a=this;r&&(a=r),a.annotations.addYaxisAnnotationExternal(e,t,a)}},{key:"addPointAnnotation",value:function(e){var t=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1],r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:void 0,a=this;r&&(a=r),a.annotations.addPointAnnotationExternal(e,t,a)}},{key:"clearAnnotations",value:function(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:void 0,t=this;e&&(t=e),t.annotations.clearAnnotations(t)}},{key:"removeAnnotation",value:function(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:void 0,r=this;t&&(r=t),r.annotations.removeAnnotation(r,e)}},{key:"getChartArea",value:function(){return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner")}},{key:"getSeriesTotalXRange",value:function(e,t){return this.coreUtils.getSeriesTotalsXRange(e,t)}},{key:"getHighestValueInSeries",value:function(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,t=new ee(this.ctx);return t.getMinYMaxY(e).highestY}},{key:"getLowestValueInSeries",value:function(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,t=new ee(this.ctx);return t.getMinYMaxY(e).lowestY}},{key:"getSeriesTotal",value:function(){return this.w.globals.seriesTotals}},{key:"toggleDataPointSelection",value:function(e,t){return this.updateHelpers.toggleDataPointSelection(e,t)}},{key:"zoomX",value:function(e,t){this.ctx.toolbar.zoomUpdateOptions(e,t)}},{key:"setLocale",value:function(e){this.localization.setCurrentLocaleValues(e)}},{key:"dataURI",value:function(e){return new Ie(this.ctx).dataURI(e)}},{key:"paper",value:function(){return this.w.globals.dom.Paper}},{key:"_parentResizeCallback",value:function(){this.w.globals.animationEnded&&this.w.config.chart.redrawOnParentResize&&this._windowResize()}},{key:"_windowResize",value:function(){var e=this;clearTimeout(this.w.globals.resizeTimer),this.w.globals.resizeTimer=window.setTimeout(function(){e.w.globals.resized=!0,e.w.globals.dataChanged=!1,e.ctx.update()},150)}},{key:"_windowResizeHandler",value:function(){var e=this.w.config.chart.redrawOnWindowResize;typeof e=="function"&&(e=e()),e&&this._windowResize()}}],[{key:"getChartByID",value:function(e){var t=P.escapeString(e),r=Apex._chartInstances.filter(function(a){return a.id===t})[0];return r&&r.chart}},{key:"initOnLoad",value:function(){for(var e=document.querySelectorAll("[data-apexcharts]"),t=0;t<e.length;t++)new _(e[t],JSON.parse(e[t].getAttribute("data-options"))).render()}},{key:"exec",value:function(e,t){var r=this.getChartByID(e);if(r){r.w.globals.isExecCalled=!0;var a=null;if(r.publicMethods.indexOf(t)!==-1){for(var o=arguments.length,h=new Array(o>2?o-2:0),c=2;c<o;c++)h[c-2]=arguments[c];a=r[t].apply(r,h)}return a}}},{key:"merge",value:function(e,t){return P.extend(e,t)}}]),_}();i.exports=Cf})(_o,_o.exports);(function(i){i.exports=function(n){var s={};function l(u){if(s[u])return s[u].exports;var f=s[u]={i:u,l:!1,exports:{}};return n[u].call(f.exports,f,f.exports,l),f.l=!0,f.exports}return l.m=n,l.c=s,l.d=function(u,f,v){l.o(u,f)||Object.defineProperty(u,f,{enumerable:!0,get:v})},l.r=function(u){typeof Symbol!="undefined"&&Symbol.toStringTag&&Object.defineProperty(u,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(u,"__esModule",{value:!0})},l.t=function(u,f){if(f&1&&(u=l(u)),f&8||f&4&&typeof u=="object"&&u&&u.__esModule)return u;var v=Object.create(null);if(l.r(v),Object.defineProperty(v,"default",{enumerable:!0,value:u}),f&2&&typeof u!="string")for(var b in u)l.d(v,b,function(k){return u[k]}.bind(null,b));return v},l.n=function(u){var f=u&&u.__esModule?function(){return u.default}:function(){return u};return l.d(f,"a",f),f},l.o=function(u,f){return Object.prototype.hasOwnProperty.call(u,f)},l.p="",l(l.s="fb15")}({"8875":function(n,s,l){var u,f,v;(function(b,k){f=[],u=k,v=typeof u=="function"?u.apply(s,f):u,v!==void 0&&(n.exports=v)})(typeof self!="undefined"?self:this,function(){function b(){var k=Object.getOwnPropertyDescriptor(document,"currentScript");if(!k&&"currentScript"in document&&document.currentScript||k&&k.get!==b&&document.currentScript)return document.currentScript;try{throw new Error}catch(H){var S=/.*at [^(]*\((.*):(.+):(.+)\)$/ig,I=/@([^@]*):(\d+):(\d+)\s*$/ig,N=S.exec(H.stack)||I.exec(H.stack),O=N&&N[1]||!1,z=N&&N[2]||!1,j=document.location.href.replace(document.location.hash,""),K,B,Y,P=document.getElementsByTagName("script");O===j&&(K=document.documentElement.outerHTML,B=new RegExp("(?:[^\\n]+?\\n){0,"+(z-2)+"}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*","i"),Y=K.replace(B,"$1").trim());for(var q=0;q<P.length;q++)if(P[q].readyState==="interactive"||P[q].src===O||O===j&&P[q].innerHTML&&P[q].innerHTML.trim()===Y)return P[q];return null}}return b})},"8bbf":function(n,s){n.exports=By},"95e6":function(n,s){n.exports=_o.exports},fb15:function(n,s,l){if(l.r(s),typeof window!="undefined"){var u=window.document.currentScript;{var f=l("8875");u=f(),"currentScript"in document||Object.defineProperty(document,"currentScript",{get:f})}var v=u&&u.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);v&&(l.p=v[1])}var b=l("8bbf"),k=l("95e6"),S=l.n(k);const I=["animationEnd","beforeMount","mounted","updated","click","mouseMove","legendClick","markerClick","selection","dataPointSelection","dataPointMouseEnter","dataPointMouseLeave","beforeZoom","beforeResetZoom","zoomed","scrolled","scrolled"];var O=Object(b.defineComponent)({name:"apexchart",props:{options:{type:Object},type:{type:String},series:{type:Array,required:!0},width:{default:"100%"},height:{default:"auto"}},emits:I,setup(K,{emit:B}){const Y=Object(b.ref)(null),P=Object(b.ref)(null),q=Q=>Q&&typeof Q=="object"&&!Array.isArray(Q)&&Q!=null,H=(Q,ue)=>{typeof Object.assign!="function"&&function(){Object.assign=function(be){if(be==null)throw new TypeError("Cannot convert undefined or null to object");let ze=Object(be);for(let De=1;De<arguments.length;De++){let Ie=arguments[De];if(Ie!=null)for(let Le in Ie)Ie.hasOwnProperty(Le)&&(ze[Le]=Ie[Le])}return ze}}();let de=Object.assign({},Q);return q(Q)&&q(ue)&&Object.keys(ue).forEach(be=>{q(ue[be])?be in Q?de[be]=H(Q[be],ue[be]):Object.assign(de,{[be]:ue[be]}):Object.assign(de,{[be]:ue[be]})}),de},X=async()=>{await Object(b.nextTick)();const Q={chart:{type:K.type||K.options.chart.type||"line",height:K.height,width:K.width,events:{}},series:K.series};I.forEach(de=>{let be=(...ze)=>B(de,...ze);Q.chart.events[de]=be});const ue=H(K.options,Q);return P.value=new S.a(Y.value,ue),P.value.render()},Z=()=>(U(),X()),U=()=>{P.value.destroy()},te=(Q,ue)=>P.value.updateSeries(Q,ue),le=(Q,ue,de,be)=>P.value.updateOptions(Q,ue,de,be),pe=Q=>P.value.toggleSeries(Q),ve=Q=>{P.value.showSeries(Q)},ne=Q=>{P.value.hideSeries(Q)},Ae=(Q,ue)=>P.value.appendSeries(Q,ue),he=()=>{P.value.resetSeries()},Re=(Q,ue)=>{P.value.toggleDataPointSelection(Q,ue)},Fe=Q=>P.value.appendData(Q),Me=(Q,ue)=>P.value.zoomX(Q,ue),Ne=()=>P.value.dataURI(),Be=(Q,ue)=>{P.value.addXaxisAnnotation(Q,ue)},Yt=(Q,ue)=>{P.value.addYaxisAnnotation(Q,ue)},nt=(Q,ue)=>{P.value.addPointAnnotation(Q,ue)},je=(Q,ue)=>{P.value.removeAnnotation(Q,ue)},st=()=>{P.value.clearAnnotations()};Object(b.onBeforeMount)(()=>{window.ApexCharts=S.a}),Object(b.onMounted)(()=>{Y.value=Object(b.getCurrentInstance)().proxy.$el,X()}),Object(b.onBeforeUnmount)(()=>{!P.value||U()});const bt=Object(b.toRefs)(K);return Object(b.watch)(bt.options,()=>{!P.value&&K.options?X():P.value.updateOptions(K.options)}),Object(b.watch)(bt.series,()=>{!P.value&&K.series?X():P.value.updateSeries(K.series)},{deep:!0}),Object(b.watch)(bt.type,()=>{Z()}),Object(b.watch)(bt.width,()=>{Z()}),Object(b.watch)(bt.height,()=>{Z()}),{chart:P,init:X,refresh:Z,destroy:U,updateOptions:le,updateSeries:te,toggleSeries:pe,showSeries:ve,hideSeries:ne,resetSeries:he,zoomX:Me,toggleDataPointSelection:Re,appendData:Fe,appendSeries:Ae,addXaxisAnnotation:Be,addYaxisAnnotation:Yt,addPointAnnotation:nt,removeAnnotation:je,clearAnnotations:st,dataURI:Ne}},render(){return Object(b.h)("div",{class:"vue-apexcharts"})}});const z=K=>{K.component(O.name,O)};O.install=z;var j=O;s.default=j}})})(gf);var _0=Ny(gf.exports);export{yc as $,Og as A,Dg as B,Fg as C,hl as D,Yf as E,pt as F,di as G,en as H,hy as I,ht as J,xl as K,nn as L,mi as M,_t as N,Qy as O,Ht as P,h0 as Q,r0 as R,Lt as S,c0 as T,jy as U,_0 as V,A0 as W,i0 as X,n0 as Y,Zy as Z,bc as _,it as a,gm as a0,fl as a1,fu as a2,e0 as a3,bi as a4,s0 as a5,iy as a6,Ka as a7,tu as a8,Jh as a9,oy as aA,Qu as aB,Ju as aC,Jy as aD,$y as aE,Wp as aF,Vp as aG,eu as aH,C0 as aI,S0 as aJ,sh as aK,Vy as aL,Fs as aM,Ga as aN,Rh as aO,ju as aP,Zh as aa,vi as ab,Cn as ac,mm as ad,l0 as ae,Pt as af,v0 as ag,a0 as ah,Ac as ai,$t as aj,rn as ak,Ky as al,t0 as am,fm as an,qy as ao,Uy as ap,o0 as aq,f0 as ar,Ke as as,ro as at,ah as au,jn as av,Tg as aw,As as ax,um as ay,Gy as az,k0 as b,ll as c,d0 as d,T0 as e,P0 as f,b0 as g,Qx as h,u0 as i,x0 as j,g0 as k,y0 as l,yi as m,Kb as n,Ua as o,I0 as p,E0 as q,Lg as r,p0 as s,Vn as t,w0 as u,m0 as v,Qo as w,Ge as x,cl as y,An as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
