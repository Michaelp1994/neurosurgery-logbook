var Oe=Object.defineProperty,Ve=Object.defineProperties;var Me=Object.getOwnPropertyDescriptors;var ve=Object.getOwnPropertySymbols;var je=Object.prototype.hasOwnProperty,Ne=Object.prototype.propertyIsEnumerable;var me=(e,t,n)=>t in e?Oe(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,E=(e,t)=>{for(var n in t||(t={}))je.call(t,n)&&me(e,n,t[n]);if(ve)for(var n of ve(t))Ne.call(t,n)&&me(e,n,t[n]);return e},V=(e,t)=>Ve(e,Me(t));import{J as u,K as se,N as v,S as Ie,P as j,G as X,L as le,T as De,U as Ke,W as oe,X as Ue,Y as He,O as ce,Z as We,_ as Qe,$ as Y,x as T,a0 as Xe,a1 as Re,a2 as Ye,a3 as M,a4 as Ze,a5 as Ge,a6 as Je,a7 as et,a8 as tt,H as nt,a9 as rt,aa as lt,M as at,ab as ot,R as G}from"./vendor.3fb54e24.js";import{u as ge,a as Ee,b as Fe,c as re,d as ut,e as it}from"./QCard.ba24e7ad.js";const st={size:{type:[Number,String],default:"1em"},color:String};function ct(e){return{cSize:u(()=>e.size in ge?`${ge[e.size]}px`:e.size),classes:u(()=>"q-spinner"+(e.color?` text-${e.color}`:""))}}var Ae=se({name:"QSpinner",props:V(E({},st),{thickness:{type:Number,default:5}}),setup(e){const{cSize:t,classes:n}=ct(e);return()=>v("svg",{class:n.value+" q-spinner-mat",width:t.value,height:t.value,viewBox:"25 25 50 50"},[v("circle",{class:"path",cx:"50",cy:"50",r:"20",fill:"none",stroke:"currentColor","stroke-width":e.thickness,"stroke-miterlimit":"10"})])}});function dt({validate:e,resetValidation:t,requiresQForm:n}){const r=Ie(De,!1);if(r!==!1){const{props:o,proxy:d}=j();Object.assign(d,{validate:e,resetValidation:t}),X(()=>o.disable,s=>{s===!0?(typeof t=="function"&&t(),r.unbindComponent(d)):r.bindComponent(d)}),o.disable!==!0&&r.bindComponent(d),le(()=>{o.disable!==!0&&r.unbindComponent(d)})}else n===!0&&console.error("Parent QForm not found on useFormChild()!")}const he=/^#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/,pe=/^#[0-9a-fA-F]{4}([0-9a-fA-F]{4})?$/,be=/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/,J=/^rgb\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5])\)$/,ee=/^rgba\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),(0|0\.[0-9]+[1-9]|0\.[1-9]+|1)\)$/,ye={date:e=>/^-?[\d]+\/[0-1]\d\/[0-3]\d$/.test(e),time:e=>/^([0-1]?\d|2[0-3]):[0-5]\d$/.test(e),fulltime:e=>/^([0-1]?\d|2[0-3]):[0-5]\d:[0-5]\d$/.test(e),timeOrFulltime:e=>/^([0-1]?\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/.test(e),hexColor:e=>he.test(e),hexaColor:e=>pe.test(e),hexOrHexaColor:e=>be.test(e),rgbColor:e=>J.test(e),rgbaColor:e=>ee.test(e),rgbOrRgbaColor:e=>J.test(e)||ee.test(e),hexOrRgbColor:e=>he.test(e)||J.test(e),hexaOrRgbaColor:e=>pe.test(e)||ee.test(e),anyColor:e=>be.test(e)||J.test(e)||ee.test(e)},ft={};"Boolean Number String Function Array Date RegExp Object".split(" ").forEach(e=>{ft["[object "+e+"]"]=e.toLowerCase()});function vt(e,t=250){let n=!1,r;return function(){return n===!1&&(n=!0,setTimeout(()=>{n=!1},t),r=e.apply(this,arguments)),r}}function ke(e,t,n,r){n.modifiers.stop===!0&&ce(e);const o=n.modifiers.color;let d=n.modifiers.center;d=d===!0||r===!0;const s=document.createElement("span"),g=document.createElement("span"),p=We(e),{left:F,top:y,width:$,height:k}=t.getBoundingClientRect(),l=Math.sqrt($*$+k*k),w=l/2,B=`${($-l)/2}px`,h=d?B:`${p.left-F-w}px`,m=`${(k-l)/2}px`,i=d?m:`${p.top-y-w}px`;g.className="q-ripple__inner",Qe(g,{height:`${l}px`,width:`${l}px`,transform:`translate3d(${h},${i},0) scale3d(.2,.2,1)`,opacity:0}),s.className=`q-ripple${o?" text-"+o:""}`,s.setAttribute("dir","ltr"),s.appendChild(g),t.appendChild(s);const q=()=>{s.remove(),clearTimeout(R)};n.abort.push(q);let R=setTimeout(()=>{g.classList.add("q-ripple__inner--enter"),g.style.transform=`translate3d(${B},${m},0) scale3d(1,1,1)`,g.style.opacity=.2,R=setTimeout(()=>{g.classList.remove("q-ripple__inner--enter"),g.classList.add("q-ripple__inner--leave"),g.style.opacity=0,R=setTimeout(()=>{s.remove(),n.abort.splice(n.abort.indexOf(q),1)},275)},250)},50)}function xe(e,{modifiers:t,value:n,arg:r,instance:o}){const d=Object.assign({},o.$q.config.ripple,t,n);e.modifiers={early:d.early===!0,stop:d.stop===!0,center:d.center===!0,color:d.color||r,keyCodes:[].concat(d.keyCodes||13)}}var mt=Ke({name:"ripple",beforeMount(e,t){const n={enabled:t.value!==!1,modifiers:{},abort:[],start(r){n.enabled===!0&&r.qSkipRipple!==!0&&(n.modifiers.early===!0?["mousedown","touchstart"].includes(r.type)===!0:r.type==="click")&&ke(r,e,n,r.qKeyEvent===!0)},keystart:vt(r=>{n.enabled===!0&&r.qSkipRipple!==!0&&oe(r,n.modifiers.keyCodes)===!0&&r.type===`key${n.modifiers.early===!0?"down":"up"}`&&ke(r,e,n,!0)},300)};xe(n,t),e.__qripple=n,Ue(n,"main",[[e,"mousedown","start","passive"],[e,"touchstart","start","passive"],[e,"click","start","passive"],[e,"keydown","keystart","passive"],[e,"keyup","keystart","passive"]])},updated(e,t){if(t.oldValue!==t.value){const n=e.__qripple;n.enabled=t.value!==!1,n.enabled===!0&&Object(t.value)===t.value&&xe(n,t)}},beforeUnmount(e){const t=e.__qripple;t.abort.forEach(n=>{n()}),He(t,"main"),delete e._qripple}});const Pe={left:"start",center:"center",right:"end",between:"between",around:"around",evenly:"evenly",stretch:"stretch"},gt=Object.keys(Pe),ht={align:{type:String,validator:e=>gt.includes(e)}};function pt(e){return u(()=>{const t=e.align===void 0?e.vertical===!0?"stretch":"left":e.align;return`${e.vertical===!0?"items":"justify"}-${Pe[t]}`})}function Zt(e){if(Object(e.$parent)===e.$parent)return e.$parent;for(e=e.$.parent;Object(e)===e;){if(Object(e.proxy)===e.proxy)return e.proxy;e=e.parent}}function bt(e){return e.appContext.config.globalProperties.$router!==void 0}function qe(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}function Ce(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function yt(e,t){for(const n in t){const r=t[n],o=e[n];if(typeof r=="string"){if(r!==o)return!1}else if(Array.isArray(o)===!1||o.length!==r.length||r.some((d,s)=>d!==o[s]))return!1}return!0}function Se(e,t){return Array.isArray(t)===!0?e.length===t.length&&e.every((n,r)=>n===t[r]):e.length===1&&e[0]===t}function kt(e,t){return Array.isArray(e)===!0?Se(e,t):Array.isArray(t)===!0?Se(t,e):e===t}function xt(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(kt(e[n],t[n])===!1)return!1;return!0}const qt={to:[String,Object],replace:Boolean,exact:Boolean,activeClass:{type:String,default:"q-router-link--active"},exactActiveClass:{type:String,default:"q-router-link--exact-active"},href:String,target:String,disable:Boolean};function Ct(e){const t=j(),{props:n,proxy:r}=t,o=bt(t),d=u(()=>n.disable!==!0&&n.href!==void 0),s=u(()=>o===!0&&n.disable!==!0&&d.value!==!0&&n.to!==void 0&&n.to!==null&&n.to!==""),g=u(()=>{if(s.value===!0)try{return r.$router.resolve(n.to)}catch{}return null}),p=u(()=>g.value!==null),F=u(()=>d.value===!0||p.value===!0),y=u(()=>n.type==="a"||F.value===!0?"a":n.tag||e||"div"),$=u(()=>d.value===!0?{href:n.href,target:n.target}:p.value===!0?{href:g.value.href,target:n.target}:{}),k=u(()=>{if(p.value===!1)return null;const{matched:m}=g.value,{length:i}=m,q=m[i-1];if(q===void 0)return-1;const R=r.$route.matched;if(R.length===0)return-1;const C=R.findIndex(Ce.bind(null,q));if(C>-1)return C;const f=qe(m[i-2]);return i>1&&qe(q)===f&&R[R.length-1].path!==f?R.findIndex(Ce.bind(null,m[i-2])):C}),l=u(()=>p.value===!0&&k.value>-1&&yt(r.$route.params,g.value.params)),w=u(()=>l.value===!0&&k.value===r.$route.matched.length-1&&xt(r.$route.params,g.value.params)),B=u(()=>p.value===!0?w.value===!0?` ${n.exactActiveClass} ${n.activeClass}`:n.exact===!0?"":l.value===!0?` ${n.activeClass}`:"":"");function h(m){return n.disable===!0||m.metaKey||m.altKey||m.ctrlKey||m.shiftKey||m.__qNavigate!==!0&&m.defaultPrevented===!0||m.button!==void 0&&m.button!==0||n.target==="_blank"?!1:(Y(m),r.$router[n.replace===!0?"replace":"push"](n.to).catch(i=>i))}return{hasRouterLink:p,hasHrefLink:d,hasLink:F,linkTag:y,linkRoute:g,linkIsActive:l,linkIsExactActive:w,linkClass:B,linkProps:$,navigateToRouterLink:h}}const _e={none:0,xs:4,sm:8,md:16,lg:24,xl:32},St={xs:8,sm:10,md:14,lg:20,xl:24},_t=["button","submit","reset"],wt=/[^\s]\/[^\s]/,Bt=V(E(E({},Ee),qt),{type:{type:String,default:"button"},label:[Number,String],icon:String,iconRight:String,round:Boolean,outline:Boolean,flat:Boolean,unelevated:Boolean,rounded:Boolean,push:Boolean,glossy:Boolean,size:String,fab:Boolean,fabMini:Boolean,padding:String,color:String,textColor:String,noCaps:Boolean,noWrap:Boolean,dense:Boolean,tabindex:[Number,String],ripple:{type:[Boolean,Object],default:!0},align:V(E({},ht.align),{default:"center"}),stack:Boolean,stretch:Boolean,loading:{type:Boolean,default:null},disable:Boolean});function $t(e){const t=Fe(e,St),n=pt(e),{hasRouterLink:r,hasLink:o,linkTag:d,linkProps:s,navigateToRouterLink:g}=Ct("button"),p=u(()=>{const h=e.fab===!1&&e.fabMini===!1?t.value:{};return e.padding!==void 0?Object.assign({},h,{padding:e.padding.split(/\s+/).map(m=>m in _e?_e[m]+"px":m).join(" "),minWidth:"0",minHeight:"0"}):h}),F=u(()=>e.rounded===!0||e.fab===!0||e.fabMini===!0),y=u(()=>e.disable!==!0&&e.loading!==!0),$=u(()=>y.value===!0?e.tabindex||0:-1),k=u(()=>e.flat===!0?"flat":e.outline===!0?"outline":e.push===!0?"push":e.unelevated===!0?"unelevated":"standard"),l=u(()=>{const h={tabindex:$.value};return o.value===!0?Object.assign(h,s.value):_t.includes(e.type)===!0&&(h.type=e.type),d.value==="a"?(e.disable===!0?h["aria-disabled"]="true":h.href===void 0&&(h.role="button"),r.value!==!0&&wt.test(e.type)===!0&&(h.type=e.type)):e.disable===!0&&(h.disabled="",h["aria-disabled"]="true"),e.loading===!0&&e.percentage!==void 0&&Object.assign(h,{role:"progressbar","aria-valuemin":0,"aria-valuemax":100,"aria-valuenow":e.percentage}),h}),w=u(()=>{let h;return e.color!==void 0?e.flat===!0||e.outline===!0?h=`text-${e.textColor||e.color}`:h=`bg-${e.color} text-${e.textColor||"white"}`:e.textColor&&(h=`text-${e.textColor}`),`q-btn--${k.value} q-btn--${e.round===!0?"round":`rectangle${F.value===!0?" q-btn--rounded":""}`}`+(h!==void 0?" "+h:"")+(y.value===!0?" q-btn--actionable q-focusable q-hoverable":e.disable===!0?" disabled":"")+(e.fab===!0?" q-btn--fab":e.fabMini===!0?" q-btn--fab-mini":"")+(e.noCaps===!0?" q-btn--no-uppercase":"")+(e.dense===!0?" q-btn--dense":"")+(e.stretch===!0?" no-border-radius self-stretch":"")+(e.glossy===!0?" glossy":"")}),B=u(()=>n.value+(e.stack===!0?" column":" row")+(e.noWrap===!0?" no-wrap text-no-wrap":"")+(e.loading===!0?" q-btn__content--hidden":""));return{classes:w,style:p,innerClasses:B,attributes:l,hasRouterLink:r,hasLink:o,linkTag:d,navigateToRouterLink:g,isActionable:y}}const{passiveCapture:z}=Ze;let U=null,H=null,W=null;var Gt=se({name:"QBtn",props:V(E({},Bt),{percentage:Number,darkPercentage:Boolean}),emits:["click","keydown","touchstart","mousedown","keyup"],setup(e,{slots:t,emit:n}){const{proxy:r}=j(),{classes:o,style:d,innerClasses:s,attributes:g,hasRouterLink:p,hasLink:F,linkTag:y,navigateToRouterLink:$,isActionable:k}=$t(e),l=T(null),w=T(null);let B=null,h,m;const i=u(()=>e.label!==void 0&&e.label!==null&&e.label!==""),q=u(()=>e.disable===!0||e.ripple===!1?!1:E({keyCodes:F.value===!0?[13,32]:[13]},e.ripple===!0?{}:e.ripple)),R=u(()=>({center:e.round})),C=u(()=>{const c=Math.max(0,Math.min(100,e.percentage));return c>0?{transition:"transform 0.6s",transform:`translateX(${c-100}%)`}:{}}),f=u(()=>e.loading===!0?{onMousedown:I,onTouchstartPassive:I,onClick:I,onKeydown:I,onKeyup:I}:k.value===!0?{onClick:O,onKeydown:K,onMousedown:P,onTouchstart:x}:{onClick:M}),b=u(()=>E(E({ref:l,class:"q-btn q-btn-item non-selectable no-outline "+o.value,style:d.value},g.value),f.value));function O(c){if(l.value!==null){if(c!==void 0){if(c.defaultPrevented===!0)return;const _=document.activeElement;if(e.type==="submit"&&_!==document.body&&l.value.contains(_)===!1&&_.contains(l.value)===!1){l.value.focus();const a=()=>{document.removeEventListener("keydown",M,!0),document.removeEventListener("keyup",a,z),l.value!==null&&l.value.removeEventListener("blur",a,z)};document.addEventListener("keydown",M,!0),document.addEventListener("keyup",a,z),l.value.addEventListener("blur",a,z)}}if(p.value===!0){const _=()=>{c.__qNavigate=!0,$(c)};n("click",c,_),c.defaultPrevented!==!0&&_()}else n("click",c)}}function K(c){l.value!==null&&(n("keydown",c),oe(c,[13,32])===!0&&H!==l.value&&(H!==null&&N(),c.defaultPrevented!==!0&&(l.value.focus(),H=l.value,l.value.classList.add("q-btn--active"),document.addEventListener("keyup",L,!0),l.value.addEventListener("blur",L,z)),M(c)))}function x(c){l.value!==null&&(n("touchstart",c),c.defaultPrevented!==!0&&(U!==l.value&&(U!==null&&N(),U=l.value,B=c.target,B.addEventListener("touchcancel",L,z),B.addEventListener("touchend",L,z)),h=!0,clearTimeout(m),m=setTimeout(()=>{h=!1},200)))}function P(c){l.value!==null&&(c.qSkipRipple=h===!0,n("mousedown",c),c.defaultPrevented!==!0&&W!==l.value&&(W!==null&&N(),W=l.value,l.value.classList.add("q-btn--active"),document.addEventListener("mouseup",L,z)))}function L(c){if(l.value!==null&&!(c!==void 0&&c.type==="blur"&&document.activeElement===l.value)){if(c!==void 0&&c.type==="keyup"){if(H===l.value&&oe(c,[13,32])===!0){const _=new MouseEvent("click",c);_.qKeyEvent=!0,c.defaultPrevented===!0&&Y(_),c.cancelBubble===!0&&ce(_),l.value.dispatchEvent(_),M(c),c.qKeyEvent=!0}n("keyup",c)}N()}}function N(c){const _=w.value;c!==!0&&(U===l.value||W===l.value)&&_!==null&&_!==document.activeElement&&(_.setAttribute("tabindex",-1),_.focus()),U===l.value&&(B!==null&&(B.removeEventListener("touchcancel",L,z),B.removeEventListener("touchend",L,z)),U=B=null),W===l.value&&(document.removeEventListener("mouseup",L,z),W=null),H===l.value&&(document.removeEventListener("keyup",L,!0),l.value!==null&&l.value.removeEventListener("blur",L,z),H=null),l.value!==null&&l.value.classList.remove("q-btn--active")}function I(c){M(c),c.qSkipRipple=!0}return le(()=>{N(!0)}),Object.assign(r,{click:O}),()=>{let c=[];e.icon!==void 0&&c.push(v(re,{name:e.icon,left:e.stack===!1&&i.value===!0,role:"img","aria-hidden":"true"})),i.value===!0&&c.push(v("span",{class:"block"},[e.label])),c=Xe(t.default,c),e.iconRight!==void 0&&e.round===!1&&c.push(v(re,{name:e.iconRight,right:e.stack===!1&&i.value===!0,role:"img","aria-hidden":"true"}));const _=[v("span",{class:"q-focus-helper",ref:w})];return e.loading===!0&&e.percentage!==void 0&&_.push(v("span",{class:"q-btn__progress absolute-full overflow-hidden"},[v("span",{class:"q-btn__progress-indicator fit block"+(e.darkPercentage===!0?" q-btn__progress--dark":""),style:C.value})])),_.push(v("span",{class:"q-btn__content text-center col items-center q-anchor--skip "+s.value},c)),e.loading!==null&&_.push(v(Re,{name:"q-transition--fade"},()=>e.loading===!0?[v("span",{key:"loading",class:"absolute-full flex flex-center"},t.loading!==void 0?t.loading():[v(Ae)])]:null)),Ye(v(y.value,b.value,_),[[mt,q.value,void 0,R.value]])}}});const Rt=V(E({},Ee),{min:{type:Number,default:0},max:{type:Number,default:100},color:String,centerColor:String,trackColor:String,fontSize:String,thickness:{type:Number,default:.2,validator:e=>e>=0&&e<=1},angle:{type:Number,default:0},showValue:Boolean,reverse:Boolean,instantFeedback:Boolean}),we=["B","KB","MB","GB","TB","PB"];function Jt(e){let t=0;for(;parseInt(e,10)>=1024&&t<we.length-1;)e/=1024,++t;return`${e.toFixed(1)}${we[t]}`}function Et(e,t,n){return n<=t?t:Math.min(n,Math.max(t,e))}function en(e,t,n){if(n<=t)return t;const r=n-t+1;let o=t+(e-t)%r;return o<t&&(o=r+o),o===0?0:o}const ue=50,Le=2*ue,Te=Le*Math.PI,Ft=Math.round(Te*1e3)/1e3;se({name:"QCircularProgress",props:V(E({},Rt),{value:{type:Number,default:0},animationSpeed:{type:[String,Number],default:600},indeterminate:Boolean}),setup(e,{slots:t}){const{proxy:{$q:n}}=j(),r=Fe(e),o=u(()=>{const k=(n.lang.rtl===!0?-1:1)*e.angle;return{transform:e.reverse!==(n.lang.rtl===!0)?`scale3d(-1, 1, 1) rotate3d(0, 0, 1, ${-90-k}deg)`:`rotate3d(0, 0, 1, ${k-90}deg)`}}),d=u(()=>e.instantFeedback!==!0&&e.indeterminate!==!0?{transition:`stroke-dashoffset ${e.animationSpeed}ms ease 0s, stroke ${e.animationSpeed}ms ease`}:""),s=u(()=>Le/(1-e.thickness/2)),g=u(()=>`${s.value/2} ${s.value/2} ${s.value} ${s.value}`),p=u(()=>Et(e.value,e.min,e.max)),F=u(()=>Te*(1-(p.value-e.min)/(e.max-e.min))),y=u(()=>e.thickness/2*s.value);function $({thickness:k,offset:l,color:w,cls:B}){return v("circle",{class:"q-circular-progress__"+B+(w!==void 0?` text-${w}`:""),style:d.value,fill:"transparent",stroke:"currentColor","stroke-width":k,"stroke-dasharray":Ft,"stroke-dashoffset":l,cx:s.value,cy:s.value,r:ue})}return()=>{const k=[];e.centerColor!==void 0&&e.centerColor!=="transparent"&&k.push(v("circle",{class:`q-circular-progress__center text-${e.centerColor}`,fill:"currentColor",r:ue-y.value/2,cx:s.value,cy:s.value})),e.trackColor!==void 0&&e.trackColor!=="transparent"&&k.push($({cls:"track",thickness:y.value,offset:0,color:e.trackColor})),k.push($({cls:"circle",thickness:y.value,offset:F.value,color:e.color}));const l=[v("svg",{class:"q-circular-progress__svg",style:o.value,viewBox:g.value,"aria-hidden":"true"},k)];return e.showValue===!0&&l.push(v("div",{class:"q-circular-progress__text absolute-full row flex-center content-center",style:{fontSize:e.fontSize}},t.default!==void 0?t.default():[v("div",p.value)])),v("div",{class:`q-circular-progress q-circular-progress--${e.indeterminate===!0?"in":""}determinate`,style:r.value,role:"progressbar","aria-valuemin":e.min,"aria-valuemax":e.max,"aria-valuenow":e.indeterminate===!0?void 0:p.value},Ge(t.internal,l))}}});function Q(e,t,n,r){const o=[];return e.forEach(d=>{r(d)===!0?o.push(d):t.push({failedPropValidation:n,file:d})}),o}function te(e){e&&e.dataTransfer&&(e.dataTransfer.dropEffect="copy"),M(e)}const tn={multiple:Boolean,accept:String,capture:String,maxFileSize:[Number,String],maxTotalSize:[Number,String],maxFiles:[Number,String],filter:Function},At=["rejected"];function nn({editable:e,dnd:t,getFileInput:n,addFilesToQueue:r}){const{props:o,emit:d,proxy:s}=j(),g=T(null),p=u(()=>o.accept!==void 0?o.accept.split(",").map(i=>(i=i.trim(),i==="*"?"*/":(i.endsWith("/*")&&(i=i.slice(0,i.length-1)),i.toUpperCase()))):null),F=u(()=>parseInt(o.maxFiles,10)),y=u(()=>parseInt(o.maxTotalSize,10));function $(i){if(e.value)if(i!==Object(i)&&(i={target:null}),i.target!==null&&i.target.matches('input[type="file"]')===!0)i.clientX===0&&i.clientY===0&&ce(i);else{const q=n();q&&q!==i.target&&q.click(i)}}function k(i){e.value&&i&&r(null,i)}function l(i,q,R,C){let f=Array.from(q||i.target.files);const b=[],O=()=>{b.length>0&&d("rejected",b)};if(o.accept!==void 0&&p.value.indexOf("*/")===-1&&(f=Q(f,b,"accept",x=>p.value.some(P=>x.type.toUpperCase().startsWith(P)||x.name.toUpperCase().endsWith(P))),f.length===0))return O();if(o.maxFileSize!==void 0){const x=parseInt(o.maxFileSize,10);if(f=Q(f,b,"max-file-size",P=>P.size<=x),f.length===0)return O()}o.multiple!==!0&&f.length>0&&(f=[f[0]]),f.forEach(x=>{x.__key=x.webkitRelativePath+x.lastModified+x.name+x.size});const K=R.map(x=>x.__key);if(f=Q(f,b,"duplicate",x=>K.includes(x.__key)===!1),f.length===0)return O();if(o.maxTotalSize!==void 0){let x=C===!0?R.reduce((P,L)=>P+L.size,0):0;if(f=Q(f,b,"max-total-size",P=>(x+=P.size,x<=y.value)),f.length===0)return O()}if(typeof o.filter=="function"){const x=o.filter(f);f=Q(f,b,"filter",P=>x.includes(P))}if(o.maxFiles!==void 0){let x=C===!0?R.length:0;if(f=Q(f,b,"max-files",()=>(x++,x<=F.value)),f.length===0)return O()}if(O(),f.length>0)return f}function w(i){te(i),t.value!==!0&&(t.value=!0)}function B(i){M(i),i.relatedTarget!==g.value&&(t.value=!1)}function h(i){te(i);const q=i.dataTransfer.files;q.length>0&&r(null,q),t.value=!1}function m(i){if(t.value===!0)return v("div",{ref:g,class:`q-${i}__dnd absolute-full`,onDragenter:te,onDragover:te,onDragleave:B,onDrop:h})}return Object.assign(s,{pickFiles:$,addFiles:k}),{pickFiles:$,addFiles:k,onDragover:w,processFiles:l,getDndNode:m,maxFilesNumber:F,maxTotalSizeNumber:y}}const Pt=[...At,"start","finish","added","removed"],Lt=()=>!0;function Tt(e){const t={};return e.forEach(n=>{t[n]=Lt}),t}Tt(Pt);let ae,ne=0;const A=new Array(256);for(let e=0;e<256;e++)A[e]=(e+256).toString(16).substr(1);const zt=(()=>{const e=typeof crypto!="undefined"?crypto:typeof window!="undefined"?window.crypto||window.msCrypto:void 0;if(e!==void 0){if(e.randomBytes!==void 0)return e.randomBytes;if(e.getRandomValues!==void 0)return t=>{const n=new Uint8Array(t);return e.getRandomValues(n),n}}return t=>{const n=[];for(let r=t;r>0;r--)n.push(Math.floor(Math.random()*256));return n}})(),Be=4096;function Ot(){(ae===void 0||ne+16>Be)&&(ne=0,ae=zt(Be));const e=Array.prototype.slice.call(ae,ne,ne+=16);return e[6]=e[6]&15|64,e[8]=e[8]&63|128,A[e[0]]+A[e[1]]+A[e[2]]+A[e[3]]+"-"+A[e[4]]+A[e[5]]+"-"+A[e[6]]+A[e[7]]+"-"+A[e[8]]+A[e[9]]+"-"+A[e[10]]+A[e[11]]+A[e[12]]+A[e[13]]+A[e[14]]+A[e[15]]}const Vt=[!0,!1,"ondemand"],Mt={modelValue:{},error:{type:Boolean,default:null},errorMessage:String,noErrorIcon:Boolean,rules:Array,reactiveRules:Boolean,lazyRules:{type:[Boolean,String],validator:e=>Vt.includes(e)}};function jt(e,t){const{props:n,proxy:r}=j(),o=T(!1),d=T(null),s=T(null);dt({validate:w,resetValidation:l});let g=0,p;const F=u(()=>n.rules!==void 0&&n.rules!==null&&n.rules.length>0),y=u(()=>n.disable!==!0&&F.value===!0),$=u(()=>n.error===!0||o.value===!0),k=u(()=>typeof n.errorMessage=="string"&&n.errorMessage.length>0?n.errorMessage:d.value);X(()=>n.modelValue,()=>{B()}),X(()=>n.reactiveRules,m=>{m===!0?p===void 0&&(p=X(()=>n.rules,()=>{B(!0)})):p!==void 0&&(p(),p=void 0)},{immediate:!0}),X(e,m=>{m===!0?s.value===null&&(s.value=!1):s.value===!1&&(s.value=!0,y.value===!0&&n.lazyRules!=="ondemand"&&t.value===!1&&h())});function l(){g++,t.value=!1,s.value=null,o.value=!1,d.value=null,h.cancel()}function w(m=n.modelValue){if(y.value!==!0)return!0;const i=++g;t.value!==!0&&n.lazyRules!==!0&&(s.value=!0);const q=(C,f)=>{o.value!==C&&(o.value=C);const b=f||void 0;d.value!==b&&(d.value=b),t.value=!1},R=[];for(let C=0;C<n.rules.length;C++){const f=n.rules[C];let b;if(typeof f=="function"?b=f(m):typeof f=="string"&&ye[f]!==void 0&&(b=ye[f](m)),b===!1||typeof b=="string")return q(!0,b),!1;b!==!0&&b!==void 0&&R.push(b)}return R.length===0?(q(!1),!0):(t.value=!0,Promise.all(R).then(C=>{if(C===void 0||Array.isArray(C)===!1||C.length===0)return i===g&&q(!1),!0;const f=C.find(b=>b===!1||typeof b=="string");return i===g&&q(f!==void 0,f),f===void 0},C=>(i===g&&(console.error(C),q(!0)),!1)))}function B(m){y.value===!0&&n.lazyRules!=="ondemand"&&(s.value===!0||n.lazyRules!==!0&&m!==!0)&&h()}const h=Je(w,0);return le(()=>{p!==void 0&&p(),h.cancel()}),Object.assign(r,{resetValidation:l,validate:w}),et(r,"hasError",()=>$.value),{isDirtyModel:s,hasRules:F,hasError:$,errorMessage:k,validate:w,resetValidation:l}}const $e=/^on[A-Z]/;function Nt(e,t){const n={listeners:T({}),attributes:T({})};function r(){const o={},d={};for(const s in e)s!=="class"&&s!=="style"&&$e.test(s)===!1&&(o[s]=e[s]);for(const s in t.props)$e.test(s)===!0&&(d[s]=t.props[s]);n.attributes.value=o,n.listeners.value=d}return tt(r),r(),n}let D=[],Z=[];function ze(e){Z=Z.filter(t=>t!==e)}function rn(e){ze(e),Z.push(e)}function ln(e){ze(e),Z.length===0&&D.length>0&&(D[D.length-1](),D=[])}function It(e){Z.length===0?e():D.push(e)}function Dt(e){D=D.filter(t=>t!==e)}function ie(e){return e===void 0?`f_${Ot()}`:e}function Kt(e){return e!=null&&(""+e).length>0}const an=V(E(E({},ut),Mt),{label:String,stackLabel:Boolean,hint:String,hideHint:Boolean,prefix:String,suffix:String,labelColor:String,color:String,bgColor:String,filled:Boolean,outlined:Boolean,borderless:Boolean,standout:[Boolean,String],square:Boolean,loading:Boolean,labelSlot:Boolean,bottomSlots:Boolean,hideBottomSpace:Boolean,rounded:Boolean,dense:Boolean,itemAligned:Boolean,counter:Boolean,clearable:Boolean,clearIcon:String,disable:Boolean,readonly:Boolean,autofocus:Boolean,for:String,maxlength:[Number,String]}),on=["update:modelValue","clear","focus","blur","popup-show","popup-hide"];function un(){const{props:e,attrs:t,proxy:n,vnode:r}=j();return{isDark:it(e,n.$q),editable:u(()=>e.disable!==!0&&e.readonly!==!0),innerLoading:T(!1),focused:T(!1),hasPopupOpen:!1,splitAttrs:Nt(t,r),targetUid:T(ie(e.for)),rootRef:T(null),targetRef:T(null),controlRef:T(null)}}function sn(e){const{props:t,emit:n,slots:r,attrs:o,proxy:d}=j(),{$q:s}=d;let g;e.hasValue===void 0&&(e.hasValue=u(()=>Kt(t.modelValue))),e.emitValue===void 0&&(e.emitValue=a=>{n("update:modelValue",a)}),e.controlEvents===void 0&&(e.controlEvents={onFocusin:K,onFocusout:x}),Object.assign(e,{clearValue:P,onControlFocusin:K,onControlFocusout:x,focus:b}),e.computedCounter===void 0&&(e.computedCounter=u(()=>{if(t.counter!==!1){const a=typeof t.modelValue=="string"||typeof t.modelValue=="number"?(""+t.modelValue).length:Array.isArray(t.modelValue)===!0?t.modelValue.length:0,S=t.maxlength!==void 0?t.maxlength:t.maxValues;return a+(S!==void 0?" / "+S:"")}}));const{isDirtyModel:p,hasRules:F,hasError:y,errorMessage:$,resetValidation:k}=jt(e.focused,e.innerLoading),l=e.floatingLabel!==void 0?u(()=>t.stackLabel===!0||e.focused.value===!0||e.floatingLabel.value===!0):u(()=>t.stackLabel===!0||e.focused.value===!0||e.hasValue.value===!0),w=u(()=>t.bottomSlots===!0||t.hint!==void 0||F.value===!0||t.counter===!0||t.error!==null),B=u(()=>t.filled===!0?"filled":t.outlined===!0?"outlined":t.borderless===!0?"borderless":t.standout?"standout":"standard"),h=u(()=>`q-field row no-wrap items-start q-field--${B.value}`+(e.fieldClass!==void 0?` ${e.fieldClass.value}`:"")+(t.rounded===!0?" q-field--rounded":"")+(t.square===!0?" q-field--square":"")+(l.value===!0?" q-field--float":"")+(i.value===!0?" q-field--labeled":"")+(t.dense===!0?" q-field--dense":"")+(t.itemAligned===!0?" q-field--item-aligned q-item-type":"")+(e.isDark.value===!0?" q-field--dark":"")+(e.getControl===void 0?" q-field--auto-height":"")+(e.focused.value===!0?" q-field--focused":"")+(y.value===!0?" q-field--error":"")+(y.value===!0||e.focused.value===!0?" q-field--highlighted":"")+(t.hideBottomSpace!==!0&&w.value===!0?" q-field--with-bottom":"")+(t.disable===!0?" q-field--disabled":t.readonly===!0?" q-field--readonly":"")),m=u(()=>"q-field__control relative-position row no-wrap"+(t.bgColor!==void 0?` bg-${t.bgColor}`:"")+(y.value===!0?" text-negative":typeof t.standout=="string"&&t.standout.length>0&&e.focused.value===!0?` ${t.standout}`:t.color!==void 0?` text-${t.color}`:"")),i=u(()=>t.labelSlot===!0||t.label!==void 0),q=u(()=>"q-field__label no-pointer-events absolute ellipsis"+(t.labelColor!==void 0&&y.value!==!0?` text-${t.labelColor}`:"")),R=u(()=>({id:e.targetUid.value,editable:e.editable.value,focused:e.focused.value,floatingLabel:l.value,modelValue:t.modelValue,emitValue:e.emitValue})),C=u(()=>{const a={for:e.targetUid.value};return t.disable===!0?a["aria-disabled"]="true":t.readonly===!0&&(a["aria-readonly"]="true"),a});X(()=>t.for,a=>{e.targetUid.value=ie(a)});function f(){const a=document.activeElement;let S=e.targetRef!==void 0&&e.targetRef.value;S&&(a===null||a.id!==e.targetUid.value)&&(S.hasAttribute("tabindex")===!0||(S=S.querySelector("[tabindex]")),S&&S!==a&&S.focus({preventScroll:!0}))}function b(){It(f)}function O(){Dt(f);const a=document.activeElement;a!==null&&e.rootRef.value.contains(a)&&a.blur()}function K(a){clearTimeout(g),e.editable.value===!0&&e.focused.value===!1&&(e.focused.value=!0,n("focus",a))}function x(a,S){clearTimeout(g),g=setTimeout(()=>{document.hasFocus()===!0&&(e.hasPopupOpen===!0||e.controlRef===void 0||e.controlRef.value===null||e.controlRef.value.contains(document.activeElement)!==!1)||(e.focused.value===!0&&(e.focused.value=!1,n("blur",a)),S!==void 0&&S())})}function P(a){M(a),s.platform.is.mobile!==!0?(e.targetRef!==void 0&&e.targetRef.value||e.rootRef.value).focus():e.rootRef.value.contains(document.activeElement)===!0&&document.activeElement.blur(),t.type==="file"&&(e.inputRef.value.value=null),n("update:modelValue",null),n("clear",t.modelValue),nt(()=>{k(),s.platform.is.mobile!==!0&&(p.value=!1)})}function L(){const a=[];return r.prepend!==void 0&&a.push(v("div",{class:"q-field__prepend q-field__marginal row no-wrap items-center",key:"prepend",onClick:Y},r.prepend())),a.push(v("div",{class:"q-field__control-container col relative-position row no-wrap q-anchor--skip"},N())),y.value===!0&&t.noErrorIcon===!1&&a.push(c("error",[v(re,{name:s.iconSet.field.error,color:"negative"})])),t.loading===!0||e.innerLoading.value===!0?a.push(c("inner-loading-append",r.loading!==void 0?r.loading():[v(Ae,{color:t.color})])):t.clearable===!0&&e.hasValue.value===!0&&e.editable.value===!0&&a.push(c("inner-clearable-append",[v(re,{class:"q-field__focusable-action",tag:"button",name:t.clearIcon||s.iconSet.field.clear,tabindex:0,type:"button","aria-hidden":null,role:null,onClick:P})])),r.append!==void 0&&a.push(v("div",{class:"q-field__append q-field__marginal row no-wrap items-center",key:"append",onClick:Y},r.append())),e.getInnerAppend!==void 0&&a.push(c("inner-append",e.getInnerAppend())),e.getControlChild!==void 0&&a.push(e.getControlChild()),a}function N(){const a=[];return t.prefix!==void 0&&t.prefix!==null&&a.push(v("div",{class:"q-field__prefix no-pointer-events row items-center"},t.prefix)),e.getShadowControl!==void 0&&e.hasShadow.value===!0&&a.push(e.getShadowControl()),e.getControl!==void 0?a.push(e.getControl()):r.rawControl!==void 0?a.push(r.rawControl()):r.control!==void 0&&a.push(v("div",V(E({ref:e.targetRef,class:"q-field__native row"},e.splitAttrs.attributes.value),{"data-autofocus":t.autofocus===!0||void 0}),r.control(R.value))),i.value===!0&&a.push(v("div",{class:q.value},G(r.label,t.label))),t.suffix!==void 0&&t.suffix!==null&&a.push(v("div",{class:"q-field__suffix no-pointer-events row items-center"},t.suffix)),a.concat(G(r.default))}function I(){let a,S;y.value===!0?$.value!==null?(a=[v("div",{role:"alert"},$.value)],S=`q--slot-error-${$.value}`):(a=G(r.error),S="q--slot-error"):(t.hideHint!==!0||e.focused.value===!0)&&(t.hint!==void 0?(a=[v("div",t.hint)],S=`q--slot-hint-${t.hint}`):(a=G(r.hint),S="q--slot-hint"));const de=t.counter===!0||r.counter!==void 0;if(t.hideBottomSpace===!0&&de===!1&&a===void 0)return;const fe=v("div",{key:S,class:"q-field__messages col"},a);return v("div",{class:"q-field__bottom row items-start q-field__bottom--"+(t.hideBottomSpace!==!0?"animated":"stale")},[t.hideBottomSpace===!0?fe:v(Re,{name:"q-transition--field-message"},()=>fe),de===!0?v("div",{class:"q-field__counter"},r.counter!==void 0?r.counter():e.computedCounter.value):null])}function c(a,S){return S===null?null:v("div",{key:a,class:"q-field__append q-field__marginal row no-wrap items-center q-anchor--skip"},S)}Object.assign(d,{focus:b,blur:O});let _=!1;return rt(()=>{_=!0}),lt(()=>{_===!0&&t.autofocus===!0&&d.focus()}),at(()=>{ot.value===!0&&t.for===void 0&&(e.targetUid.value=ie()),t.autofocus===!0&&d.focus()}),le(()=>{clearTimeout(g)}),function(){const S=e.getControl===void 0&&r.control===void 0?E(V(E({},e.splitAttrs.attributes.value),{"data-autofocus":t.autofocus}),C.value):C.value;return v("label",E({ref:e.rootRef,class:[h.value,o.class],style:o.style},S),[r.before!==void 0?v("div",{class:"q-field__before q-field__marginal row no-wrap items-center",onClick:Y},r.before()):null,v("div",{class:"q-field__inner relative-position col self-stretch"},[v("div",E({ref:e.controlRef,class:m.value,tabindex:-1},e.controlEvents),L()),w.value===!0?I():null]),r.after!==void 0?v("div",{class:"q-field__after q-field__marginal row no-wrap items-center",onClick:Y},r.after()):null])}}const cn={name:String};function dn(e={}){return(t,n,r)=>{t[n](v("input",E({class:"hidden"+(r||"")},e.value)))}}function fn(e){return u(()=>e.name||e.for)}const Ut=/[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/,Ht=/[\u4e00-\u9fff\u3400-\u4dbf\u{20000}-\u{2a6df}\u{2a700}-\u{2b73f}\u{2b740}-\u{2b81f}\u{2b820}-\u{2ceaf}\uf900-\ufaff\u3300-\u33ff\ufe30-\ufe4f\uf900-\ufaff\u{2f800}-\u{2fa1f}]/u,Wt=/[\u3131-\u314e\u314f-\u3163\uac00-\ud7a3]/;function vn(e){return function(n){if(n.type==="compositionend"||n.type==="change"){if(n.target.composing!==!0)return;n.target.composing=!1,e(n)}else n.type==="compositionupdate"?typeof n.data=="string"&&Ut.test(n.data)===!1&&Ht.test(n.data)===!1&&Wt.test(n.data)===!1&&(n.target.composing=!1):n.target.composing=!0}}export{Gt as Q,mt as R,cn as a,on as b,fn as c,un as d,sn as e,Kt as f,It as g,vn as h,ht as i,pt as j,Et as k,qt as l,Ct as m,Zt as n,rn as o,en as p,dn as q,ln as r,tn as s,At as t,an as u,bt as v,nn as w,Jt as x,Ot as y};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
