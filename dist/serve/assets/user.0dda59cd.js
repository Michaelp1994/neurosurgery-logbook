var st=Object.defineProperty,ct=Object.defineProperties;var vt=Object.getOwnPropertyDescriptors;var Te=Object.getOwnPropertySymbols;var dt=Object.prototype.hasOwnProperty,ft=Object.prototype.propertyIsEnumerable;var Qe=(e,l,s)=>l in e?st(e,l,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[l]=s,Q=(e,l)=>{for(var s in l||(l={}))dt.call(l,s)&&Qe(e,s,l[s]);if(Te)for(var s of Te(l))ft.call(l,s)&&Qe(e,s,l[s]);return e},X=(e,l)=>ct(e,vt(l));import{Q as ht}from"./QPageContainer.bb186673.js";import{Q as $e,k as R,R as mt}from"./use-key-composition.9a07a52d.js";import{Q as bt,a as yt}from"./QToolbar.cab69cd0.js";import{Q as ee,a as De}from"./QItemSection.dc8b2532.js";import{Q as Ue}from"./QList.dc10b5ea.js";import{Q as pt,d as Ie,e as Xe,c as gt}from"./QCard.ba24e7ad.js";import{Q as zt,c as St,u as _t}from"./QMenu.bdb281bc.js";import{Q as wt}from"./QInput.c5c599b2.js";import{Q as Ct}from"./QSpace.990ed13a.js";import{K as Ce,S as Ye,ad as Ke,x as S,J as v,G as _,L as ke,ah as kt,N as M,ai as _e,P as qe,t as Me,v as qt,o as L,c as Y,w as q,a as C,z as U,A as Be,B as Ge,F as xe,C as ie,D as K,E as ue,U as Mt,aj as Z,ak as Bt,al as xt,X as ne,am as ye,$ as Ve,O as pe,Z as we,Y as ge,a3 as Ot,a6 as Pt,a9 as Tt,aa as Qt,a0 as $t,an as Dt,a2 as se,ao as Ae,ap as Le,M as Vt,H as He,aq as Ee,R as At,ar as Lt,as as Ht,r as Et}from"./vendor.3fb54e24.js";import{h as Ft,u as Je}from"./index.c67102f5.js";import{u as Rt,a as Nt}from"./use-prevent-scroll.44e6db56.js";import{u as jt,a as Wt,b as Ut}from"./use-model-toggle.a87aeb12.js";var It=Ce({name:"QHeader",props:{modelValue:{type:Boolean,default:!0},reveal:Boolean,revealOffset:{type:Number,default:250},bordered:Boolean,elevated:Boolean,heightHint:{type:[String,Number],default:50}},emits:["reveal","focusin"],setup(e,{slots:l,emit:s}){const{proxy:{$q:b}}=qe(),t=Ye(Ke,()=>{console.error("QHeader needs to be child of QLayout")}),o=S(parseInt(e.heightHint,10)),n=S(!0),a=v(()=>e.reveal===!0||t.view.value.indexOf("H")>-1||b.platform.is.ios&&t.isContainer.value===!0),p=v(()=>{if(e.modelValue!==!0)return 0;if(a.value===!0)return n.value===!0?o.value:0;const f=o.value-t.scroll.value.position;return f>0?f:0}),r=v(()=>e.modelValue!==!0||a.value===!0&&n.value!==!0),B=v(()=>e.modelValue===!0&&r.value===!0&&e.reveal===!0),k=v(()=>"q-header q-layout__section--marginal "+(a.value===!0?"fixed":"absolute")+"-top"+(e.bordered===!0?" q-header--bordered":"")+(r.value===!0?" q-header--hidden":"")+(e.modelValue!==!0?" q-layout--prevent-focus":"")),z=v(()=>{const f=t.rows.value.top,x={};return f[0]==="l"&&t.left.space===!0&&(x[b.lang.rtl===!0?"right":"left"]=`${t.left.size}px`),f[2]==="r"&&t.right.space===!0&&(x[b.lang.rtl===!0?"left":"right"]=`${t.right.size}px`),x});function c(f,x){t.update("header",f,x)}function g(f,x){f.value!==x&&(f.value=x)}function w({height:f}){g(o,f),c("size",f)}function y(f){B.value===!0&&g(n,!0),s("focusin",f)}_(()=>e.modelValue,f=>{c("space",f),g(n,!0),t.animate()}),_(p,f=>{c("offset",f)}),_(()=>e.reveal,f=>{f===!1&&g(n,e.modelValue)}),_(n,f=>{t.animate(),s("reveal",f)}),_(t.scroll,f=>{e.reveal===!0&&g(n,f.direction==="up"||f.position<=e.revealOffset||f.position-f.inflectionPoint<100)});const $={};return t.instances.header=$,e.modelValue===!0&&c("size",o.value),c("space",e.modelValue),c("offset",p.value),ke(()=>{t.instances.header===$&&(t.instances.header=void 0,c("size",0),c("offset",0),c("space",!1))}),()=>{const f=kt(l.default,[]);return e.elevated===!0&&f.push(M("div",{class:"q-layout__shadow absolute-full overflow-hidden no-pointer-events"})),f.push(M(_e,{debounce:0,onResize:w})),M("header",{class:k.value,style:z.value,onFocusin:y},f)}}});function Xt(e){return Ft({variables:{input:{search:e}},pause:v(()=>!e.value||e.value.trim().length<3)})}const Yt=K(" Logbook "),Kt=K("Please enter a Name or URN."),Gt=K(" Loading..."),Jt=Me({setup(e){const l=S(""),s=S(!1),{data:b,error:t,fetching:o}=Xt(l),n=Je(),{logout:a,toggleDrawer:p}=n,r=qt();async function B(z){r.push({name:"viewConsult",params:{id:z}}),l.value=""}async function k(){a(),r.push({name:"login"})}return(z,c)=>(L(),Y(It,{class:"bg-primary text-white"},{default:q(()=>[C(yt,null,{default:q(()=>[C($e,{flat:"",round:"",icon:"menu",class:"",onClick:U(p)},null,8,["onClick"]),C(bt,{shrink:"",class:"mobile-hide"},{default:q(()=>[Yt]),_:1}),C(wt,{modelValue:l.value,"onUpdate:modelValue":c[1]||(c[1]=g=>l.value=g),dark:"",dense:"",debounce:"500",standout:"",clearable:"",placeholder:"Search...",class:"q-pl-lg col-8 col-md-4",onFocus:c[2]||(c[2]=g=>s.value=!0)},{default:q(()=>[C(zt,{modelValue:s.value,"onUpdate:modelValue":c[0]||(c[0]=g=>s.value=g),"no-focus":"",fit:"","auto-close":"","no-parent-event":"",offset:[0,5],"max-height":"300px"},{default:q(()=>[C(pt,null,{default:q(()=>[C(Ue,null,{default:q(()=>{var g,w;return[l.value&&!U(o)?(L(!0),Be(xe,{key:0},Ge((g=U(b))==null?void 0:g.search,y=>(L(),Y(ee,{key:y.id,clickable:"",onClick:$=>B(y.id)},{default:q(()=>[K(ue(y.name)+" ("+ue(y.urn)+") ",1)]),_:2},1032,["onClick"]))),128)):ie("",!0),l.value?ie("",!0):(L(),Y(ee,{key:1},{default:q(()=>[Kt]),_:1})),l.value&&U(o)?(L(),Y(ee,{key:2},{default:q(()=>[Gt]),_:1})):ie("",!0),l.value&&!U(o)&&((w=U(b))==null?void 0:w.search.length)===0?(L(),Y(ee,{key:3},{default:q(()=>[K('No Results for "'+ue(l.value)+'"',1)]),_:1})):ie("",!0)]}),_:1})]),_:1})]),_:1},8,["modelValue"])]),_:1},8,["modelValue"]),C(Ct),C($e,{icon:"logout",flat:"",stretch:"",onClick:k})]),_:1})]),_:1}))}}),Oe={left:!0,right:!0,up:!0,down:!0,horizontal:!0,vertical:!0},Zt=Object.keys(Oe);Oe.all=!0;function Fe(e){const l={};for(const s of Zt)e[s]===!0&&(l[s]=!0);return Object.keys(l).length===0?Oe:(l.horizontal===!0?l.left=l.right=!0:l.left===!0&&l.right===!0&&(l.horizontal=!0),l.vertical===!0?l.up=l.down=!0:l.up===!0&&l.down===!0&&(l.vertical=!0),l.horizontal===!0&&l.vertical===!0&&(l.all=!0),l)}function Re(e,l){return l.event===void 0&&e.target!==void 0&&e.target.draggable!==!0&&typeof l.handler=="function"&&e.target.nodeName.toUpperCase()!=="INPUT"&&(e.qClonedBy===void 0||e.qClonedBy.indexOf(l.uid)===-1)}function ze(e,l,s){const b=we(e);let t,o=b.left-l.event.x,n=b.top-l.event.y,a=Math.abs(o),p=Math.abs(n);const r=l.direction;r.horizontal===!0&&r.vertical!==!0?t=o<0?"left":"right":r.horizontal!==!0&&r.vertical===!0?t=n<0?"up":"down":r.up===!0&&n<0?(t="up",a>p&&(r.left===!0&&o<0?t="left":r.right===!0&&o>0&&(t="right"))):r.down===!0&&n>0?(t="down",a>p&&(r.left===!0&&o<0?t="left":r.right===!0&&o>0&&(t="right"))):r.left===!0&&o<0?(t="left",a<p&&(r.up===!0&&n<0?t="up":r.down===!0&&n>0&&(t="down"))):r.right===!0&&o>0&&(t="right",a<p&&(r.up===!0&&n<0?t="up":r.down===!0&&n>0&&(t="down")));let B=!1;if(t===void 0&&s===!1){if(l.event.isFirst===!0||l.event.lastDir===void 0)return{};t=l.event.lastDir,B=!0,t==="left"||t==="right"?(b.left-=o,a=0,o=0):(b.top-=n,p=0,n=0)}return{synthetic:B,payload:{evt:e,touch:l.event.mouse!==!0,mouse:l.event.mouse===!0,position:b,direction:t,isFirst:l.event.isFirst,isFinal:s===!0,duration:Date.now()-l.event.time,distance:{x:a,y:p},offset:{x:o,y:n},delta:{x:b.left-l.event.lastX,y:b.top-l.event.lastY}}}}let ea=0;var te=Mt({name:"touch-pan",beforeMount(e,{value:l,modifiers:s}){if(s.mouse!==!0&&Z.has.touch!==!0)return;function b(o,n){s.mouse===!0&&n===!0?Ot(o):(s.stop===!0&&pe(o),s.prevent===!0&&Ve(o))}const t={uid:"qvtp_"+ea++,handler:l,modifiers:s,direction:Fe(s),noop:Bt,mouseStart(o){Re(o,t)&&xt(o)&&(ne(t,"temp",[[document,"mousemove","move","notPassiveCapture"],[document,"mouseup","end","passiveCapture"]]),t.start(o,!0))},touchStart(o){if(Re(o,t)){const n=o.target;ne(t,"temp",[[n,"touchmove","move","notPassiveCapture"],[n,"touchcancel","end","passiveCapture"],[n,"touchend","end","passiveCapture"]]),t.start(o)}},start(o,n){if(Z.is.firefox===!0&&ye(e,!0),t.lastEvt=o,n===!0||s.stop===!0){if(t.direction.all!==!0&&(n!==!0||t.modifiers.mouseAllDir!==!0)){const r=o.type.indexOf("mouse")>-1?new MouseEvent(o.type,o):new TouchEvent(o.type,o);o.defaultPrevented===!0&&Ve(r),o.cancelBubble===!0&&pe(r),Object.assign(r,{qKeyEvent:o.qKeyEvent,qClickOutside:o.qClickOutside,qAnchorHandled:o.qAnchorHandled,qClonedBy:o.qClonedBy===void 0?[t.uid]:o.qClonedBy.concat(t.uid)}),t.initialEvent={target:o.target,event:r}}pe(o)}const{left:a,top:p}=we(o);t.event={x:a,y:p,time:Date.now(),mouse:n===!0,detected:!1,isFirst:!0,isFinal:!1,lastX:a,lastY:p}},move(o){if(t.event===void 0)return;const n=we(o),a=n.left-t.event.x,p=n.top-t.event.y;if(a===0&&p===0)return;t.lastEvt=o;const r=t.event.mouse===!0,B=()=>{b(o,r),s.preserveCursor!==!0&&(document.documentElement.style.cursor="grabbing"),r===!0&&document.body.classList.add("no-pointer-events--children"),document.body.classList.add("non-selectable"),St(),t.styleCleanup=c=>{if(t.styleCleanup=void 0,s.preserveCursor!==!0&&(document.documentElement.style.cursor=""),document.body.classList.remove("non-selectable"),r===!0){const g=()=>{document.body.classList.remove("no-pointer-events--children")};c!==void 0?setTimeout(()=>{g(),c()},50):g()}else c!==void 0&&c()}};if(t.event.detected===!0){t.event.isFirst!==!0&&b(o,t.event.mouse);const{payload:c,synthetic:g}=ze(o,t,!1);c!==void 0&&(t.handler(c)===!1?t.end(o):(t.styleCleanup===void 0&&t.event.isFirst===!0&&B(),t.event.lastX=c.position.left,t.event.lastY=c.position.top,t.event.lastDir=g===!0?void 0:c.direction,t.event.isFirst=!1));return}if(t.direction.all===!0||r===!0&&t.modifiers.mouseAllDir===!0){B(),t.event.detected=!0,t.move(o);return}const k=Math.abs(a),z=Math.abs(p);k!==z&&(t.direction.horizontal===!0&&k>z||t.direction.vertical===!0&&k<z||t.direction.up===!0&&k<z&&p<0||t.direction.down===!0&&k<z&&p>0||t.direction.left===!0&&k>z&&a<0||t.direction.right===!0&&k>z&&a>0?(t.event.detected=!0,t.move(o)):t.end(o,!0))},end(o,n){if(t.event!==void 0){if(ge(t,"temp"),Z.is.firefox===!0&&ye(e,!1),n===!0)t.styleCleanup!==void 0&&t.styleCleanup(),t.event.detected!==!0&&t.initialEvent!==void 0&&t.initialEvent.target.dispatchEvent(t.initialEvent.event);else if(t.event.detected===!0){t.event.isFirst===!0&&t.handler(ze(o===void 0?t.lastEvt:o,t).payload);const{payload:a}=ze(o===void 0?t.lastEvt:o,t,!0),p=()=>{t.handler(a)};t.styleCleanup!==void 0?t.styleCleanup(p):p()}t.event=void 0,t.initialEvent=void 0,t.lastEvt=void 0}}};e.__qtouchpan=t,s.mouse===!0&&ne(t,"main",[[e,"mousedown","mouseStart",`passive${s.mouseCapture===!0?"Capture":""}`]]),Z.has.touch===!0&&ne(t,"main",[[e,"touchstart","touchStart",`passive${s.capture===!0?"Capture":""}`],[e,"touchmove","noop","notPassiveCapture"]])},updated(e,l){const s=e.__qtouchpan;s!==void 0&&(l.oldValue!==l.value&&(typeof value!="function"&&s.end(),s.handler=l.value),s.direction=Fe(l.modifiers))},beforeUnmount(e){const l=e.__qtouchpan;l!==void 0&&(l.event!==void 0&&l.end(),ge(l,"main"),ge(l,"temp"),Z.is.firefox===!0&&ye(e,!1),l.styleCleanup!==void 0&&l.styleCleanup(),delete e.__qtouchpan)}});const Ne=["vertical","horizontal"],Se={vertical:{offset:"offsetY",scroll:"scrollTop",dir:"down",dist:"y"},horizontal:{offset:"offsetX",scroll:"scrollLeft",dir:"right",dist:"x"}},je={prevent:!0,mouse:!0,mouseAllDir:!0};var ta=Ce({name:"QScrollArea",props:X(Q({},Ie),{thumbStyle:Object,verticalThumbStyle:Object,horizontalThumbStyle:Object,barStyle:[Array,String,Object],verticalBarStyle:[Array,String,Object],horizontalBarStyle:[Array,String,Object],contentStyle:[Array,String,Object],contentActiveStyle:[Array,String,Object],delay:{type:[String,Number],default:1e3},visible:{type:Boolean,default:null},tabindex:[String,Number],onScroll:Function}),setup(e,{slots:l,emit:s}){const b=S(!1),t=S(!1),o=S(!1),n={vertical:S(0),horizontal:S(0)},a={vertical:{ref:S(null),position:S(0),size:S(0)},horizontal:{ref:S(null),position:S(0),size:S(0)}},p=qe(),r=Xe(e,p.proxy.$q);let B,k;const z=S(null),c=v(()=>"q-scrollarea"+(r.value===!0?" q-scrollarea--dark":""));a.vertical.percentage=v(()=>{const u=a.vertical.size.value-n.vertical.value;if(u<=0)return 0;const d=R(a.vertical.position.value/u,0,1);return Math.round(d*1e4)/1e4}),a.vertical.thumbHidden=v(()=>(e.visible===null?o.value:e.visible)!==!0&&b.value===!1&&t.value===!1||a.vertical.size.value<=n.vertical.value+1),a.vertical.thumbStart=v(()=>a.vertical.percentage.value*(n.vertical.value-a.vertical.thumbSize.value)),a.vertical.thumbSize=v(()=>Math.round(R(n.vertical.value*n.vertical.value/a.vertical.size.value,50,n.vertical.value))),a.vertical.style=v(()=>X(Q(Q({},e.thumbStyle),e.verticalThumbStyle),{top:`${a.vertical.thumbStart.value}px`,height:`${a.vertical.thumbSize.value}px`})),a.vertical.thumbClass=v(()=>"q-scrollarea__thumb q-scrollarea__thumb--v absolute-right"+(a.vertical.thumbHidden.value===!0?" q-scrollarea__thumb--invisible":"")),a.vertical.barClass=v(()=>"q-scrollarea__bar q-scrollarea__bar--v absolute-right"+(a.vertical.thumbHidden.value===!0?" q-scrollarea__bar--invisible":"")),a.horizontal.percentage=v(()=>{const u=a.horizontal.size.value-n.horizontal.value;if(u<=0)return 0;const d=R(a.horizontal.position.value/u,0,1);return Math.round(d*1e4)/1e4}),a.horizontal.thumbHidden=v(()=>(e.visible===null?o.value:e.visible)!==!0&&b.value===!1&&t.value===!1||a.horizontal.size.value<=n.horizontal.value+1),a.horizontal.thumbStart=v(()=>a.horizontal.percentage.value*(n.horizontal.value-a.horizontal.thumbSize.value)),a.horizontal.thumbSize=v(()=>Math.round(R(n.horizontal.value*n.horizontal.value/a.horizontal.size.value,50,n.horizontal.value))),a.horizontal.style=v(()=>X(Q(Q({},e.thumbStyle),e.horizontalThumbStyle),{left:`${a.horizontal.thumbStart.value}px`,width:`${a.horizontal.thumbSize.value}px`})),a.horizontal.thumbClass=v(()=>"q-scrollarea__thumb q-scrollarea__thumb--h absolute-bottom"+(a.horizontal.thumbHidden.value===!0?" q-scrollarea__thumb--invisible":"")),a.horizontal.barClass=v(()=>"q-scrollarea__bar q-scrollarea__bar--h absolute-bottom"+(a.horizontal.thumbHidden.value===!0?" q-scrollarea__bar--invisible":""));const g=v(()=>a.vertical.thumbHidden.value===!0&&a.horizontal.thumbHidden.value===!0?e.contentStyle:e.contentActiveStyle),w=[[te,u=>{ae(u,"vertical")},void 0,Q({vertical:!0},je)]],y=[[te,u=>{ae(u,"horizontal")},void 0,Q({horizontal:!0},je)]];function $(){const u={};return Ne.forEach(d=>{const m=a[d];u[d+"Position"]=m.position.value,u[d+"Percentage"]=m.percentage.value,u[d+"Size"]=m.size.value,u[d+"ContainerSize"]=n[d].value}),u}const f=Pt(()=>{const u=$();u.ref=p.proxy,s("scroll",u)},0);function x(u,d,m){if(Ne.includes(u)===!1){console.error("[QScrollArea]: wrong first param of setScrollPosition (vertical/horizontal)");return}(u==="vertical"?Le:Ae)(z.value,d,m)}function G({height:u,width:d}){let m=!1;n.vertical.value!==u&&(n.vertical.value=u,m=!0),n.horizontal.value!==d&&(n.horizontal.value=d,m=!0),m===!0&&W()}function N({position:u}){let d=!1;a.vertical.position.value!==u.top&&(a.vertical.position.value=u.top,d=!0),a.horizontal.position.value!==u.left&&(a.horizontal.position.value=u.left,d=!0),d===!0&&W()}function ce({height:u,width:d}){a.horizontal.size.value!==d&&(a.horizontal.size.value=d,W()),a.vertical.size.value!==u&&(a.vertical.size.value=u,W())}function ae(u,d){const m=a[d];if(u.isFirst===!0){if(m.thumbHidden.value===!0)return;k=m.position.value,t.value=!0}else if(t.value!==!0)return;u.isFinal===!0&&(t.value=!1);const A=Se[d],I=n[d].value,ve=(m.size.value-I)/(I-m.thumbSize.value),oe=u.distance[A.dist],de=k+(u.direction===A.dir?1:-1)*oe*ve;D(de,d)}function j(u,d){const m=a[d];if(m.thumbHidden.value!==!0){const A=u[Se[d].offset];if(A<m.thumbStart.value||A>m.thumbStart.value+m.thumbSize.value){const I=A-m.thumbSize.value/2;D(I/n[d].value*m.size.value,d)}m.ref.value!==null&&m.ref.value.dispatchEvent(new MouseEvent(u.type,u))}}function T(u){j(u,"vertical")}function H(u){j(u,"horizontal")}function W(){b.value===!0?clearTimeout(B):b.value=!0,B=setTimeout(()=>{b.value=!1},e.delay),e.onScroll!==void 0&&f()}function D(u,d){z.value[Se[d].scroll]=u}function J(){o.value=!0}function le(){o.value=!1}Object.assign(p.proxy,{getScrollTarget:()=>z.value,getScroll:$,getScrollPosition:()=>({top:a.vertical.position.value,left:a.horizontal.position.value}),getScrollPercentage:()=>({top:a.vertical.percentage.value,left:a.horizontal.percentage.value}),setScrollPosition:x,setScrollPercentage(u,d,m){x(u,d*(a[u].size.value-n[u].value),m)}});let V=null;return Tt(()=>{V={top:a.vertical.position.value,left:a.horizontal.position.value}}),Qt(()=>{if(V===null)return;const u=z.value;u!==null&&(Ae(u,V.left),Le(u,V.top))}),ke(f.cancel),()=>M("div",{class:c.value,onMouseenter:J,onMouseleave:le},[M("div",{ref:z,class:"q-scrollarea__container scroll relative-position fit hide-scrollbar",tabindex:e.tabindex!==void 0?e.tabindex:void 0},[M("div",{class:"q-scrollarea__content absolute",style:g.value},$t(l.default,[M(_e,{debounce:0,onResize:ce})])),M(Dt,{axis:"both",onScroll:N})]),M(_e,{debounce:0,onResize:G}),M("div",{class:a.vertical.barClass.value,style:[e.barStyle,e.verticalBarStyle],"aria-hidden":"true",onMousedown:T}),M("div",{class:a.horizontal.barClass.value,style:[e.barStyle,e.horizontalBarStyle],"aria-hidden":"true",onMousedown:H}),se(M("div",{ref:a.vertical.ref,class:a.vertical.thumbClass.value,style:a.vertical.style.value,"aria-hidden":"true"}),w),se(M("div",{ref:a.horizontal.ref,class:a.horizontal.thumbClass.value,style:a.horizontal.style.value,"aria-hidden":"true"}),y)])}});const We=150;var aa=Ce({name:"QDrawer",inheritAttrs:!1,props:X(Q(Q({},jt),Ie),{side:{type:String,default:"left",validator:e=>["left","right"].includes(e)},width:{type:Number,default:300},mini:Boolean,miniToOverlay:Boolean,miniWidth:{type:Number,default:57},breakpoint:{type:Number,default:1023},showIfAbove:Boolean,behavior:{type:String,validator:e=>["default","desktop","mobile"].includes(e),default:"default"},bordered:Boolean,elevated:Boolean,overlay:Boolean,persistent:Boolean,noSwipeOpen:Boolean,noSwipeClose:Boolean,noSwipeBackdrop:Boolean}),emits:[...Wt,"on-layout","mini-state"],setup(e,{slots:l,emit:s,attrs:b}){const t=qe(),{proxy:{$q:o}}=t,n=Xe(e,o),{preventBodyScroll:a}=Nt(),{registerTimeout:p}=_t(),r=Ye(Ke,()=>{console.error("QDrawer needs to be child of QLayout")});let B,k,z;const c=S(e.behavior==="mobile"||e.behavior!=="desktop"&&r.totalWidth.value<=e.breakpoint),g=v(()=>e.mini===!0&&c.value!==!0),w=v(()=>g.value===!0?e.miniWidth:e.width),y=S(e.showIfAbove===!0&&c.value===!1?!0:e.modelValue===!0),$=v(()=>e.persistent!==!0&&(c.value===!0||A.value===!0));function f(i,h){if(ce(),i!==!1&&r.animate(),P(0),c.value===!0){const O=r.instances[V.value];O!==void 0&&O.belowBreakpoint===!0&&O.hide(!1),E(1),r.isContainer.value!==!0&&a(!0)}else E(0),i!==!1&&he(!1);p(()=>{i!==!1&&he(!0),h!==!0&&s("show",i)},We)}function x(i,h){ae(),i!==!1&&r.animate(),E(0),P(H.value*w.value),me(),h!==!0&&p(()=>{s("hide",i)},We)}const{show:G,hide:N}=Ut({showing:y,hideOnRouteChange:$,handleShow:f,handleHide:x}),{addToHistory:ce,removeFromHistory:ae}=Rt(y,N,$),j={belowBreakpoint:c,hide:N},T=v(()=>e.side==="right"),H=v(()=>(o.lang.rtl===!0?-1:1)*(T.value===!0?1:-1)),W=S(0),D=S(!1),J=S(!1),le=S(w.value*H.value),V=v(()=>T.value===!0?"left":"right"),u=v(()=>y.value===!0&&c.value===!1&&e.overlay===!1?e.miniToOverlay===!0?e.miniWidth:w.value:0),d=v(()=>e.overlay===!0||e.miniToOverlay===!0||r.view.value.indexOf(T.value?"R":"L")>-1||o.platform.is.ios===!0&&r.isContainer.value===!0),m=v(()=>e.overlay===!1&&y.value===!0&&c.value===!1),A=v(()=>e.overlay===!0&&y.value===!0&&c.value===!1),I=v(()=>"fullscreen q-drawer__backdrop"+(y.value===!1&&D.value===!1?" hidden":"")),ve=v(()=>({backgroundColor:`rgba(0,0,0,${W.value*.4})`})),oe=v(()=>T.value===!0?r.rows.value.top[2]==="r":r.rows.value.top[0]==="l"),de=v(()=>T.value===!0?r.rows.value.bottom[2]==="r":r.rows.value.bottom[0]==="l"),Ze=v(()=>{const i={};return r.header.space===!0&&oe.value===!1&&(d.value===!0?i.top=`${r.header.offset}px`:r.header.space===!0&&(i.top=`${r.header.size}px`)),r.footer.space===!0&&de.value===!1&&(d.value===!0?i.bottom=`${r.footer.offset}px`:r.footer.space===!0&&(i.bottom=`${r.footer.size}px`)),i}),et=v(()=>{const i={width:`${w.value}px`,transform:`translateX(${le.value}px)`};return c.value===!0?i:Object.assign(i,Ze.value)}),tt=v(()=>"q-drawer__content fit "+(r.isContainer.value!==!0?"scroll":"overflow-auto")),at=v(()=>`q-drawer q-drawer--${e.side}`+(J.value===!0?" q-drawer--mini-animate":"")+(e.bordered===!0?" q-drawer--bordered":"")+(n.value===!0?" q-drawer--dark q-dark":"")+(D.value===!0?" no-transition":y.value===!0?"":" q-layout--prevent-focus")+(c.value===!0?" fixed q-drawer--on-top q-drawer--mobile q-drawer--top-padding":` q-drawer--${g.value===!0?"mini":"standard"}`+(d.value===!0||m.value!==!0?" fixed":"")+(e.overlay===!0||e.miniToOverlay===!0?" q-drawer--on-top":"")+(oe.value===!0?" q-drawer--top-padding":""))),lt=v(()=>{const i=o.lang.rtl===!0?e.side:V.value;return[[te,nt,void 0,{[i]:!0,mouse:!0}]]}),ot=v(()=>{const i=o.lang.rtl===!0?V.value:e.side;return[[te,Pe,void 0,{[i]:!0,mouse:!0}]]}),rt=v(()=>{const i=o.lang.rtl===!0?V.value:e.side;return[[te,Pe,void 0,{[i]:!0,mouse:!0,mouseAllDir:!0}]]});function fe(){ut(c,e.behavior==="mobile"||e.behavior!=="desktop"&&r.totalWidth.value<=e.breakpoint)}_(c,i=>{i===!0?(B=y.value,y.value===!0&&N(!1)):e.overlay===!1&&e.behavior!=="mobile"&&B!==!1&&(y.value===!0?(P(0),E(0),me()):G(!1))}),_(()=>e.side,(i,h)=>{r.instances[h]===j&&(r.instances[h]=void 0,r[h].space=!1,r[h].offset=0),r.instances[i]=j,r[i].size=w.value,r[i].space=m.value,r[i].offset=u.value}),_(r.totalWidth,()=>{(r.isContainer.value===!0||document.qScrollPrevented!==!0)&&fe()}),_(()=>e.behavior+e.breakpoint,fe),_(r.isContainer,i=>{y.value===!0&&a(i!==!0),i===!0&&fe()}),_(r.scrollbarWidth,()=>{P(y.value===!0?0:void 0)}),_(u,i=>{F("offset",i)}),_(m,i=>{s("on-layout",i),F("space",i)}),_(T,()=>{P()}),_(w,i=>{P(),be(e.miniToOverlay,i)}),_(()=>e.miniToOverlay,i=>{be(i,w.value)}),_(()=>o.lang.rtl,()=>{P()}),_(()=>e.mini,()=>{e.modelValue===!0&&(it(),r.animate())}),_(g,i=>{s("mini-state",i)});function P(i){i===void 0?He(()=>{i=y.value===!0?0:w.value,P(H.value*i)}):(r.isContainer.value===!0&&T.value===!0&&(c.value===!0||Math.abs(i)===w.value)&&(i+=H.value*r.scrollbarWidth.value),le.value=i)}function E(i){W.value=i}function he(i){const h=i===!0?"remove":r.isContainer.value!==!0?"add":"";h!==""&&document.body.classList[h]("q-body--drawer-toggle")}function it(){clearTimeout(k),t.proxy&&t.proxy.$el&&t.proxy.$el.classList.add("q-drawer--mini-animate"),J.value=!0,k=setTimeout(()=>{J.value=!1,t&&t.proxy&&t.proxy.$el&&t.proxy.$el.classList.remove("q-drawer--mini-animate")},150)}function nt(i){if(y.value!==!1)return;const h=w.value,O=R(i.distance.x,0,h);if(i.isFinal===!0){O>=Math.min(75,h)===!0?G():(r.animate(),E(0),P(H.value*h)),D.value=!1;return}P((o.lang.rtl===!0?T.value!==!0:T.value)?Math.max(h-O,0):Math.min(0,O-h)),E(R(O/h,0,1)),i.isFirst===!0&&(D.value=!0)}function Pe(i){if(y.value!==!0)return;const h=w.value,O=i.direction===e.side,re=(o.lang.rtl===!0?O!==!0:O)?R(i.distance.x,0,h):0;if(i.isFinal===!0){Math.abs(re)<Math.min(75,h)===!0?(r.animate(),E(1),P(0)):N(),D.value=!1;return}P(H.value*re),E(R(1-re/h,0,1)),i.isFirst===!0&&(D.value=!0)}function me(){a(!1),he(!0)}function F(i,h){r.update(e.side,i,h)}function ut(i,h){i.value!==h&&(i.value=h)}function be(i,h){F("size",i===!0?e.miniWidth:h)}return r.instances[e.side]=j,be(e.miniToOverlay,w.value),F("space",m.value),F("offset",u.value),e.showIfAbove===!0&&e.modelValue!==!0&&y.value===!0&&e["onUpdate:modelValue"]!==void 0&&s("update:modelValue",!0),Vt(()=>{s("on-layout",m.value),s("mini-state",g.value),B=e.showIfAbove===!0;const i=()=>{(y.value===!0?f:x)(!1,!0)};if(r.totalWidth.value!==0){He(i);return}z=_(r.totalWidth,()=>{z(),z=void 0,y.value===!1&&e.showIfAbove===!0&&c.value===!1?G(!1):i()})}),ke(()=>{z!==void 0&&z(),clearTimeout(k),y.value===!0&&me(),r.instances[e.side]===j&&(r.instances[e.side]=void 0,F("size",0),F("offset",0),F("space",!1))}),()=>{const i=[];c.value===!0&&(e.noSwipeOpen===!1&&i.push(se(M("div",{key:"open",class:`q-drawer__opener fixed-${e.side}`,"aria-hidden":"true"}),lt.value)),i.push(Ee("div",{ref:"backdrop",class:I.value,style:ve.value,"aria-hidden":"true",onClick:N},void 0,"backdrop",e.noSwipeBackdrop!==!0&&y.value===!0,()=>rt.value)));const h=g.value===!0&&l.mini!==void 0,O=[M("div",X(Q({},b),{key:""+h,class:[tt.value,b.class]}),h===!0?l.mini():At(l.default))];return e.elevated===!0&&y.value===!0&&O.push(M("div",{class:"q-layout__shadow absolute-full overflow-hidden no-pointer-events"})),i.push(Ee("aside",{ref:"content",class:at.value,style:et.value},O,"contentclose",e.noSwipeClose!==!0&&c.value===!0,()=>ot.value)),M("div",{class:"q-drawer-container"},i)}}});const la=Me({setup(e){const l=Je(),{isDrawerOpen:s}=Lt(l),b=[{key:"dashboard",icon:"home",to:{name:"dashboard"},label:"Dashboard"},{key:"myConsults",icon:"table_rows",to:{name:"consults"},label:"My Consults"},{key:"myLogbook",icon:"menu_book",to:{name:"viewLogbook"},label:"My Logbook"},{key:"myrotations",icon:"loop",to:{name:"rotations"},label:"My Rotations"},{key:"mysupervisors",icon:"people",to:{name:"supervisors"},label:"My Supervisors"},{key:"myhospitals",icon:"local_hospital",to:{name:"hospitals"},label:"My Hospitals"},{key:"myProfile",icon:"account_circle",to:{name:"viewProfile"},label:"My Profile"}];return(t,o)=>(L(),Y(aa,{modelValue:U(s),"onUpdate:modelValue":o[0]||(o[0]=n=>Ht(s)?s.value=n:null),"show-if-above":"",bordered:""},{default:q(()=>[C(ta,{class:"fit"},{default:q(()=>[C(Ue,null,{default:q(()=>[(L(),Be(xe,null,Ge(b,n=>se(C(ee,{key:n.key,clickable:"",to:n.to,exact:""},{default:q(()=>[C(De,{avatar:""},{default:q(()=>[C(gt,{name:n.icon},null,8,["name"])]),_:2},1024),C(De,null,{default:q(()=>[K(ue(n.label),1)]),_:2},1024)]),_:2},1032,["to"]),[[mt]])),64))]),_:1})]),_:1})]),_:1},8,["modelValue"]))}}),ga=Me({setup(e){return(l,s)=>{const b=Et("router-view");return L(),Be(xe,null,[C(Jt),C(la),C(ht,{class:"bg-grey-2"},{default:q(()=>[C(b)]),_:1})],64)}}});export{ga as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
