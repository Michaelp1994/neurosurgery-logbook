var ht=Object.defineProperty,wt=Object.defineProperties;var _t=Object.getOwnPropertyDescriptors;var Be=Object.getOwnPropertySymbols;var Pt=Object.prototype.hasOwnProperty,qt=Object.prototype.propertyIsEnumerable;var Oe=(e,l,a)=>l in e?ht(e,l,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[l]=a,_=(e,l)=>{for(var a in l||(l={}))Pt.call(l,a)&&Oe(e,a,l[a]);if(Be)for(var a of Be(l))qt.call(l,a)&&Oe(e,a,l[a]);return e},L=(e,l)=>wt(e,_t(l));import{K as z,J as d,N as r,R as ae,P as U,ah as Ct,x as A,G as D,aH as je,M as Ee,L as Qe,a0 as Ne,ay as kt,a4 as Fe,aA as Le,aI as Se,aJ as $e,aK as Rt,H as Ae,aL as xt,a7 as H}from"./vendor.3fb54e24.js";import{c as He,d as pe,a as Tt,e as ze,b as Bt}from"./QCard.ba24e7ad.js";import{Q as Ot}from"./QItemLabel.7ecff6cd.js";import{Q as Ft}from"./QList.dc10b5ea.js";import{Q as Lt}from"./QMarkupTable.c64ee7d2.js";import{u as $t,a as Mt,c as Ue,Q as Vt}from"./QSelect.895e741b.js";import{Q as me}from"./QCheckbox.6a62765b.js";import{v as Dt,Q as te}from"./use-key-composition.9a07a52d.js";var yl=z({name:"QTd",props:{props:Object,autoWidth:Boolean,noHover:Boolean},setup(e,{slots:l}){const a=U(),f=d(()=>"q-td"+(e.autoWidth===!0?" q-table--col-auto-width":"")+(e.noHover===!0?" q-td--no-hover":"")+" ");return()=>{if(e.props===void 0)return r("td",{class:f.value},ae(l.default));const o=a.vnode.key,u=(e.props.colsMap!==void 0?e.props.colsMap[o]:null)||e.props.col;if(u===void 0)return;const{row:c}=e.props;return r("td",{class:f.value+u.__tdClass(c),style:u.__tdStyle(c)},ae(l.default))}}}),jt=z({name:"QTh",props:{props:Object,autoWidth:Boolean},emits:["click"],setup(e,{slots:l,emit:a}){const f=U(),{proxy:{$q:o}}=f;return()=>{if(e.props===void 0)return r("th",{class:e.autoWidth===!0?"q-table--col-auto-width":""},ae(l.default));let u,c;const s=f.vnode.key;if(s){if(u=e.props.colsMap[s],u===void 0)return}else u=e.props.col;if(u.sortable===!0){const m=u.align==="right"?"unshift":"push";c=Ct(l.default,[]),c[m](r(He,{class:u.__iconClass,name:o.iconSet.table.arrowUp}))}else c=ae(l.default);const v={class:u.__thClass+(e.autoWidth===!0?" q-table--col-auto-width":""),style:u.headerStyle,onClick:m=>{u.sortable===!0&&e.props.sort(u),a("click",m)}};return r("th",v,c)}}});function Ie(e,l){return r("div",e,[r("table",{class:"q-table"},l)])}const Et={list:Ft,table:Lt},Qt=["list","table","__qtable"];var Nt=z({name:"QVirtualScroll",props:L(_({},$t),{type:{type:String,default:"list",validator:e=>Qt.includes(e)},items:{type:Array,default:()=>[]},itemsFn:Function,itemsSize:Number,scrollTarget:{default:void 0}}),setup(e,{slots:l,attrs:a}){let f;const o=A(null),u=d(()=>e.itemsSize>=0&&e.itemsFn!==void 0?parseInt(e.itemsSize,10):Array.isArray(e.items)?e.items.length:0),{virtualScrollSliceRange:c,localResetVirtualScroll:s,padVirtualScroll:v,onVirtualScrollEvt:m}=Mt({virtualScrollLength:u,getVirtualScrollTarget:C,getVirtualScrollEl:q}),n=d(()=>{if(u.value===0)return[];const F=($,x)=>({index:c.value.from+x,item:$});return e.itemsFn===void 0?e.items.slice(c.value.from,c.value.to).map(F):e.itemsFn(c.value.from,c.value.to-c.value.from).map(F)}),S=d(()=>"q-virtual-scroll q-virtual-scroll"+(e.virtualScrollHorizontal===!0?"--horizontal":"--vertical")+(e.scrollTarget!==void 0?"":" scroll")),P=d(()=>e.scrollTarget!==void 0?{}:{tabindex:0});D(u,()=>{s()}),D(()=>e.scrollTarget,()=>{w(),h()});function q(){return o.value.$el||o.value}function C(){return f}function h(){f=kt(q(),e.scrollTarget),f.addEventListener("scroll",m,Fe.passive)}function w(){f!==void 0&&(f.removeEventListener("scroll",m,Fe.passive),f=void 0)}function O(){let F=v(e.type==="list"?"div":"tbody",n.value.map(l.default));return l.before!==void 0&&(F=l.before().concat(F)),Ne(l.after,F)}return je(()=>{s()}),Ee(()=>{h()}),Qe(()=>{w()}),()=>{if(l.default===void 0){console.error("QVirtualScroll: default scoped slot is required for rendering");return}return e.type==="__qtable"?Ie({ref:o,class:"q-table__middle "+S.value},O()):r(Et[e.type],_(L(_({},a),{ref:o,class:[a.class,S.value]}),P.value),O)}}});const At={xs:2,sm:4,md:6,lg:10,xl:14};function Me(e,l,a){return{transform:l===!0?`translateX(${a.lang.rtl===!0?"-":""}100%) scale3d(${-e},1,1)`:`scale3d(${e},1,1)`}}var Ht=z({name:"QLinearProgress",props:L(_(_({},pe),Tt),{value:{type:Number,default:0},buffer:Number,color:String,trackColor:String,reverse:Boolean,stripe:Boolean,indeterminate:Boolean,query:Boolean,rounded:Boolean,animationSpeed:{type:[String,Number],default:2100},instantFeedback:Boolean}),setup(e,{slots:l}){const{proxy:a}=U(),f=ze(e,a.$q),o=Bt(e,At),u=d(()=>e.indeterminate===!0||e.query===!0),c=d(()=>e.reverse!==e.query),s=d(()=>L(_({},o.value!==null?o.value:{}),{"--q-linear-progress-speed":`${e.animationSpeed}ms`})),v=d(()=>"q-linear-progress"+(e.color!==void 0?` text-${e.color}`:"")+(e.reverse===!0||e.query===!0?" q-linear-progress--reverse":"")+(e.rounded===!0?" rounded-borders":"")),m=d(()=>Me(e.buffer!==void 0?e.buffer:1,c.value,a.$q)),n=d(()=>`q-linear-progress__track absolute-full q-linear-progress__track--with${e.instantFeedback===!0?"out":""}-transition q-linear-progress__track--${f.value===!0?"dark":"light"}`+(e.trackColor!==void 0?` bg-${e.trackColor}`:"")),S=d(()=>Me(u.value===!0?1:e.value,c.value,a.$q)),P=d(()=>`q-linear-progress__model absolute-full q-linear-progress__model--with${e.instantFeedback===!0?"out":""}-transition q-linear-progress__model--${u.value===!0?"in":""}determinate`),q=d(()=>({width:`${e.value*100}%`})),C=d(()=>`q-linear-progress__stripe absolute-${e.reverse===!0?"right":"left"}`);return()=>{const h=[r("div",{class:n.value,style:m.value}),r("div",{class:P.value,style:S.value})];return e.stripe===!0&&u.value===!1&&h.push(r("div",{class:C.value,style:q.value})),r("div",{class:v.value,style:s.value,role:"progressbar","aria-valuemin":0,"aria-valuemax":1,"aria-valuenow":e.indeterminate===!0?void 0:e.value},Ne(l.default,h))}}});let p=0;const pt={fullscreen:Boolean,noRouteFullscreenExit:Boolean},zt=["update:fullscreen","fullscreen"];function Ut(){const e=U(),{props:l,emit:a,proxy:f}=e;let o,u,c;const s=A(!1);Dt(e)===!0&&D(()=>f.$route.fullPath,()=>{l.noRouteFullscreenExit!==!0&&n()}),D(()=>l.fullscreen,S=>{s.value!==S&&v()}),D(s,S=>{a("update:fullscreen",S),a("fullscreen",S)});function v(){s.value===!0?n():m()}function m(){s.value!==!0&&(s.value=!0,c=f.$el.parentNode,c.replaceChild(u,f.$el),document.body.appendChild(f.$el),p++,p===1&&document.body.classList.add("q-body--fullscreen-mixin"),o={handler:n},Le.add(o))}function n(){s.value===!0&&(o!==void 0&&(Le.remove(o),o=void 0),c.replaceChild(f.$el,u),s.value=!1,p=Math.max(0,p-1),p===0&&(document.body.classList.remove("q-body--fullscreen-mixin"),f.$el.scrollIntoView!==void 0&&setTimeout(()=>{f.$el.scrollIntoView()})))}return je(()=>{u=document.createElement("span")}),Ee(()=>{l.fullscreen===!0&&m()}),Qe(n),Object.assign(f,{toggleFullscreen:v,setFullscreen:m,exitFullscreen:n}),{inFullscreen:s,toggleFullscreen:v}}function It(e,l){return new Date(e)-new Date(l)}const Kt={sortMethod:Function,binaryStateSort:Boolean,columnSortOrder:{type:String,validator:e=>e==="ad"||e==="da",default:"ad"}};function Wt(e,l,a,f){const o=d(()=>{const{sortBy:s}=l.value;return s&&a.value.find(v=>v.name===s)||null}),u=d(()=>e.sortMethod!==void 0?e.sortMethod:(s,v,m)=>{const n=a.value.find(q=>q.name===v);if(n===void 0||n.field===void 0)return s;const S=m===!0?-1:1,P=typeof n.field=="function"?q=>n.field(q):q=>q[n.field];return s.sort((q,C)=>{let h=P(q),w=P(C);return h==null?-1*S:w==null?1*S:n.sort!==void 0?n.sort(h,w,q,C)*S:Se(h)===!0&&Se(w)===!0?(h-w)*S:$e(h)===!0&&$e(w)===!0?It(h,w)*S:typeof h=="boolean"&&typeof w=="boolean"?(h-w)*S:([h,w]=[h,w].map(O=>(O+"").toLocaleString().toLowerCase()),h<w?-1*S:h===w?0:S)})});function c(s){let v=e.columnSortOrder;if(Rt(s)===!0)s.sortOrder&&(v=s.sortOrder),s=s.name;else{const S=a.value.find(P=>P.name===s);S!==void 0&&S.sortOrder&&(v=S.sortOrder)}let{sortBy:m,descending:n}=l.value;m!==s?(m=s,n=v==="da"):e.binaryStateSort===!0?n=!n:n===!0?v==="ad"?m=null:n=!1:v==="ad"?n=!0:m=null,f({sortBy:m,descending:n,page:1})}return{columnToSort:o,computedSortMethod:u,sort:c}}const Gt={filter:[String,Object],filterMethod:Function};function Jt(e,l){const a=d(()=>e.filterMethod!==void 0?e.filterMethod:(f,o,u,c)=>{const s=o?o.toLowerCase():"";return f.filter(v=>u.some(m=>{const n=c(m,v)+"";return(n==="undefined"||n==="null"?"":n.toLowerCase()).indexOf(s)!==-1}))});return D(()=>e.filter,()=>{Ae(()=>{l({page:1},!0)})},{deep:!0}),{computedFilterMethod:a}}function Xt(e,l){for(const a in l)if(l[a]!==e[a])return!1;return!0}function Ve(e){return e.page<1&&(e.page=1),e.rowsPerPage!==void 0&&e.rowsPerPage<1&&(e.rowsPerPage=0),e}const Yt={pagination:Object,rowsPerPageOptions:{type:Array,default:()=>[5,7,10,15,20,25,50,0]},"onUpdate:pagination":[Function,Array]};function Zt(e,l){const{props:a,emit:f}=e,o=A(Object.assign({sortBy:null,descending:!1,page:1,rowsPerPage:a.rowsPerPageOptions.length>0?a.rowsPerPageOptions[0]:5},a.pagination)),u=d(()=>{const n=a["onUpdate:pagination"]!==void 0?_(_({},o.value),a.pagination):o.value;return Ve(n)}),c=d(()=>u.value.rowsNumber!==void 0);function s(n){v({pagination:n,filter:a.filter})}function v(n={}){Ae(()=>{f("request",{pagination:n.pagination||u.value,filter:n.filter||a.filter,getCellValue:l})})}function m(n,S){const P=Ve(_(_({},u.value),n));if(Xt(u.value,P)===!0){c.value===!0&&S===!0&&s(P);return}if(c.value===!0){s(P);return}a.pagination!==void 0&&a["onUpdate:pagination"]!==void 0?f("update:pagination",P):o.value=P}return{innerPagination:o,computedPagination:u,isServerSide:c,requestServerInteraction:v,setPagination:m}}function el(e,l,a,f,o,u){const{props:c,emit:s,proxy:{$q:v}}=e,m=d(()=>f.value===!0?a.value.rowsNumber||0:u.value),n=d(()=>{const{page:x,rowsPerPage:T}=a.value;return(x-1)*T}),S=d(()=>{const{page:x,rowsPerPage:T}=a.value;return x*T}),P=d(()=>a.value.page===1),q=d(()=>a.value.rowsPerPage===0?1:Math.max(1,Math.ceil(m.value/a.value.rowsPerPage))),C=d(()=>S.value===0?!0:a.value.page>=q.value),h=d(()=>(c.rowsPerPageOptions.includes(l.value.rowsPerPage)?c.rowsPerPageOptions:[l.value.rowsPerPage].concat(c.rowsPerPageOptions)).map(T=>({label:T===0?v.lang.table.allRows:""+T,value:T})));D(q,(x,T)=>{if(x===T)return;const I=a.value.page;x&&!I?o({page:1}):x<I&&o({page:x})});function w(){o({page:1})}function O(){const{page:x}=a.value;x>1&&o({page:x-1})}function F(){const{page:x,rowsPerPage:T}=a.value;S.value>0&&x*T<m.value&&o({page:x+1})}function $(){o({page:q.value})}return c["onUpdate:pagination"]!==void 0&&s("update:pagination",_({},a.value)),{firstRowIndex:n,lastRowIndex:S,isFirstPage:P,isLastPage:C,pagesNumber:q,computedRowsPerPageOptions:h,computedRowsNumber:m,firstPage:w,prevPage:O,nextPage:F,lastPage:$}}const tl={selection:{type:String,default:"none",validator:e=>["single","multiple","none"].includes(e)},selected:{type:Array,default:()=>[]}},ll=["update:selected","selection"];function al(e,l,a,f){const o=d(()=>{const C={};return e.selected.map(f.value).forEach(h=>{C[h]=!0}),C}),u=d(()=>e.selection!=="none"),c=d(()=>e.selection==="single"),s=d(()=>e.selection==="multiple"),v=d(()=>a.value.length>0&&a.value.every(C=>o.value[f.value(C)]===!0)),m=d(()=>v.value!==!0&&a.value.some(C=>o.value[f.value(C)]===!0)),n=d(()=>e.selected.length);function S(C){return o.value[C]===!0}function P(){l("update:selected",[])}function q(C,h,w,O){l("selection",{rows:h,added:w,keys:C,evt:O});const F=c.value===!0?w===!0?h:[]:w===!0?e.selected.concat(h):e.selected.filter($=>C.includes(f.value($))===!1);l("update:selected",F)}return{hasSelectionMode:u,singleSelection:c,multipleSelection:s,allRowsSelected:v,someRowsSelected:m,rowsSelectedNumber:n,isRowSelected:S,clearSelection:P,updateSelection:q}}function De(e){return Array.isArray(e)?e.slice():[]}const nl={expanded:Array},rl=["update:expanded"];function ol(e,l){const a=A(De(e.expanded));D(()=>e.expanded,c=>{a.value=De(c)});function f(c){return a.value.includes(c)}function o(c){e.expanded!==void 0?l("update:expanded",c):a.value=c}function u(c,s){const v=a.value.slice(),m=v.indexOf(c);s===!0?m===-1&&(v.push(c),o(v)):m!==-1&&(v.splice(m,1),o(v))}return{isRowExpanded:f,setExpanded:o,updateExpanded:u}}const il={visibleColumns:Array};function ul(e,l,a){const f=d(()=>{if(e.columns!==void 0)return e.columns;const s=e.rows[0];return s!==void 0?Object.keys(s).map(v=>({name:v,label:v.toUpperCase(),field:v,align:Se(s[v])?"right":"left",sortable:!0})):[]}),o=d(()=>{const{sortBy:s,descending:v}=l.value;return(e.visibleColumns!==void 0?f.value.filter(n=>n.required===!0||e.visibleColumns.includes(n.name)===!0):f.value).map(n=>{const S=n.align||"right",P=`text-${S}`;return L(_({},n),{align:S,__iconClass:`q-table__sort-icon q-table__sort-icon--${S}`,__thClass:P+(n.headerClasses!==void 0?" "+n.headerClasses:"")+(n.sortable===!0?" sortable":"")+(n.name===s?` sorted ${v===!0?"sort-desc":""}`:""),__tdStyle:n.style!==void 0?typeof n.style!="function"?()=>n.style:n.style:()=>null,__tdClass:n.classes!==void 0?typeof n.classes!="function"?()=>P+" "+n.classes:q=>P+" "+n.classes(q):()=>P})})}),u=d(()=>{const s={};return o.value.forEach(v=>{s[v.name]=v}),s}),c=d(()=>e.tableColspan!==void 0?e.tableColspan:o.value.length+(a.value===!0?1:0));return{colList:f,computedCols:o,computedColsMap:u,computedColspan:c}}const le="q-table__bottom row items-center",Ke={};Ue.forEach(e=>{Ke[e]={}});var hl=z({name:"QTable",props:_(_(_(_(_(_(_(_(L(_({rows:{type:Array,default:()=>[]},rowKey:{type:[String,Function],default:"id"},columns:Array,loading:Boolean,iconFirstPage:String,iconPrevPage:String,iconNextPage:String,iconLastPage:String,title:String,hideHeader:Boolean,grid:Boolean,gridHeader:Boolean,dense:Boolean,flat:Boolean,bordered:Boolean,square:Boolean,separator:{type:String,default:"horizontal",validator:e=>["horizontal","vertical","cell","none"].includes(e)},wrapCells:Boolean,virtualScroll:Boolean},Ke),{noDataLabel:String,noResultsLabel:String,loadingLabel:String,selectedRowsLabel:Function,rowsPerPageLabel:String,paginationLabel:Function,color:{type:String,default:"grey-8"},titleClass:[String,Array,Object],tableStyle:[String,Array,Object],tableClass:[String,Array,Object],tableHeaderStyle:[String,Array,Object],tableHeaderClass:[String,Array,Object],cardContainerClass:[String,Array,Object],cardContainerStyle:[String,Array,Object],cardStyle:[String,Array,Object],cardClass:[String,Array,Object],hideBottom:Boolean,hideSelectedBanner:Boolean,hideNoData:Boolean,hidePagination:Boolean,onRowClick:Function,onRowDblclick:Function,onRowContextmenu:Function}),pe),pt),il),Gt),Yt),nl),tl),Kt),emits:["request","virtual-scroll",...zt,...rl,...ll],setup(e,{slots:l,emit:a}){const f=U(),{proxy:{$q:o}}=f,u=ze(e,o),{inFullscreen:c,toggleFullscreen:s}=Ut(),v=d(()=>typeof e.rowKey=="function"?e.rowKey:t=>t[e.rowKey]),m=A(null),n=A(null),S=d(()=>e.grid!==!0&&e.virtualScroll===!0),P=d(()=>" q-table__card"+(u.value===!0?" q-table__card--dark q-dark":"")+(e.square===!0?" q-table--square":"")+(e.flat===!0?" q-table--flat":"")+(e.bordered===!0?" q-table--bordered":"")),q=d(()=>`q-table__container q-table--${e.separator}-separator column no-wrap`+(e.loading===!0?" q-table--loading":"")+(e.grid===!0?" q-table--grid":P.value)+(u.value===!0?" q-table--dark":"")+(e.dense===!0?" q-table--dense":"")+(e.wrapCells===!1?" q-table--no-wrap":"")+(c.value===!0?" fullscreen scroll":"")),C=d(()=>q.value+(e.loading===!0?" q-table--loading":""));D(()=>e.tableStyle+e.tableClass+e.tableHeaderStyle+e.tableHeaderClass+q.value,()=>{S.value===!0&&n.value!==null&&n.value.reset()});const{innerPagination:h,computedPagination:w,isServerSide:O,requestServerInteraction:F,setPagination:$}=Zt(f,Q),{computedFilterMethod:x}=Jt(e,$),{isRowExpanded:T,setExpanded:I,updateExpanded:We}=ol(e,a),ne=d(()=>{let t=e.rows;if(O.value===!0||t.length===0)return t;const{sortBy:i,descending:g}=w.value;return e.filter&&(t=x.value(t,e.filter,M.value,Q)),Ze.value!==null&&(t=et.value(e.rows===t?t.slice():t,i,g)),t}),ye=d(()=>ne.value.length),j=d(()=>{let t=ne.value;if(O.value===!0)return t;const{rowsPerPage:i}=w.value;return i!==0&&(W.value===0&&e.rows!==t?t.length>G.value&&(t=t.slice(0,G.value)):t=t.slice(W.value,G.value)),t}),{hasSelectionMode:E,singleSelection:Ge,multipleSelection:he,allRowsSelected:Je,someRowsSelected:we,rowsSelectedNumber:re,isRowSelected:oe,clearSelection:Xe,updateSelection:K}=al(e,a,j,v),{colList:Ye,computedCols:M,computedColsMap:_e,computedColspan:Pe}=ul(e,w,E),{columnToSort:Ze,computedSortMethod:et,sort:ie}=Wt(e,w,Ye,$),{firstRowIndex:W,lastRowIndex:G,isFirstPage:ue,isLastPage:se,pagesNumber:J,computedRowsPerPageOptions:tt,computedRowsNumber:X,firstPage:ce,prevPage:de,nextPage:ve,lastPage:fe}=el(f,h,w,O,$,ye),lt=d(()=>j.value.length===0),at=d(()=>{const t={};return Ue.forEach(i=>{t[i]=e[i]}),t.virtualScrollItemSize===void 0&&(t.virtualScrollItemSize=e.dense===!0?28:48),t});function nt(){S.value===!0&&n.value.reset()}function rt(){if(e.grid===!0)return St();const t=e.hideHeader!==!0?xe:null;if(S.value===!0){const g=l["top-row"],b=l["bottom-row"],y={default:R=>Ce(R.item,l.body,R.index)};if(g!==void 0){const R=r("tbody",g({cols:M.value}));y.before=t===null?()=>R:()=>[t()].concat(R)}else t!==null&&(y.before=t);return b!==void 0&&(y.after=()=>r("tbody",b({cols:M.value}))),r(Nt,L(_({ref:n,class:e.tableClass,style:e.tableStyle},at.value),{items:j.value,type:"__qtable",tableColspan:Pe.value,onVirtualScroll:it}),y)}const i=[ut()];return t!==null&&i.unshift(t()),Ie({class:["q-table__middle scroll",e.tableClass],style:e.tableStyle},i)}function ot(t,i){if(n.value!==null){n.value.scrollTo(t,i);return}t=parseInt(t,10);const g=m.value.querySelector(`tbody tr:nth-of-type(${t+1})`);if(g!==null){const b=m.value.querySelector(".q-table__middle.scroll"),{offsetTop:y}=g,R=y<b.scrollTop?"decrease":"increase";b.scrollTop=y,a("virtual-scroll",{index:t,from:0,to:h.value.rowsPerPage-1,direction:R})}}function it(t){a("virtual-scroll",t)}function qe(){return[r(Ht,{class:"q-table__linear-progress",color:e.color,dark:u.value,indeterminate:!0,trackColor:"transparent"})]}function Ce(t,i,g){const b=v.value(t),y=oe(b);if(i!==void 0)return i(ke({key:b,row:t,pageIndex:g,__trClass:y?"selected":""}));const R=l["body-cell"],k=M.value.map(B=>{const Z=l[`body-cell-${B.name}`],ee=Z!==void 0?Z:R;return ee!==void 0?ee(st({key:b,row:t,pageIndex:g,col:B})):r("td",{class:B.__tdClass(t),style:B.__tdStyle(t)},Q(B,t))});if(E.value===!0){const B=l["body-selection"],Z=B!==void 0?B(ct({key:b,row:t,pageIndex:g})):[r(me,{modelValue:y,color:e.color,dark:u.value,dense:e.dense,"onUpdate:modelValue":(ee,yt)=>{K([b],[t],ee,yt)}})];k.unshift(r("td",{class:"q-table--col-auto-width"},Z))}const V={key:b,class:{selected:y}};return e.onRowClick!==void 0&&(V.class["cursor-pointer"]=!0,V.onClick=B=>{a("RowClick",B,t,g)}),e.onRowDblclick!==void 0&&(V.class["cursor-pointer"]=!0,V.onDblclick=B=>{a("RowDblclick",B,t,g)}),e.onRowContextmenu!==void 0&&(V.class["cursor-pointer"]=!0,V.onContextmenu=B=>{a("RowContextmenu",B,t,g)}),r("tr",V,k)}function ut(){const t=l.body,i=l["top-row"],g=l["bottom-row"];let b=j.value.map((y,R)=>Ce(y,t,R));return i!==void 0&&(b=i({cols:M.value}).concat(b)),g!==void 0&&(b=b.concat(g({cols:M.value}))),r("tbody",b)}function ke(t){return ge(t),t.cols=t.cols.map(i=>{const g=_({},i);return H(g,"value",()=>Q(i,t.row)),g}),t}function st(t){return ge(t),H(t,"value",()=>Q(t.col,t.row)),t}function ct(t){return ge(t),t}function ge(t){Object.assign(t,{cols:M.value,colsMap:_e.value,sort:ie,rowIndex:W.value+t.pageIndex,color:e.color,dark:u.value,dense:e.dense}),E.value===!0&&H(t,"selected",()=>oe(t.key),(i,g)=>{K([t.key],[t.row],i,g)}),H(t,"expand",()=>T(t.key),i=>{We(t.key,i)})}function Q(t,i){const g=typeof t.field=="function"?t.field(i):i[t.field];return t.format!==void 0?t.format(g,i):g}const N=d(()=>({pagination:w.value,pagesNumber:J.value,isFirstPage:ue.value,isLastPage:se.value,firstPage:ce,prevPage:de,nextPage:ve,lastPage:fe,inFullscreen:c.value,toggleFullscreen:s}));function dt(){const t=l.top,i=l["top-left"],g=l["top-right"],b=l["top-selection"],y=E.value===!0&&b!==void 0&&re.value>0,R="q-table__top relative-position row items-center";if(t!==void 0)return r("div",{class:R},[t(N.value)]);let k;if(y===!0?k=b(N.value).slice():(k=[],i!==void 0?k.push(r("div",{class:"q-table-control"},[i(N.value)])):e.title&&k.push(r("div",{class:"q-table__control"},[r("div",{class:["q-table__title",e.titleClass]},e.title)]))),g!==void 0&&(k.push(r("div",{class:"q-table__separator col"})),k.push(r("div",{class:"q-table__control"},[g(N.value)]))),k.length!==0)return r("div",{class:R},k)}const Re=d(()=>we.value===!0?null:Je.value);function xe(){const t=vt();return e.loading===!0&&l.loading===void 0&&t.push(r("tr",{class:"q-table__progress"},[r("th",{class:"relative-position",colspan:Pe.value},qe())])),r("thead",t)}function vt(){const t=l.header,i=l["header-cell"];if(t!==void 0)return t(be({header:!0})).slice();const g=M.value.map(b=>{const y=l[`header-cell-${b.name}`],R=y!==void 0?y:i,k=be({col:b});return R!==void 0?R(k):r(jt,{key:b.name,props:k},()=>b.label)});if(Ge.value===!0&&e.grid!==!0)g.unshift(r("th",{class:"q-table--col-auto-width"}," "));else if(he.value===!0){const b=l["header-selection"],y=b!==void 0?b(be({})):[r(me,{color:e.color,modelValue:Re.value,dark:u.value,dense:e.dense,"onUpdate:modelValue":Te})];g.unshift(r("th",{class:"q-table--col-auto-width"},y))}return[r("tr",{class:e.tableHeaderClass,style:e.tableHeaderStyle},g)]}function be(t){return Object.assign(t,{cols:M.value,sort:ie,colsMap:_e.value,color:e.color,dark:u.value,dense:e.dense}),he.value===!0&&H(t,"selected",()=>Re.value,Te),t}function Te(t){we.value===!0&&(t=!1),K(j.value.map(v.value),j.value,t)}const Y=d(()=>{const t=[e.iconFirstPage||o.iconSet.table.firstPage,e.iconPrevPage||o.iconSet.table.prevPage,e.iconNextPage||o.iconSet.table.nextPage,e.iconLastPage||o.iconSet.table.lastPage];return o.lang.rtl===!0?t.reverse():t});function ft(){if(e.hideBottom===!0)return;if(lt.value===!0){if(e.hideNoData===!0)return;const g=e.loading===!0?e.loadingLabel||o.lang.table.loading:e.filter?e.noResultsLabel||o.lang.table.noResults:e.noDataLabel||o.lang.table.noData,b=l["no-data"],y=b!==void 0?[b({message:g,icon:o.iconSet.table.warning,filter:e.filter})]:[r(He,{class:"q-table__bottom-nodata-icon",name:o.iconSet.table.warning}),g];return r("div",{class:le+" q-table__bottom--nodata"},y)}const t=l.bottom;if(t!==void 0)return r("div",{class:le},[t(N.value)]);const i=e.hideSelectedBanner!==!0&&E.value===!0&&re.value>0?[r("div",{class:"q-table__control"},[r("div",[(e.selectedRowsLabel||o.lang.table.selectedRecords)(re.value)])])]:[];if(e.hidePagination!==!0)return r("div",{class:le+" justify-end"},bt(i));if(i.length>0)return r("div",{class:le},i)}function gt(t){$({page:1,rowsPerPage:t.value})}function bt(t){let i;const{rowsPerPage:g}=w.value,b=e.paginationLabel||o.lang.table.pagination,y=l.pagination,R=e.rowsPerPageOptions.length>1;if(t.push(r("div",{class:"q-table__separator col"})),R===!0&&t.push(r("div",{class:"q-table__control"},[r("span",{class:"q-table__bottom-item"},[e.rowsPerPageLabel||o.lang.table.recordsPerPage]),r(Vt,{class:"q-table__select inline q-table__bottom-item",color:e.color,modelValue:g,options:tt.value,displayValue:g===0?o.lang.table.allRows:g,dark:u.value,borderless:!0,dense:!0,optionsDense:!0,optionsCover:!0,"onUpdate:modelValue":gt})])),y!==void 0)i=y(N.value);else if(i=[r("span",g!==0?{class:"q-table__bottom-item"}:{},[g?b(W.value+1,Math.min(G.value,X.value),X.value):b(1,ye.value,X.value)])],g!==0&&J.value>1){const k={color:e.color,round:!0,dense:!0,flat:!0};e.dense===!0&&(k.size="sm"),J.value>2&&i.push(r(te,L(_({key:"pgFirst"},k),{icon:Y.value[0],disable:ue.value,onClick:ce}))),i.push(r(te,L(_({key:"pgPrev"},k),{icon:Y.value[1],disable:ue.value,onClick:de})),r(te,L(_({key:"pgNext"},k),{icon:Y.value[2],disable:se.value,onClick:ve}))),J.value>2&&i.push(r(te,L(_({key:"pgLast"},k),{icon:Y.value[3],disable:se.value,onClick:fe})))}return t.push(r("div",{class:"q-table__control"},i)),t}function mt(){const t=e.gridHeader===!0?[r("table",{class:"q-table"},[xe()])]:e.loading===!0&&l.loading===void 0?qe():void 0;return r("div",{class:"q-table__middle"},t)}function St(){const t=l.item!==void 0?l.item:i=>{const g=i.cols.map(y=>r("div",{class:"q-table__grid-item-row"},[r("div",{class:"q-table__grid-item-title"},[y.label]),r("div",{class:"q-table__grid-item-value"},[y.value])]));if(E.value===!0){const y=l["body-selection"],R=y!==void 0?y(i):[r(me,{modelValue:i.selected,color:e.color,dark:u.value,dense:e.dense,"onUpdate:modelValue":(k,V)=>{K([i.key],[i.row],k,V)}})];g.unshift(r("div",{class:"q-table__grid-item-row"},R),r(Ot,{dark:u.value}))}const b={class:["q-table__grid-item-card"+P.value,e.cardClass],style:e.cardStyle};return(e.onRowClick!==void 0||e.onRowDblclick!==void 0)&&(b.class[0]+=" cursor-pointer",e.onRowClick!==void 0&&(b.onClick=y=>{a("RowClick",y,i.row,i.pageIndex)}),e.onRowDblclick!==void 0&&(b.onDblclick=y=>{a("RowDblclick",y,i.row,i.pageIndex)})),r("div",{class:"q-table__grid-item col-xs-12 col-sm-6 col-md-4 col-lg-3"+(i.selected===!0?"q-table__grid-item--selected":"")},[r("div",b,g)])};return r("div",{class:["q-table__grid-content row",e.cardContainerClass],style:e.cardContainerStyle},j.value.map((i,g)=>t(ke({key:v.value(i),row:i,pageIndex:g}))))}return Object.assign(f.proxy,{requestServerInteraction:F,setPagination:$,firstPage:ce,prevPage:de,nextPage:ve,lastPage:fe,isRowSelected:oe,clearSelection:Xe,isRowExpanded:T,setExpanded:I,sort:ie,resetVirtualScroll:nt,scrollTo:ot,getCellValue:Q}),xt(f.proxy,{filteredSortedRows:()=>ne.value,computedRows:()=>j.value,computedRowsNumber:()=>X.value}),()=>{const t=[dt()],i={ref:m,class:C.value};return e.grid===!0?t.push(mt()):Object.assign(i,{class:[i.class,e.cardClass],style:e.cardStyle}),t.push(rt(),ft()),e.loading===!0&&l.loading!==void 0&&t.push(l.loading()),r("div",i,t)}}});export{yl as Q,hl as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
